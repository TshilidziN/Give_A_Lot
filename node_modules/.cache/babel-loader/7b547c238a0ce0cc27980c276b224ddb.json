{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, isUndefined, Browser, compile, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { rippleEffect, Animation, remove } from '@syncfusion/ej2-base';\nimport { Draggable, Droppable } from '@syncfusion/ej2-base';\nimport { getElement } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, closest, matches, detach, select, selectAll, isVisible, append } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined as isNOU, Touch, getValue, setValue, extend, merge, attributes } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nvar ROOT = 'e-treeview';\nvar CONTROL = 'e-control';\nvar COLLAPSIBLE = 'e-icon-collapsible';\nvar EXPANDABLE = 'e-icon-expandable';\nvar LISTITEM = 'e-list-item';\nvar LISTTEXT = 'e-list-text';\nvar PARENTITEM = 'e-list-parent';\nvar HOVER = 'e-hover';\nvar ACTIVE = 'e-active';\nvar LOAD = 'e-icons-spinner';\nvar PROCESS = 'e-process';\nvar ICON = 'e-icons';\nvar TEXTWRAP = 'e-text-content';\nvar INPUT = 'e-input';\nvar INPUTGROUP = 'e-input-group';\nvar TREEINPUT = 'e-tree-input';\nvar EDITING = 'e-editing';\nvar RTL = 'e-rtl';\nvar INTERACTION = 'e-interaction';\nvar DRAGITEM = 'e-drag-item';\nvar DROPPABLE = 'e-droppable';\nvar DRAGGING = 'e-dragging';\nvar SIBLING = 'e-sibling';\nvar DROPIN = 'e-drop-in';\nvar DROPNEXT = 'e-drop-next';\nvar DROPOUT = 'e-drop-out';\nvar NODROP = 'e-no-drop';\nvar FULLROWWRAP = 'e-fullrow-wrap';\nvar FULLROW = 'e-fullrow';\nvar SELECTED = 'e-selected';\nvar EXPANDED = 'e-expanded';\nvar NODECOLLAPSED = 'e-node-collapsed';\nvar DISABLE = 'e-disable';\nvar DROPCOUNT = 'e-drop-count';\nvar CHECK = 'e-check';\nvar INDETERMINATE = 'e-stop';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECKBOXRIPPLE = 'e-ripple-container';\nvar RIPPLE = 'e-ripple';\nvar RIPPLEELMENT = 'e-ripple-element';\nvar FOCUS = 'e-node-focus';\nvar IMAGE = 'e-list-img';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar CHILD = 'e-has-child';\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nvar DISABLED = 'e-disabled';\nvar treeAriaAttr = {\n  treeRole: 'tree',\n  itemRole: 'treeitem',\n  listRole: 'group',\n  itemText: '',\n  wrapperRole: ''\n};\n/**\n * Configures the fields to bind to the properties of node in the TreeView component.\n */\n\nvar FieldsSettings = function (_super) {\n  __extends(FieldsSettings, _super);\n\n  function FieldsSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('child')], FieldsSettings.prototype, \"child\", void 0);\n\n  __decorate([Property([])], FieldsSettings.prototype, \"dataSource\", void 0);\n\n  __decorate([Property('expanded')], FieldsSettings.prototype, \"expanded\", void 0);\n\n  __decorate([Property('hasChildren')], FieldsSettings.prototype, \"hasChildren\", void 0);\n\n  __decorate([Property('htmlAttributes')], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property('iconCss')], FieldsSettings.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('id')], FieldsSettings.prototype, \"id\", void 0);\n\n  __decorate([Property('imageUrl')], FieldsSettings.prototype, \"imageUrl\", void 0);\n\n  __decorate([Property('isChecked')], FieldsSettings.prototype, \"isChecked\", void 0);\n\n  __decorate([Property('parentID')], FieldsSettings.prototype, \"parentID\", void 0);\n\n  __decorate([Property(null)], FieldsSettings.prototype, \"query\", void 0);\n\n  __decorate([Property('selected')], FieldsSettings.prototype, \"selected\", void 0);\n\n  __decorate([Property(null)], FieldsSettings.prototype, \"tableName\", void 0);\n\n  __decorate([Property('text')], FieldsSettings.prototype, \"text\", void 0);\n\n  __decorate([Property('tooltip')], FieldsSettings.prototype, \"tooltip\", void 0);\n\n  __decorate([Property('navigateUrl')], FieldsSettings.prototype, \"navigateUrl\", void 0);\n\n  return FieldsSettings;\n}(ChildProperty);\n\nexport { FieldsSettings };\n/**\n * Configures animation settings for the TreeView component.\n */\n\nvar ActionSettings = function (_super) {\n  __extends(ActionSettings, _super);\n\n  function ActionSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('SlideDown')], ActionSettings.prototype, \"effect\", void 0);\n\n  __decorate([Property(400)], ActionSettings.prototype, \"duration\", void 0);\n\n  __decorate([Property('linear')], ActionSettings.prototype, \"easing\", void 0);\n\n  return ActionSettings;\n}(ChildProperty);\n\nexport { ActionSettings };\n/**\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\n */\n\nvar NodeAnimationSettings = function (_super) {\n  __extends(NodeAnimationSettings, _super);\n\n  function NodeAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Complex({\n    effect: 'SlideUp',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"collapse\", void 0);\n\n  __decorate([Complex({\n    effect: 'SlideDown',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"expand\", void 0);\n\n  return NodeAnimationSettings;\n}(ChildProperty);\n\nexport { NodeAnimationSettings };\n/**\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\n * functions to perform edit, drag and drop, selection with check-box, and more.\n * ```html\n *  <div id=\"tree\"></div>\n * ```\n * ```typescript\n *  let treeObj: TreeView = new TreeView();\n *  treeObj.appendTo('#tree');\n * ```\n */\n\nvar TreeView = function (_super) {\n  __extends(TreeView, _super);\n\n  function TreeView(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isRefreshed = false;\n    _this.preventExpand = false;\n    _this.checkedElement = [];\n    _this.disableNode = []; // eslint-disable-next-line\n\n    _this.validArr = [];\n    _this.validNodes = [];\n    _this.expandChildren = [];\n    _this.isFieldChange = false;\n    _this.changeDataSource = false;\n    _this.hasTemplate = false;\n    _this.mouseDownStatus = false;\n    return _this;\n  }\n\n  TreeView_1 = TreeView;\n  /**\n   * Get component name.\n   *\n   * @returns {string} - returns module name.\n   * @private\n   */\n\n  TreeView.prototype.getModuleName = function () {\n    return 'treeview';\n  };\n  /**\n   * Initialize the event handler\n   *\n   * @returns {void}\n   */\n\n\n  TreeView.prototype.preRender = function () {\n    var _this = this;\n\n    this.checkActionNodes = [];\n    this.parentNodeCheck = [];\n    this.dragStartAction = false;\n    this.isAnimate = false;\n    this.keyConfigs = {\n      escape: 'escape',\n      end: 'end',\n      enter: 'enter',\n      f2: 'f2',\n      home: 'home',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlUp: 'ctrl+uparrow',\n      ctrlEnter: 'ctrl+enter',\n      ctrlHome: 'ctrl+home',\n      ctrlEnd: 'ctrl+end',\n      ctrlA: 'ctrl+A',\n      shiftDown: 'shift+downarrow',\n      shiftUp: 'shift+uparrow',\n      shiftEnter: 'shift+enter',\n      shiftHome: 'shift+home',\n      shiftEnd: 'shift+end',\n      csDown: 'ctrl+shift+downarrow',\n      csUp: 'ctrl+shift+uparrow',\n      csEnter: 'ctrl+shift+enter',\n      csHome: 'ctrl+shift+home',\n      csEnd: 'ctrl+shift+end',\n      space: 'space'\n    };\n    this.listBaseOption = {\n      expandCollapse: true,\n      showIcon: true,\n      expandIconClass: EXPANDABLE,\n      ariaAttributes: treeAriaAttr,\n      expandIconPosition: 'Left',\n      itemCreated: function (e) {\n        _this.beforeNodeCreate(e);\n      },\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      itemNavigable: this.fullRowNavigable\n    };\n    this.updateListProp(this.fields);\n    this.aniObj = new Animation({});\n    this.treeList = [];\n    this.isLoaded = false;\n    this.isInitalExpand = false;\n    this.expandChildren = [];\n    this.index = 0;\n    this.setTouchClass();\n\n    if (isNOU(this.selectedNodes)) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n    }\n\n    if (isNOU(this.checkedNodes)) {\n      this.setProperties({\n        checkedNodes: []\n      }, true);\n    }\n\n    if (isNOU(this.expandedNodes)) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n    } else {\n      this.isInitalExpand = true;\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - returns the persisted data\n   * @hidden\n   */\n\n\n  TreeView.prototype.getPersistData = function () {\n    var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * To Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  TreeView.prototype.render = function () {\n    this.initialRender = true;\n    this.initialize();\n    this.setDataBinding(false);\n    this.setDisabledMode();\n    this.setExpandOnType();\n\n    if (!this.disabled) {\n      this.setRipple();\n    }\n\n    this.wireEditingEvents(this.allowEditing);\n    this.setDragAndDrop(this.allowDragAndDrop);\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.initialRender = false;\n    this.renderComplete();\n  };\n\n  TreeView.prototype.initialize = function () {\n    this.element.setAttribute('role', 'tree');\n    this.element.setAttribute('tabindex', '0');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    this.setCssClass(null, this.cssClass);\n    this.setEnableRtl();\n    this.setFullRow(this.fullRowSelect);\n    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n  };\n\n  TreeView.prototype.setDisabledMode = function () {\n    if (this.disabled) {\n      this.element.classList.add(DISABLED);\n    } else {\n      this.element.classList.remove(DISABLED);\n    }\n  };\n\n  TreeView.prototype.setEnableRtl = function () {\n    (this.enableRtl ? addClass : removeClass)([this.element], RTL);\n  };\n\n  TreeView.prototype.setRipple = function () {\n    var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n    var rippleModel = {\n      selector: tempStr,\n      ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n    };\n    this.rippleFn = rippleEffect(this.element, rippleModel);\n    var iconModel = {\n      selector: '.' + TEXTWRAP + ' > .' + ICON,\n      isCenterRipple: true\n    };\n    this.rippleIconFn = rippleEffect(this.element, iconModel);\n  };\n\n  TreeView.prototype.setFullRow = function (isEnabled) {\n    (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);\n  };\n\n  TreeView.prototype.setMultiSelect = function (isEnabled) {\n    var firstUl = select('.' + PARENTITEM, this.element);\n\n    if (isEnabled) {\n      firstUl.setAttribute('aria-multiselectable', 'true');\n    } else {\n      firstUl.removeAttribute('aria-multiselectable');\n    }\n  }; // eslint-disable-next-line\n\n\n  TreeView.prototype.templateComplier = function (template) {\n    if (template) {\n      this.hasTemplate = true; // eslint-disable-next-line\n\n      var e = void 0;\n      this.element.classList.add(INTERACTION);\n\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        }\n      } catch (e) {\n        return compile(template);\n      }\n    }\n\n    this.element.classList.remove(INTERACTION);\n    return undefined;\n  };\n\n  TreeView.prototype.setDataBinding = function (changeDataSource) {\n    var _this = this;\n\n    this.treeList.push('false');\n\n    if (this.fields.dataSource instanceof DataManager) {\n      /* eslint-disable */\n      this.isOffline = this.fields.dataSource.dataSource.offline;\n\n      if (this.fields.dataSource.ready) {\n        this.fields.dataSource.ready.then(function (e) {\n          /* eslint-disable */\n          _this.isOffline = _this.fields.dataSource.dataSource.offline;\n\n          if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {\n            _this.treeList.pop();\n\n            _this.treeData = e.result;\n            _this.isNumberTypeId = _this.getType();\n\n            _this.setRootData();\n\n            _this.renderItems(true);\n\n            if (_this.treeList.length === 0 && !_this.isLoaded) {\n              _this.finalize();\n            }\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      } else {\n        this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\n          _this.treeList.pop();\n\n          _this.treeData = e.result;\n          _this.isNumberTypeId = _this.getType();\n\n          _this.setRootData();\n\n          if (changeDataSource) {\n            _this.changeDataSource = true;\n          }\n\n          _this.renderItems(true);\n\n          _this.changeDataSource = false;\n\n          if (_this.treeList.length === 0 && !_this.isLoaded) {\n            _this.finalize();\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      this.treeList.pop();\n\n      if (isNOU(this.fields.dataSource)) {\n        this.rootData = this.treeData = [];\n      } else {\n        this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n        this.setRootData();\n      }\n\n      this.isNumberTypeId = this.getType();\n      this.renderItems(false);\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.getQuery = function (mapper, value) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    var columns = [];\n    var query;\n\n    if (!mapper.query) {\n      query = new Query();\n      var prop = this.getActualProperties(mapper);\n\n      for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\n        var col = _a[_i];\n\n        if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col] && col !== 'url' && columns.indexOf(mapper[col]) === -1) {\n          columns.push(mapper[col]);\n        }\n      }\n\n      query.select(columns);\n\n      if (prop.hasOwnProperty('tableName')) {\n        query.from(mapper.tableName);\n      }\n    } else {\n      query = mapper.query.clone();\n    }\n\n    ListBase.addSorting(this.sortOrder, mapper.text, query);\n\n    if (!isNOU(value) && !isNOU(mapper.parentID)) {\n      query.where(mapper.parentID, 'equal', this.isNumberTypeId ? parseFloat(value) : value);\n    }\n\n    return query;\n  };\n\n  TreeView.prototype.getType = function () {\n    return this.treeData[0] ? typeof getValue(this.fields.id, this.treeData[0]) === 'number' ? true : false : false;\n  };\n\n  TreeView.prototype.setRootData = function () {\n    this.dataType = this.getDataType(this.treeData, this.fields);\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n      var rootItems = this.getChildNodes(this.treeData, undefined, true);\n\n      if (isNOU(rootItems)) {\n        this.rootData = [];\n      } else {\n        this.rootData = rootItems;\n      }\n    } else {\n      this.rootData = this.treeData;\n    }\n  };\n\n  TreeView.prototype.renderItems = function (isSorted) {\n    /* eslint-disable */\n    this.listBaseOption.ariaAttributes.level = 1;\n    var sortedData = this.getSortedData(this.rootData);\n    this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\n    this.element.appendChild(this.ulElement);\n    var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n\n    if (this.loadOnDemand === false) {\n      var i = 0;\n\n      while (i < rootNodes.length) {\n        this.renderChildNodes(rootNodes[i], true, null, true);\n        i++;\n      }\n    }\n\n    var parentEle = selectAll('.' + PARENTITEM, this.element);\n\n    if (parentEle.length === 1 && rootNodes && rootNodes.length !== 0 || this.loadOnDemand) {\n      this.finalizeNode(this.element);\n    }\n\n    this.parentNodeCheck = [];\n    this.parentCheckData = [];\n    this.updateCheckedStateFromDS();\n\n    if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n      this.updateParentCheckState();\n    }\n  };\n  /**\n   * Update the checkedNodes from datasource at initial rendering\n   */\n\n\n  TreeView.prototype.updateCheckedStateFromDS = function (id) {\n    this.validNodes = [];\n\n    if (this.treeData && this.showCheckBox) {\n      if (this.dataType === 1) {\n        var mapper = this.fields;\n        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < resultData.length; i++) {\n          var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n          var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n\n          if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {\n            this.checkedNodes.push(resultId);\n          }\n\n          if (resultData[i][this.fields.hasChildren]) {\n            var id_1 = resultData[i][this.fields.id];\n            var childData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', id_1, false));\n\n            for (var child = 0; child < childData.length; child++) {\n              var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n\n              if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                this.checkedNodes.push(childId);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < this.checkedNodes.length; i++) {\n          var mapper_1 = this.fields;\n          var checkState = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));\n\n          if (checkState[0] && this.autoCheck) {\n            this.getCheckedNodeDetails(mapper_1, checkState);\n            this.checkIndeterminateState(checkState[0]);\n          }\n\n          if (checkState.length > 0) {\n            var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n              this.validNodes.push(checkedId);\n            }\n          }\n\n          var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));\n\n          for (var index = 0; index < checkedData.length; index++) {\n            var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n              this.checkedNodes.push(checkedId);\n            }\n\n            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n              this.validNodes.push(checkedId);\n            }\n          }\n        }\n      } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n        for (var index = 0; index < this.treeData.length; index++) {\n          var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n\n          if (this.treeData[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {\n            this.checkedNodes.push(fieldId);\n          }\n\n          if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {\n            this.validNodes.push(fieldId);\n          }\n\n          var childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n\n          if (childItems) {\n            this.updateChildCheckState(childItems, this.treeData[index]);\n          }\n        }\n      }\n\n      this.setProperties({\n        checkedNodes: this.validNodes\n      }, true);\n    }\n  };\n  /**\n   * To check whether the list data has sub child and to change the parent check state accordingly\n   */\n\n\n  TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\n    var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n    var count = 0;\n    var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n    var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n\n    if (!element && !parentEle) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(id) === -1) {\n        this.parentNodeCheck.push(id);\n      }\n\n      var childNodes = this.getChildNodes(this.treeData, id);\n\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n\n        if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n          this.checkedNodes.push(id);\n        }\n      }\n\n      var preElement = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', id, true));\n      this.getCheckedNodeDetails(mapper, preElement);\n    } else if (parentEle) {\n      var check = select('.' + CHECK, parentEle);\n\n      if (!check) {\n        this.changeState(parentEle, 'indeterminate', null, true, true);\n      }\n    }\n  };\n  /**\n   * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\n   */\n\n\n  TreeView.prototype.updateParentCheckState = function () {\n    var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n    var childCheckedElement;\n\n    for (var i = 0; i < indeterminate.length; i++) {\n      var node = closest(indeterminate[i], '.' + LISTITEM);\n      var nodeId = node.getAttribute('data-uid').toString();\n\n      if (this.dataType === 1) {\n        childCheckedElement = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n      } else {\n        childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n      }\n\n      var count = 0;\n\n      if (childCheckedElement) {\n        for (var j = 0; j < childCheckedElement.length; j++) {\n          var childId = childCheckedElement[j][this.fields.id].toString();\n\n          if (this.checkedNodes.indexOf(childId) !== -1) {\n            count++;\n          }\n        }\n\n        if (count === childCheckedElement.length) {\n          var nodeCheck = node.getAttribute('data-uid');\n\n          if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n            this.checkedNodes.push(nodeCheck);\n          }\n\n          this.changeState(node, 'check', null, true, true);\n        } else if (count === 0 && this.checkedNodes.length === 0) {\n          this.changeState(node, 'uncheck', null, true, true);\n        }\n      }\n    }\n  };\n  /**\n   * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\n   */\n\n\n  TreeView.prototype.checkIndeterminateState = function (data) {\n    var element;\n\n    if (this.dataType === 1) {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n    } else {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n    }\n\n    if (element) {\n      var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n\n      if (ariaChecked !== 'true') {\n        this.changeState(element, 'indeterminate', null, true, true);\n      }\n    } else if (this.dataType === 2) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n        this.parentNodeCheck.push(data[this.fields.id].toString());\n      }\n    }\n  };\n  /**\n   * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\n   */\n\n\n  TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\n    var count = 0;\n    var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n\n    for (var index = 0; index < childItems.length; index++) {\n      var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n      if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n        count++;\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {\n        this.validNodes.push(checkedChild);\n      }\n\n      var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n      if (subChildItems) {\n        this.parentCheckData.push(treeData);\n        this.updateChildCheckState(subChildItems, childItems[index]);\n      }\n\n      if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n        this.checkedNodes.push(checkedParent);\n      }\n    }\n\n    if (count !== 0 && this.autoCheck) {\n      this.checkIndeterminateState(treeData);\n\n      for (var len = 0; len < this.parentCheckData.length; len++) {\n        if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {\n          this.checkIndeterminateState(this.parentCheckData[len]);\n        }\n      }\n    }\n\n    this.parentCheckData = [];\n  };\n\n  TreeView.prototype.beforeNodeCreate = function (e) {\n    if (this.showCheckBox) {\n      var checkboxEle = createCheckBox(this.createElement, true, {\n        cssClass: this.touchClass\n      });\n      checkboxEle.setAttribute('role', 'checkbox');\n      var icon = select('div.' + ICON, e.item);\n      var id = e.item.getAttribute('data-uid');\n      e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNOU(icon) ? 0 : 1]);\n      var checkValue = getValue(e.fields.isChecked, e.curData);\n\n      if (this.checkedNodes.indexOf(id) > -1) {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else if (!isNOU(checkValue) && checkValue.toString() === 'true') {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else {\n        checkboxEle.setAttribute('aria-checked', 'false');\n      }\n\n      var frame = select('.' + CHECKBOXFRAME, checkboxEle);\n      EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n      EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n    }\n\n    if (this.fullRowSelect) {\n      this.createFullRow(e.item);\n    }\n\n    if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {\n      e.item.setAttribute('aria-selected', 'false');\n    }\n\n    var fields = e.fields;\n    this.addActionClass(e, fields.selected, SELECTED);\n    this.addActionClass(e, fields.expanded, EXPANDED);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      var textEle = e.item.querySelector('.' + LISTTEXT);\n      var dataId = e.item.getAttribute('data-uid');\n      textEle.innerHTML = '';\n      this.renderNodeTemplate(e.curData, textEle, dataId);\n    }\n\n    var eventArgs = {\n      node: e.item,\n      nodeData: e.curData,\n      text: e.text\n    };\n\n    if (!this.isRefreshed) {\n      this.trigger('drawNode', eventArgs);\n    }\n  };\n\n  TreeView.prototype.frameMouseHandler = function (e) {\n    var rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n    rippleMouseHandler(e, rippleSpan);\n  };\n\n  TreeView.prototype.addActionClass = function (e, action, cssClass) {\n    var data = e.curData;\n    var actionValue = getValue(action, data);\n\n    if (!isNOU(actionValue) && actionValue.toString() !== 'false') {\n      e.item.classList.add(cssClass);\n    }\n  };\n\n  TreeView.prototype.getDataType = function (ds, mapper) {\n    if (this.fields.dataSource instanceof DataManager) {\n      for (var i = 0; i < ds.length; i++) {\n        if (this.isOffline) {\n          if (typeof mapper.child === 'string' && isNOU(getValue(mapper.child, ds[i])) && !isNOU(getValue(mapper.parentID, ds[i]))) {\n            return 1;\n          }\n        } else if (typeof mapper.child === 'string' && isNOU(getValue(mapper.child, ds[i]))) {\n          return 1;\n        }\n      }\n\n      return 2;\n    }\n\n    for (var i = 0, len = ds.length; i < len; i++) {\n      if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, ds[i]))) {\n        return 2;\n      }\n\n      if (!isNOU(getValue(mapper.parentID, ds[i])) || !isNOU(getValue(mapper.hasChildren, ds[i]))) {\n        return 1;\n      }\n    }\n\n    return 1;\n  };\n\n  TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\n    var cusQuery = new Query().group(groupBy);\n    var ds = ListBase.getDataSource(dataSource, cusQuery);\n    var grpItem = [];\n\n    for (var j = 0; j < ds.length; j++) {\n      var itemObj = ds[j].items;\n      grpItem.push(itemObj);\n    }\n\n    return grpItem;\n  };\n\n  TreeView.prototype.getSortedData = function (list) {\n    if (list && this.sortOrder !== 'None') {\n      list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n    }\n\n    return list;\n  };\n\n  TreeView.prototype.finalizeNode = function (element) {\n    var iNodes = selectAll('.' + IMAGE, element);\n\n    for (var k = 0; k < iNodes.length; k++) {\n      iNodes[k].setAttribute('alt', IMAGE);\n    }\n\n    if (this.isLoaded) {\n      var sNodes = selectAll('.' + SELECTED, element);\n\n      for (var i = 0; i < sNodes.length; i++) {\n        this.selectNode(sNodes[i], null);\n        break;\n      }\n\n      removeClass(sNodes, SELECTED);\n    }\n\n    var cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n\n    for (var j = 0; j < cNodes.length; j++) {\n      var icon = select('div.' + ICON, cNodes[j]);\n\n      if (icon && icon.classList.contains(EXPANDABLE)) {\n        this.disableExpandAttr(cNodes[j]);\n      }\n    }\n\n    var eNodes = selectAll('.' + EXPANDED, element);\n\n    if (!this.isInitalExpand) {\n      for (var i = 0; i < eNodes.length; i++) {\n        this.renderChildNodes(eNodes[i]);\n      }\n    }\n\n    removeClass(eNodes, EXPANDED);\n    this.updateList();\n\n    if (this.isLoaded) {\n      this.updateCheckedProp();\n    }\n  };\n\n  TreeView.prototype.updateCheckedProp = function () {\n    if (this.showCheckBox) {\n      var nodes = [].concat([], this.checkedNodes);\n      this.setProperties({\n        checkedNodes: nodes\n      }, true);\n    }\n  };\n\n  TreeView.prototype.ensureIndeterminate = function () {\n    if (this.autoCheck) {\n      var liElement = selectAll('li', this.element);\n      var ulElement = void 0;\n\n      for (var i = 0; i < liElement.length; i++) {\n        if (liElement[i].classList.contains(LISTITEM)) {\n          ulElement = select('.' + PARENTITEM, liElement[i]);\n\n          if (ulElement) {\n            this.ensureParentCheckState(liElement[i]);\n          } else {\n            this.ensureChildCheckState(liElement[i]);\n          }\n        }\n      }\n    } else {\n      var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n\n      for (var i = 0; i < indeterminate.length; i++) {\n        indeterminate[i].classList.remove(INDETERMINATE);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureParentCheckState = function (element) {\n    if (!isNOU(element)) {\n      if (element.classList.contains(ROOT)) {\n        return;\n      }\n\n      var ulElement = element;\n\n      if (element.classList.contains(LISTITEM)) {\n        ulElement = select('.' + PARENTITEM, element);\n      }\n\n      var checkedNodes = selectAll('.' + CHECK, ulElement);\n      var indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n      var nodes = selectAll('.' + LISTITEM, ulElement);\n      var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n\n      if (nodes.length === checkedNodes.length) {\n        this.changeState(checkBoxEle, 'check', null, true, true);\n      } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n        this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n      } else if (checkedNodes.length === 0) {\n        this.changeState(checkBoxEle, 'uncheck', null, true, true);\n      }\n\n      var parentUL = closest(element, '.' + PARENTITEM);\n\n      if (!isNOU(parentUL)) {\n        var currentParent = closest(parentUL, '.' + LISTITEM);\n        this.ensureParentCheckState(currentParent);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureChildCheckState = function (element, e) {\n    if (!isNOU(element)) {\n      var childElement = select('.' + PARENTITEM, element);\n      var checkBoxes = void 0;\n\n      if (!isNOU(childElement)) {\n        checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n        var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n        var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n        var childCheck = childElement.querySelectorAll('li');\n        var expandState = childElement.parentElement.getAttribute('aria-expanded');\n        var checkedState = void 0;\n\n        for (var index = 0; index < checkBoxes.length; index++) {\n          var childId = childCheck[index].getAttribute('data-uid');\n\n          if (!isNOU(this.currentLoadData) && !isNOU(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n            checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n\n            if (this.ele !== -1) {\n              checkedState = isChecked ? 'check' : 'uncheck';\n            }\n\n            if (checkedState === 'uncheck' && !isUndefined(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n              checkedState = 'indeterminate';\n            }\n          } else {\n            var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n\n            if (isChecked) {\n              checkedState = 'check';\n            } else if (isNodeChecked && !this.isLoaded) {\n              checkedState = 'check';\n            } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n              checkedState = 'check';\n            } else if (childCheck[index].classList.contains(CHILD) && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else if (this.dataType === 1 && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else {\n              checkedState = 'uncheck';\n            }\n          }\n\n          this.changeState(checkBoxes[index], checkedState, e, true, true);\n        }\n      }\n\n      if (this.autoCheck && this.isLoaded) {\n        this.updateParentCheckState();\n      }\n    }\n  };\n\n  TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\n    var li = selectAll('.' + LISTITEM, this.element);\n\n    if (!isNOU(nodes)) {\n      for (var len = nodes.length; len >= 0; len--) {\n        var liEle = void 0;\n\n        if (nodes.length === 1) {\n          liEle = this.getElement(nodes[len - 1]);\n        } else {\n          liEle = this.getElement(nodes[len]);\n        }\n\n        if (isNOU(liEle)) {\n          var node = void 0;\n          node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n\n          if (node !== '' && doCheck && node) {\n            this.setValidCheckedNode(node);\n            this.dynamicCheckState(node, doCheck);\n          } else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n            var childItems = this.getChildNodes(this.treeData, node);\n\n            if (childItems) {\n              for (var i = 0; i < childItems.length; i++) {\n                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n                if (this.checkedNodes.indexOf(id) !== -1) {\n                  this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                }\n              }\n\n              if (this.parentNodeCheck.indexOf(node) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n              }\n            }\n\n            if (node) {\n              this.dynamicCheckState(node, doCheck);\n            }\n\n            this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n          }\n\n          continue;\n        }\n\n        var checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n        this.validateCheckNode(checkBox, !doCheck, liEle, null);\n      }\n    } else {\n      var checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n\n      if (this.loadOnDemand) {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n        }\n      } else {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n        }\n      }\n    }\n\n    if (nodes) {\n      for (var j = 0; j < nodes.length; j++) {\n        var node = nodes[j] ? nodes[j].toString() : '';\n\n        if (!doCheck) {\n          this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n        }\n      }\n    }\n\n    if (this.autoCheck) {\n      this.updateParentCheckState();\n    }\n  };\n\n  TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\n    var currLi = closest(checkbox, '.' + LISTITEM);\n    var id = currLi.getAttribute('data-uid');\n    var nodeDetails = this.getNodeData(currLi);\n\n    if (nodeDetails.isChecked === 'true' && !doCheck) {\n      this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n    }\n  };\n  /**\n   * Changes the parent and child  check state while changing the checkedNodes via setmodel\n   */\n\n\n  TreeView.prototype.dynamicCheckState = function (node, doCheck) {\n    if (this.dataType === 1) {\n      var count = 0;\n      var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n\n      if (resultId[0]) {\n        var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n        var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\n        var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n        var check = parentElement ? select('.' + CHECK, parentElement) : null;\n        var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        var childNodes = this.getChildNodes(this.treeData, parent_1);\n\n        if (childNodes) {\n          for (var i = 0; i < childNodes.length; i++) {\n            var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n        }\n\n        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {\n          this.changeState(element, 'uncheck', null);\n        } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {\n          this.changeState(element, 'check', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else if (!element && !parentElement && id === node && this.autoCheck) {\n          this.updateIndeterminate(node, doCheck);\n        }\n      }\n    } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n      var id = void 0;\n      var parentElement = void 0;\n      var check = void 0;\n\n      for (var i = 0; i < this.treeData.length; i++) {\n        id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n        parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        check = parentElement ? select('.' + CHECK, parentElement) : null;\n\n        if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        }\n\n        var subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n\n        if (subChild) {\n          this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n        }\n      }\n    }\n  };\n  /**\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\n   */\n\n\n  TreeView.prototype.updateIndeterminate = function (node, doCheck) {\n    var indeterminateData = this.getTreeData(node);\n    var count = 0;\n    var parent;\n\n    if (this.dataType === 1) {\n      parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n    }\n\n    var childNodes = this.getChildNodes(this.treeData, parent);\n\n    if (childNodes) {\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n      }\n    }\n\n    var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n\n    if (parentElement && doCheck) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n      this.changeState(parentElement, 'uncheck', null);\n    } else if (!parentElement) {\n      if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n      } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n        this.parentNodeCheck.push(parent);\n      } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n        this.parentNodeCheck.push(parent);\n      }\n\n      this.updateIndeterminate(parent, doCheck);\n\n      if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n      }\n    }\n  };\n  /**\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\n   */\n\n\n  TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\n    var count = 0;\n\n    for (var j = 0; j < subChild.length; j++) {\n      var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n\n      if (this.checkedNodes.indexOf(subId) !== -1) {\n        count++;\n      }\n\n      var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n      var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n      var check = parentElement ? select('.' + CHECK, parentElement) : null;\n      var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n      var childElementCheck = element ? select('.' + CHECK, element) : null;\n\n      if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {\n        this.changeState(parentElement, 'indeterminate', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {\n        if (this.autoCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else {\n          if (count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n          } else {\n            this.changeState(parentElement, 'uncheck', null);\n          }\n        }\n      } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {\n        this.changeState(element, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {\n        indeterminate.classList.remove(INDETERMINATE);\n      } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {\n        this.changeState(parentElement, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n        this.changeState(element, 'uncheck', null);\n      } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {\n        var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n\n        if (doCheck && count !== 0) {\n          this.changeState(childElement, 'indeterminate', null);\n        } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n          this.checkedNodes.push(parent);\n        } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n        }\n\n        if (this.parentNodeCheck.indexOf(parent) === -1) {\n          this.parentNodeCheck.push(parent);\n        }\n      }\n\n      var innerChild = getValue(this.fields.child.toString(), subChild[j]);\n\n      if (innerChild) {\n        this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n      }\n    }\n  };\n\n  TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\n    var _this = this;\n\n    var eventArgs;\n    var currLi = closest(wrapper, '.' + LISTITEM);\n\n    if (!isPrevent) {\n      this.checkActionNodes = [];\n      eventArgs = this.getCheckEvent(currLi, state, e);\n      this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n        }\n      });\n    } else {\n      this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n    }\n  };\n\n  TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n    var ariaState;\n    var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n\n    if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.remove(INDETERMINATE);\n      frameSpan.classList.add(CHECK);\n      this.addCheck(currLi);\n      ariaState = 'true';\n    } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n      removeClass([frameSpan], [CHECK, INDETERMINATE]);\n      this.removeCheck(currLi);\n      ariaState = 'false';\n    } else if (state === 'indeterminate' && this.autoCheck) {\n      frameSpan.classList.remove(CHECK);\n      frameSpan.classList.add(INDETERMINATE);\n      this.removeCheck(currLi);\n      ariaState = 'mixed';\n    }\n\n    ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n\n    if (!isNOU(ariaState)) {\n      wrapper.setAttribute('aria-checked', ariaState);\n    }\n\n    if (isAdd) {\n      var data = [].concat([], this.checkActionNodes);\n      eventArgs = this.getCheckEvent(currLi, state, e);\n\n      if (isUndefined(isPrevent)) {\n        eventArgs.data = data;\n      }\n    }\n\n    if (doCheck !== undefined) {\n      this.ensureStateChange(currLi, doCheck);\n    }\n\n    if (!isPrevent) {\n      if (!isNOU(ariaState)) {\n        wrapper.setAttribute('aria-checked', ariaState);\n        eventArgs.data[0].checked = ariaState;\n        this.trigger('nodeChecked', eventArgs);\n        this.checkActionNodes = [];\n      }\n    }\n  };\n\n  TreeView.prototype.addCheck = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.checkedNodes.indexOf(id) === -1) {\n      this.checkedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeCheck = function (liEle) {\n    var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.checkedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.getCheckEvent = function (currLi, action, e) {\n    this.checkActionNodes.push(this.getNodeData(currLi));\n    var nodeData = this.checkActionNodes;\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      data: nodeData\n    };\n  };\n\n  TreeView.prototype.finalize = function () {\n    var firstUl = select('.' + PARENTITEM, this.element);\n\n    if (!isNullOrUndefined(firstUl)) {\n      firstUl.setAttribute('role', treeAriaAttr.treeRole);\n      this.setMultiSelect(this.allowMultiSelection);\n      var firstNode = select('.' + LISTITEM, this.element);\n\n      if (firstNode) {\n        addClass([firstNode], FOCUS);\n        this.updateIdAttr(null, firstNode);\n      }\n\n      this.renderReactTemplates();\n      this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n      this.doExpandAction();\n    }\n  };\n\n  TreeView.prototype.doExpandAction = function () {\n    var eUids = this.expandedNodes;\n\n    if (this.isInitalExpand && eUids.length > 0) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n      /* eslint-disable */\n\n      if (this.fields.dataSource instanceof DataManager) {\n        this.expandGivenNodes(eUids);\n      } else {\n        for (var i = 0; i < eUids.length; i++) {\n          var eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n\n          if (!isNOU(eNode)) {\n            var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n            if (!isNOU(icon)) {\n              this.expandAction(eNode, icon, null);\n            }\n          } else {\n            if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n              this.expandChildren.push(eUids[i].toString());\n            }\n\n            continue;\n          }\n        }\n\n        this.afterFinalized();\n      }\n    } else {\n      this.afterFinalized();\n    }\n  };\n\n  TreeView.prototype.expandGivenNodes = function (arr) {\n    var proxy = this;\n    this.expandCallback(arr[this.index], function () {\n      proxy.index++;\n\n      if (proxy.index < arr.length) {\n        proxy.expandGivenNodes(arr);\n      } else {\n        proxy.afterFinalized();\n      }\n    });\n  };\n\n  TreeView.prototype.expandCallback = function (eUid, callback) {\n    var eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n\n    if (!isNOU(eNode)) {\n      var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n      if (!isNOU(icon)) {\n        this.expandAction(eNode, icon, null, false, callback);\n      } else {\n        callback();\n      }\n    } else {\n      callback();\n    }\n  };\n\n  TreeView.prototype.afterFinalized = function () {\n    this.doSelectionAction();\n    this.updateCheckedProp();\n    this.isAnimate = true;\n    this.isInitalExpand = false;\n\n    if (!this.isLoaded || this.isFieldChange) {\n      var eventArgs = {\n        data: this.treeData\n      };\n      this.trigger('dataBound', eventArgs);\n    }\n\n    this.isLoaded = true;\n  };\n\n  TreeView.prototype.doSelectionAction = function () {\n    var sNodes = selectAll('.' + SELECTED, this.element);\n    var sUids = this.selectedNodes;\n\n    if (sUids.length > 0) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n\n      for (var i = 0; i < sUids.length; i++) {\n        var sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n\n        if (sNode && !sNode.classList.contains('e-active')) {\n          this.selectNode(sNode, null, true);\n        } else {\n          this.selectedNodes.push(sUids[i]);\n        }\n\n        if (!this.allowMultiSelection) {\n          break;\n        }\n      }\n    } else {\n      this.selectGivenNodes(sNodes);\n    }\n\n    removeClass(sNodes, SELECTED);\n  };\n\n  TreeView.prototype.selectGivenNodes = function (sNodes) {\n    for (var i = 0; i < sNodes.length; i++) {\n      if (!sNodes[i].classList.contains('e-disable')) {\n        this.selectNode(sNodes[i], null, true);\n      }\n\n      if (!this.allowMultiSelection) {\n        break;\n      }\n    }\n  };\n\n  TreeView.prototype.clickHandler = function (event) {\n    var target = event.originalEvent.target;\n    EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n\n    if (!target || this.dragStartAction) {\n      return;\n    } else {\n      var classList = target.classList;\n      var li = closest(target, '.' + LISTITEM);\n\n      if (!li) {\n        return;\n      } else if (event.originalEvent.which !== 3) {\n        var rippleElement = select('.' + RIPPLEELMENT, li);\n        var rippleIcons = select('.' + ICON, li);\n        this.removeHover();\n        this.setFocusElement(li);\n\n        if (this.showCheckBox && !li.classList.contains('e-disable')) {\n          var checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n\n          if (!isNOU(checkWrapper)) {\n            var checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n            this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n            this.triggerClickEvent(event.originalEvent, li);\n            return;\n          }\n        }\n\n        if (classList.contains(EXPANDABLE)) {\n          this.expandAction(li, target, event);\n        } else if (classList.contains(COLLAPSIBLE)) {\n          this.collapseNode(li, target, event);\n        } else if (rippleElement && rippleIcons) {\n          if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n            this.expandAction(li, rippleIcons, event);\n          } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n            this.collapseNode(li, rippleIcons, event);\n          } else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        } else {\n          if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        }\n      }\n\n      this.triggerClickEvent(event.originalEvent, li);\n    }\n  };\n\n  TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\n    var currLi = closest(wrapper, '.' + LISTITEM);\n    var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n    eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n    this.trigger('nodeChecked', eventArgs);\n  };\n\n  TreeView.prototype.triggerClickEvent = function (e, li) {\n    var eventArgs = {\n      event: e,\n      node: li\n    };\n    this.trigger('nodeClicked', eventArgs);\n  };\n\n  TreeView.prototype.expandNode = function (currLi, icon, loaded) {\n    var _this = this;\n\n    this.renderReactTemplates();\n\n    if (icon.classList.contains(LOAD)) {\n      this.hideSpinner(icon);\n    }\n\n    if (!this.initialRender) {\n      icon.classList.add('interaction');\n    }\n\n    if (loaded !== true || loaded === true && currLi.classList.contains('e-expanded')) {\n      if (this.preventExpand !== true) {\n        removeClass([icon], EXPANDABLE);\n        addClass([icon], COLLAPSIBLE);\n        var start_1 = 0;\n        var end_1 = 0;\n        var proxy_1 = this;\n        var ul_1 = select('.' + PARENTITEM, currLi);\n        var liEle_1 = currLi;\n        this.setHeight(liEle_1, ul_1);\n        var activeElement_1 = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n        if (this.isAnimate && !this.isRefreshed) {\n          this.aniObj.animate(ul_1, {\n            name: this.animation.expand.effect,\n            duration: this.animation.expand.duration,\n            timingFunction: this.animation.expand.easing,\n            begin: function (args) {\n              liEle_1.style.overflow = 'hidden';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\n              }\n\n              start_1 = liEle_1.offsetHeight;\n              end_1 = select('.' + TEXTWRAP, currLi).offsetHeight;\n            },\n            progress: function (args) {\n              args.element.style.display = 'block';\n              proxy_1.animateHeight(args, start_1, end_1);\n            },\n            end: function (args) {\n              args.element.style.display = 'block';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\n              }\n\n              _this.expandedNode(liEle_1, ul_1, icon);\n            }\n          });\n        } else {\n          this.expandedNode(liEle_1, ul_1, icon);\n        }\n      }\n    } else {\n      var ul = select('.' + PARENTITEM, currLi);\n      ul.style.display = 'none';\n\n      if (this.fields.dataSource instanceof DataManager === true) {\n        this.preventExpand = false;\n      }\n    }\n\n    if (this.initialRender) {\n      icon.classList.add('interaction');\n    }\n  };\n\n  TreeView.prototype.expandedNode = function (currLi, ul, icon) {\n    ul.style.display = 'block';\n    currLi.style.display = 'block';\n    currLi.style.overflow = '';\n    currLi.style.height = '';\n    removeClass([icon], PROCESS);\n    this.addExpand(currLi);\n\n    if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, null);\n      this.trigger('nodeExpanded', this.expandArgs);\n    }\n  };\n\n  TreeView.prototype.addExpand = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'true');\n    removeClass([liEle], NODECOLLAPSED);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\n      this.expandedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.collapseNode = function (currLi, icon, e) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    var colArgs;\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeCollapseAction(currLi, icon, observedArgs);\n        }\n      });\n    } else {\n      this.nodeCollapseAction(currLi, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\n    var _this = this;\n\n    removeClass([icon], COLLAPSIBLE);\n    addClass([icon], EXPANDABLE);\n    var start = 0;\n    var end = 0;\n    var proxy = this;\n    var ul = select('.' + PARENTITEM, currLi);\n    var liEle = currLi;\n    var activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n    if (this.isAnimate) {\n      this.aniObj.animate(ul, {\n        name: this.animation.collapse.effect,\n        duration: this.animation.collapse.duration,\n        timingFunction: this.animation.collapse.easing,\n        begin: function (args) {\n          liEle.style.overflow = 'hidden';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n          }\n\n          start = select('.' + TEXTWRAP, currLi).offsetHeight;\n          end = liEle.offsetHeight;\n        },\n        progress: function (args) {\n          proxy.animateHeight(args, start, end);\n        },\n        end: function (args) {\n          args.element.style.display = 'none';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n          }\n\n          _this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n      });\n    } else {\n      this.collapsedNode(liEle, ul, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\n    ul.style.display = 'none';\n    liEle.style.overflow = '';\n    liEle.style.height = '';\n    removeClass([icon], PROCESS);\n    this.removeExpand(liEle);\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(liEle, null);\n      this.trigger('nodeCollapsed', colArgs);\n    }\n  };\n\n  TreeView.prototype.removeExpand = function (liEle, toRemove) {\n    if (toRemove) {\n      liEle.removeAttribute('aria-expanded');\n    } else {\n      this.disableExpandAttr(liEle);\n    }\n\n    var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.expandedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.disableExpandAttr = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'false');\n    addClass([liEle], NODECOLLAPSED);\n  };\n\n  TreeView.prototype.setHeight = function (currLi, ul) {\n    ul.style.display = 'block';\n    ul.style.visibility = 'hidden';\n    currLi.style.height = currLi.offsetHeight + 'px';\n    ul.style.display = 'none';\n    ul.style.visibility = '';\n  };\n\n  TreeView.prototype.animateHeight = function (args, start, end) {\n    var remaining = (args.duration - args.timeStamp) / args.duration;\n    var currentHeight = (end - start) * remaining + start;\n    args.element.parentElement.style.height = currentHeight + 'px';\n  };\n\n  TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {\n    var _this = this;\n\n    var eicon = select('div.' + ICON, parentLi);\n\n    if (isNOU(eicon)) {\n      return;\n    }\n\n    this.showSpinner(eicon);\n    var childItems;\n    /* eslint-disable */\n\n    if (this.fields.dataSource instanceof DataManager) {\n      var level = this.parents(parentLi, '.' + PARENTITEM).length;\n      var mapper_2 = this.getChildFields(this.fields, level, 1);\n\n      if (isNOU(mapper_2) || isNOU(mapper_2.dataSource)) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      }\n\n      this.treeList.push('false');\n\n      if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n        this.treeList.pop();\n        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n        this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n      } else {\n        mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\n          _this.treeList.pop();\n\n          childItems = e.result;\n\n          if (_this.dataType === 1) {\n            _this.dataType = 2;\n          }\n\n          _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n      this.currentLoadData = this.getSortedData(childItems);\n\n      if (isNOU(childItems) || childItems.length === 0) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      } else {\n        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n        parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));\n        this.expandNode(parentLi, eicon, loaded);\n        this.setSelectionForChildNodes(childItems);\n        this.ensureCheckNode(parentLi);\n        this.finalizeNode(parentLi);\n        this.disableTreeNodes(childItems);\n        this.renderSubChild(parentLi, expandChild, loaded);\n      }\n    }\n  };\n\n  TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n    this.currentLoadData = childItems;\n\n    if (isNOU(childItems) || childItems.length === 0) {\n      detach(eicon);\n      this.removeExpand(parentLi, true);\n    } else {\n      this.updateListProp(mapper);\n\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n        var id = parentLi.getAttribute('data-uid');\n        var nodeData = this.getNodeObject(id);\n        setValue('child', childItems, nodeData);\n      }\n\n      this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n      parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n      this.expandNode(parentLi, eicon, loaded);\n      this.setSelectionForChildNodes(childItems);\n      this.ensureCheckNode(parentLi);\n      this.finalizeNode(parentLi);\n      this.disableTreeNodes(childItems);\n      this.renderSubChild(parentLi, expandChild, loaded);\n    }\n\n    if (callback) {\n      callback();\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.disableTreeNodes = function (childItems) {\n    var i = 0;\n\n    while (i < childItems.length) {\n      var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n      if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n        this.doDisableAction([id]);\n      }\n\n      i++;\n    }\n  };\n  /**\n   * Sets the child Item in selectedState while rendering the child node\n   */\n\n\n  TreeView.prototype.setSelectionForChildNodes = function (nodes) {\n    var i;\n\n    for (i = 0; i < nodes.length; i++) {\n      var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n\n      if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n        this.doSelectionAction();\n      }\n    }\n  };\n\n  TreeView.prototype.ensureCheckNode = function (element) {\n    if (this.showCheckBox) {\n      this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n\n      if (this.autoCheck) {\n        this.ensureChildCheckState(element);\n        this.ensureParentCheckState(element);\n      }\n    }\n\n    this.currentLoadData = null;\n  };\n\n  TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\n    if (nodeLevel === dataLevel) {\n      return mapper;\n    } else {\n      return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\n    var childData;\n\n    if (nodeLevel === dataLevel) {\n      return this.getChildMapper(mapper);\n    } else {\n      return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildMapper = function (mapper) {\n    return typeof mapper.child === 'string' || isNOU(mapper.child) ? mapper : mapper.child;\n  };\n\n  TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {\n    if (isRoot === void 0) {\n      isRoot = false;\n    }\n\n    var childNodes;\n\n    if (isNOU(obj)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      return this.getChildGroup(this.groupedData, parentId, isRoot);\n    } else {\n      if (typeof this.fields.child === 'string') {\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n          var dataId = getValue(this.fields.id, obj[i]);\n\n          if (dataId && dataId.toString() === parentId) {\n            return getValue(this.fields.child, obj[i]);\n          } else if (!isNOU(getValue(this.fields.child, obj[i]))) {\n            childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\n\n            if (childNodes !== undefined) {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\n    var childNodes;\n\n    if (isNOU(data)) {\n      return childNodes;\n    }\n\n    for (var i = 0, objlen = data.length; i < objlen; i++) {\n      if (!isNOU(data[i][0]) && !isNOU(getValue(this.fields.parentID, data[i][0]))) {\n        if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n          return data[i];\n        }\n      } else if (isRoot) {\n        return data[i];\n      } else {\n        return [];\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {\n    if (expandChild) {\n      var cIcons = selectAll('.' + EXPANDABLE, element);\n\n      for (var i = 0, len = cIcons.length; i < len; i++) {\n        var icon = cIcons[i];\n\n        if (element.querySelector('.e-icons') !== cIcons[i]) {\n          var curLi = closest(icon, '.' + LISTITEM);\n          this.expandArgs = this.getExpandEvent(curLi, null);\n\n          if (loaded !== true) {\n            this.trigger('nodeExpanding', this.expandArgs);\n          }\n\n          this.renderChildNodes(curLi, expandChild, null, loaded);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\n    if (!li.classList.contains('e-disable')) {\n      if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {\n        this.unselectNode(li, e);\n      } else {\n        this.selectNode(li, e, multiSelect);\n      }\n    }\n  };\n\n  TreeView.prototype.isActive = function (li) {\n    return li.classList.contains(ACTIVE) ? true : false;\n  };\n\n  TreeView.prototype.selectNode = function (li, e, multiSelect) {\n    var _this = this;\n\n    if (isNOU(li) || !this.allowMultiSelection && this.isActive(li) && !isNOU(e)) {\n      this.setFocusElement(li);\n      return;\n    }\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeSelectAction(li, e, observedArgs, multiSelect);\n        }\n      });\n    } else {\n      this.nodeSelectAction(li, e, eventArgs, multiSelect);\n    }\n  };\n\n  TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\n    if (!this.allowMultiSelection || !multiSelect && (!e || e && !e.ctrlKey)) {\n      this.removeSelectAll();\n    }\n\n    if (this.allowMultiSelection && e && e.shiftKey) {\n      if (!this.startNode) {\n        this.startNode = li;\n      }\n\n      var startIndex = this.liList.indexOf(this.startNode);\n      var endIndex = this.liList.indexOf(li);\n\n      if (startIndex > endIndex) {\n        var temp = startIndex;\n        startIndex = endIndex;\n        endIndex = temp;\n      }\n\n      for (var i = startIndex; i <= endIndex; i++) {\n        var currNode = this.liList[i];\n\n        if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n          this.addSelect(currNode);\n        }\n      }\n    } else {\n      this.startNode = li;\n      this.addSelect(li);\n    }\n\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  };\n\n  TreeView.prototype.unselectNode = function (li, e) {\n    var _this = this;\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'un-select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeUnselectAction(li, observedArgs);\n        }\n      });\n    } else {\n      this.nodeUnselectAction(li, eventArgs);\n    }\n  };\n\n  TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\n    this.removeSelect(li);\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  };\n\n  TreeView.prototype.setFocusElement = function (li) {\n    if (!isNOU(li)) {\n      var focusedNode = this.getFocusedNode();\n\n      if (focusedNode) {\n        removeClass([focusedNode], FOCUS);\n      }\n\n      addClass([li], FOCUS);\n      this.updateIdAttr(focusedNode, li);\n    }\n  };\n\n  TreeView.prototype.addSelect = function (liEle) {\n    liEle.setAttribute('aria-selected', 'true');\n    addClass([liEle], ACTIVE);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\n      this.selectedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeSelect = function (liEle) {\n    if (this.allowMultiSelection) {\n      liEle.setAttribute('aria-selected', 'false');\n    } else {\n      liEle.removeAttribute('aria-selected');\n    }\n\n    removeClass([liEle], ACTIVE);\n    var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.selectedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.removeSelectAll = function () {\n    var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n\n    for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n      var ele = selectedLI_1[_i];\n\n      if (this.allowMultiSelection) {\n        ele.setAttribute('aria-selected', 'false');\n      } else {\n        ele.removeAttribute('aria-selected');\n      }\n    }\n\n    removeClass(selectedLI, ACTIVE);\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n  };\n\n  TreeView.prototype.getSelectEvent = function (currLi, action, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData\n    };\n  };\n\n  TreeView.prototype.setExpandOnType = function () {\n    this.expandOnType = this.expandOn === 'Auto' ? Browser.isDevice ? 'Click' : 'DblClick' : this.expandOn;\n  };\n\n  TreeView.prototype.expandHandler = function (e) {\n    var target = e.originalEvent.target;\n\n    if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n      return;\n    } else {\n      this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n    }\n  };\n\n  TreeView.prototype.expandCollapseAction = function (currLi, e) {\n    var icon = select('div.' + ICON, currLi);\n\n    if (!icon || icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      var classList = icon.classList;\n\n      if (classList.contains(EXPANDABLE)) {\n        this.expandAction(currLi, icon, e);\n      } else if (classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(currLi, icon, e);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    if (this.isLoaded && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n      });\n    } else {\n      this.nodeExpandAction(currLi, icon, expandChild, callback);\n    }\n  };\n\n  TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {\n    var ul = select('.' + PARENTITEM, currLi);\n\n    if (ul && ul.nodeName === 'UL') {\n      this.expandNode(currLi, icon);\n    } else {\n      this.renderChildNodes(currLi, expandChild, callback);\n      var liEles = selectAll('.' + LISTITEM, currLi);\n\n      for (var i = 0; i < liEles.length; i++) {\n        var id = this.getId(liEles[i]);\n\n        if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n          var icon_1 = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n\n          if (!isNOU(icon_1)) {\n            this.expandAction(liEles[i], icon_1, null);\n          }\n\n          this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.keyActionHandler = function (e) {\n    var _this = this;\n\n    var target = e.target;\n    var focusedNode = this.getFocusedNode();\n\n    if (target && target.classList.contains(INPUT)) {\n      var inpEle = target;\n\n      if (e.action === 'enter') {\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      } else if (e.action === 'escape') {\n        inpEle.value = this.oldText;\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      }\n\n      return;\n    }\n\n    e.preventDefault();\n    var eventArgs = {\n      cancel: false,\n      event: e,\n      node: focusedNode\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'space':\n            if (_this.showCheckBox) {\n              _this.checkNode(e);\n            }\n\n            break;\n\n          case 'moveRight':\n            _this.openNode(_this.enableRtl ? false : true, e);\n\n            break;\n\n          case 'moveLeft':\n            _this.openNode(_this.enableRtl ? true : false, e);\n\n            break;\n\n          case 'shiftDown':\n            _this.shiftKeySelect(true, e);\n\n            break;\n\n          case 'moveDown':\n          case 'ctrlDown':\n          case 'csDown':\n            _this.navigateNode(true);\n\n            break;\n\n          case 'shiftUp':\n            _this.shiftKeySelect(false, e);\n\n            break;\n\n          case 'moveUp':\n          case 'ctrlUp':\n          case 'csUp':\n            _this.navigateNode(false);\n\n            break;\n\n          case 'home':\n          case 'shiftHome':\n          case 'ctrlHome':\n          case 'csHome':\n            _this.navigateRootNode(true);\n\n            break;\n\n          case 'end':\n          case 'shiftEnd':\n          case 'ctrlEnd':\n          case 'csEnd':\n            _this.navigateRootNode(false);\n\n            break;\n\n          case 'enter':\n          case 'ctrlEnter':\n          case 'shiftEnter':\n          case 'csEnter':\n            _this.toggleSelect(focusedNode, e);\n\n            break;\n\n          case 'f2':\n            if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n              _this.createTextbox(focusedNode, e);\n            }\n\n            break;\n\n          case 'ctrlA':\n            if (_this.allowMultiSelection) {\n              var sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\n\n              _this.selectGivenNodes(sNodes);\n            }\n\n            break;\n        }\n      }\n    });\n  };\n\n  TreeView.prototype.navigateToFocus = function (isUp) {\n    var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n    var pos = focusNode.getBoundingClientRect();\n    var parent = this.getScrollParent(this.element);\n\n    if (!isNOU(parent)) {\n      var parentPos = parent.getBoundingClientRect();\n\n      if (pos.bottom > parentPos.bottom) {\n        parent.scrollTop += pos.bottom - parentPos.bottom;\n      } else if (pos.top < parentPos.top) {\n        parent.scrollTop -= parentPos.top - pos.top;\n      }\n    }\n\n    var isVisible = this.isVisibleInViewport(focusNode);\n\n    if (!isVisible) {\n      focusNode.scrollIntoView(isUp);\n    }\n  };\n\n  TreeView.prototype.isVisibleInViewport = function (txtWrap) {\n    var pos = txtWrap.getBoundingClientRect();\n    return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);\n  };\n\n  TreeView.prototype.getScrollParent = function (node) {\n    if (isNOU(node)) {\n      return null;\n    }\n\n    return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);\n  };\n\n  TreeView.prototype.shiftKeySelect = function (isTowards, e) {\n    if (this.allowMultiSelection) {\n      var focusedNode = this.getFocusedNode();\n      var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n      this.removeHover();\n      this.setFocusElement(nextNode);\n      this.toggleSelect(nextNode, e, false);\n      this.navigateToFocus(!isTowards);\n    } else {\n      this.navigateNode(isTowards);\n    }\n  };\n\n  TreeView.prototype.checkNode = function (e) {\n    var focusedNode = this.getFocusedNode();\n    var checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n    var isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n\n    if (!focusedNode.classList.contains('e-disable')) {\n      if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n        this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n      }\n    }\n  };\n\n  TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\n    var _this = this;\n\n    var currLi = closest(checkWrap, '.' + LISTITEM);\n    this.checkActionNodes = [];\n    var ariaState = !isCheck ? 'true' : 'false';\n\n    if (!isNOU(ariaState)) {\n      checkWrap.setAttribute('aria-checked', ariaState);\n    }\n\n    var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n    this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n      }\n    });\n  };\n\n  TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\n    if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n      this.checkedElement.push(li.getAttribute('data-uid'));\n      var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n      child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n    }\n\n    this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n\n    if (this.autoCheck) {\n      this.ensureChildCheckState(li);\n      this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n      var doCheck = void 0;\n\n      if (eventArgs.action === 'check') {\n        doCheck = true;\n      } else if (eventArgs.action === 'uncheck') {\n        doCheck = false;\n      }\n\n      this.ensureStateChange(li, doCheck);\n    }\n\n    this.nodeCheckedEvent(checkWrap, isCheck, e);\n  };\n  /**\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM\n   */\n\n\n  TreeView.prototype.ensureStateChange = function (li, doCheck) {\n    var childElement = select('.' + PARENTITEM, li);\n    var parentIndex = li.getAttribute('data-uid');\n    var mapper = this.fields;\n\n    if (this.dataType === 1 && this.autoCheck) {\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n\n      for (var i = 0; i < resultData.length; i++) {\n        var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n        var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n\n        if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n          this.checkedNodes.push(resultId);\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n\n          if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n          }\n\n          if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {\n            var childNodes = this.getChildNodes(this.treeData, resultId);\n            this.getChildItems(childNodes, doCheck);\n\n            if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n            }\n          }\n        } else {\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n        }\n      }\n    } else if (this.dataType === 1 && !this.autoCheck) {\n      if (!doCheck) {\n        var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < checkedData.length; i++) {\n          var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(id) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n\n        this.checkedNodes = [];\n      } else {\n        for (var i = 0; i < this.treeData.length; i++) {\n          var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(checkedId) === -1) {\n            this.checkedNodes.push(checkedId);\n          }\n        }\n      }\n    } else {\n      var childItems = this.getChildNodes(this.treeData, parentIndex);\n\n      if (childItems) {\n        this.childStateChange(childItems, parentIndex, childElement, doCheck);\n      }\n    }\n  };\n\n  TreeView.prototype.getChildItems = function (childItems, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n      var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n      }\n\n      if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n        this.checkedNodes.push(childId);\n      }\n\n      if (childIsCheck === 'true' && !doCheck) {\n        this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n      }\n\n      var subChildItems = this.getChildNodes(this.treeData, childId);\n\n      if (subChildItems.length > 0) {\n        this.getChildItems(subChildItems, doCheck);\n      }\n    }\n  };\n  /**\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\n   */\n\n\n  TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n      var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.autoCheck) {\n        if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n          this.checkedNodes.push(checkedChild);\n\n          if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          }\n        }\n      } else if (!this.autoCheck) {\n        if (!doCheck) {\n          if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          this.checkedNodes = [];\n        } else {\n          if (this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n      }\n\n      var subChild = this.getChildNodes([childItems[i]], checkedChild);\n\n      if (subChild) {\n        this.childStateChange(subChild, parent, childElement, doCheck);\n      }\n    }\n  }; //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n\n\n  TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\n    if (child) {\n      for (var length_1 = 0; length_1 < child.length; length_1++) {\n        var childId = getValue(this.fields.id, child[length_1]);\n        var check = this.element.querySelector('[data-uid=\"' + childId + '\"]'); //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n\n        if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n          if (check === null && !isNOU(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {\n            child[length_1][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;\n            childCheck = child[length_1][this.fields.isChecked] !== false || checked === 2 ? 0 : null;\n          }\n        } //Pushes child checked node done thro' UI interaction\n\n\n        if (newCheck.indexOf(childId.toString()) === -1 && isNOU(checked)) {\n          newCheck.push(childId.toString());\n        } //Gets if any next level children are available for child nodes\n\n\n        if (getValue(this.fields.hasChildren, child[length_1]) === true || getValue(this.fields.child.toString(), child[length_1])) {\n          var id = getValue(this.fields.id, child[length_1]);\n          var childId_1 = this.getChildNodes(this.treeData, id.toString());\n\n          if (childId_1) {\n            isNOU(validateCheck) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) : this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\n            childCheck = null;\n          }\n        }\n\n        childCheck = null;\n      }\n    }\n  };\n\n  TreeView.prototype.openNode = function (toBeOpened, e) {\n    var focusedNode = this.getFocusedNode();\n    var icon = select('div.' + ICON, focusedNode);\n\n    if (toBeOpened) {\n      if (!icon) {\n        return;\n      } else if (icon.classList.contains(EXPANDABLE)) {\n        this.expandAction(focusedNode, icon, e);\n      } else {\n        this.focusNextNode(focusedNode, true);\n      }\n    } else {\n      if (icon && icon.classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(focusedNode, icon, e);\n      } else {\n        var parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n\n        if (!parentLi) {\n          return;\n        } else {\n          if (!parentLi.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, parentLi);\n            this.navigateToFocus(true);\n          }\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.navigateNode = function (isTowards) {\n    var focusedNode = this.getFocusedNode();\n    this.focusNextNode(focusedNode, isTowards);\n  };\n\n  TreeView.prototype.navigateRootNode = function (isBackwards) {\n    var focusedNode = this.getFocusedNode();\n    var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n\n    if (!rootNode.classList.contains('e-disable')) {\n      this.setFocus(focusedNode, rootNode);\n      this.navigateToFocus(isBackwards);\n    }\n  };\n\n  TreeView.prototype.getFocusedNode = function () {\n    var selectedItem;\n    var fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\n\n    if (isNOU(fNode)) {\n      selectedItem = select('.' + LISTITEM, this.element);\n    }\n\n    return isNOU(fNode) ? isNOU(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;\n  };\n\n  TreeView.prototype.focusNextNode = function (li, isTowards) {\n    var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n    this.setFocus(li, nextNode);\n    this.navigateToFocus(!isTowards);\n\n    if (nextNode.classList.contains('e-disable')) {\n      var lastChild = nextNode.lastChild;\n\n      if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n        this.focusNextNode(nextNode, true);\n      } else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n        this.focusNextNode(nextNode, false);\n      } else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {\n        this.focusNextNode(nextNode, false);\n      } else {\n        this.focusNextNode(nextNode, isTowards);\n      }\n    }\n  };\n\n  TreeView.prototype.getNextNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var nextNode;\n\n    do {\n      index++;\n      nextNode = this.liList[index];\n\n      if (isNOU(nextNode)) {\n        return li;\n      }\n    } while (!isVisible(nextNode));\n\n    return nextNode;\n  };\n\n  TreeView.prototype.getPrevNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var prevNode;\n\n    do {\n      index--;\n      prevNode = this.liList[index];\n\n      if (isNOU(prevNode)) {\n        return li;\n      }\n    } while (!isVisible(prevNode));\n\n    return prevNode;\n  };\n\n  TreeView.prototype.getRootNode = function () {\n    var index = 0;\n    var rootNode;\n\n    do {\n      rootNode = this.liList[index];\n      index++;\n    } while (!isVisible(rootNode));\n\n    return rootNode;\n  };\n\n  TreeView.prototype.getEndNode = function () {\n    var index = this.liList.length - 1;\n    var endNode;\n\n    do {\n      endNode = this.liList[index];\n      index--;\n    } while (!isVisible(endNode));\n\n    return endNode;\n  };\n\n  TreeView.prototype.setFocus = function (preNode, nextNode) {\n    removeClass([preNode], [HOVER, FOCUS]);\n\n    if (!nextNode.classList.contains('e-disable')) {\n      addClass([nextNode], [HOVER, FOCUS]);\n      this.updateIdAttr(preNode, nextNode);\n    }\n  };\n\n  TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\n    this.element.removeAttribute('aria-activedescendant');\n\n    if (preNode) {\n      preNode.removeAttribute('id');\n    }\n\n    nextNode.setAttribute('id', this.element.id + '_active');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n  };\n\n  TreeView.prototype.focusIn = function () {\n    if (!this.mouseDownStatus) {\n      addClass([this.getFocusedNode()], HOVER);\n    }\n\n    this.mouseDownStatus = false;\n  };\n\n  TreeView.prototype.focusOut = function () {\n    removeClass([this.getFocusedNode()], HOVER);\n  };\n\n  TreeView.prototype.onMouseOver = function (e) {\n    var target = e.target;\n    var classList = target.classList;\n    var currentLi = closest(target, '.' + LISTITEM);\n\n    if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {\n      this.removeHover();\n      return;\n    } else {\n      if (currentLi && !currentLi.classList.contains('e-disable')) {\n        this.setHover(currentLi);\n      }\n    }\n  };\n\n  TreeView.prototype.setHover = function (li) {\n    if (!li.classList.contains(HOVER)) {\n      this.removeHover();\n      addClass([li], HOVER);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.onMouseLeave = function (e) {\n    this.removeHover();\n  };\n\n  TreeView.prototype.removeHover = function () {\n    var hoveredNode = selectAll('.' + HOVER, this.element);\n\n    if (hoveredNode && hoveredNode.length) {\n      removeClass(hoveredNode, HOVER);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.getNodeData = function (currLi, fromDS) {\n    if (!isNOU(currLi) && currLi.classList.contains(LISTITEM) && !isNOU(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n      var id = currLi.getAttribute('data-uid');\n      var text = this.getText(currLi, fromDS);\n      var pNode = closest(currLi.parentNode, '.' + LISTITEM);\n      var pid = pNode ? pNode.getAttribute('data-uid') : null;\n      var selected = currLi.classList.contains(ACTIVE);\n      var expanded = currLi.getAttribute('aria-expanded') === 'true' ? true : false;\n      var hasChildren = currLi.getAttribute('aria-expanded') !== null ? true : (select('.' + EXPANDABLE, currLi) || select('.' + COLLAPSIBLE, currLi)) != null ? true : false;\n      var checked = null;\n\n      if (this.showCheckBox) {\n        checked = select('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');\n      }\n\n      return {\n        id: id,\n        text: text,\n        parentID: pid,\n        selected: selected,\n        expanded: expanded,\n        isChecked: checked,\n        hasChildren: hasChildren\n      };\n    }\n\n    return {\n      id: '',\n      text: '',\n      parentID: '',\n      selected: false,\n      expanded: false,\n      isChecked: '',\n      hasChildren: false\n    };\n  };\n\n  TreeView.prototype.getText = function (currLi, fromDS) {\n    if (fromDS) {\n      var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n      var level = parseFloat(currLi.getAttribute('aria-level'));\n      var nodeFields = this.getFields(this.fields, level, 1);\n      return getValue(nodeFields.text, nodeData);\n    }\n\n    return select('.' + LISTTEXT, currLi).textContent;\n  };\n\n  TreeView.prototype.getExpandEvent = function (currLi, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData,\n      event: e\n    };\n  };\n\n  TreeView.prototype.renderNodeTemplate = function (data, textEle, dataId) {\n    var tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle);\n\n    if (tempArr) {\n      tempArr = Array.prototype.slice.call(tempArr);\n      append(tempArr, textEle);\n    }\n  };\n\n  TreeView.prototype.destroyTemplate = function (liEle) {\n    this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\n  };\n\n  TreeView.prototype.reRenderNodes = function () {\n    this.updateListProp(this.fields);\n\n    if (Browser.isIE) {\n      this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    } else {\n      this.element.innerHTML = '';\n    }\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      this.clearTemplate();\n    }\n\n    this.setTouchClass();\n    this.setProperties({\n      selectedNodes: [],\n      checkedNodes: [],\n      expandedNodes: []\n    }, true);\n    this.checkedElement = [];\n    this.isLoaded = false;\n    this.setDataBinding(true);\n  };\n\n  TreeView.prototype.setCssClass = function (oldClass, newClass) {\n    if (!isNOU(oldClass) && oldClass !== '') {\n      removeClass([this.element], oldClass.split(' '));\n    }\n\n    if (!isNOU(newClass) && newClass !== '') {\n      addClass([this.element], newClass.split(' '));\n    }\n  };\n\n  TreeView.prototype.editingHandler = function (e) {\n    var target = e.target;\n\n    if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n      return;\n    } else {\n      var liEle = closest(target, '.' + LISTITEM);\n      this.createTextbox(liEle, e);\n    }\n  };\n\n  TreeView.prototype.createTextbox = function (liEle, e) {\n    var _this = this;\n\n    var oldInpEle = select('.' + TREEINPUT, this.element);\n\n    if (oldInpEle) {\n      oldInpEle.blur();\n    }\n\n    var textEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var innerEle = this.createElement('input', {\n      className: TREEINPUT,\n      attrs: {\n        value: this.oldText\n      }\n    });\n    var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        var inpWidth = textEle.offsetWidth + 5;\n        var style = 'width:' + inpWidth + 'px';\n        addClass([liEle], EDITING);\n\n        if (!isNOU(_this.nodeTemplateFn)) {\n          _this.destroyTemplate(liEle);\n        }\n\n        textEle.innerHTML = eventArgs.innerHtml;\n        var inpEle = select('.' + TREEINPUT, textEle);\n        _this.inputObj = Input.createInput({\n          element: inpEle,\n          properties: {\n            enableRtl: _this.enableRtl\n          }\n        }, _this.createElement);\n\n        _this.inputObj.container.setAttribute('style', style);\n\n        inpEle.focus();\n        var inputEle = inpEle;\n        inputEle.setSelectionRange(0, inputEle.value.length);\n\n        _this.wireInputEvents(inpEle);\n      }\n    });\n  };\n\n  TreeView.prototype.updateOldText = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n    this.editData = this.getNodeObject(id);\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    this.editFields = this.getFields(this.fields, level, 1);\n    this.oldText = getValue(this.editFields.text, this.editData);\n  };\n\n  TreeView.prototype.inputFocusOut = function (e) {\n    if (!select('.' + TREEINPUT, this.element)) {\n      return;\n    }\n\n    var target = e.target;\n    var newText = target.value;\n    var txtEle = closest(target, '.' + LISTTEXT);\n    var liEle = closest(target, '.' + LISTITEM);\n    detach(this.inputObj.container);\n\n    if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n      this.crudOperation('update', null, liEle, newText, null, null, true);\n    } else {\n      this.appendNewText(liEle, txtEle, newText, true);\n    }\n  };\n\n  TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\n    var _this = this;\n\n    var eventArgs = this.getEditEvent(liEle, newText, null);\n    this.trigger('nodeEdited', eventArgs, function (observedArgs) {\n      newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n\n      _this.updateText(liEle, txtEle, newText, isInput);\n\n      if (observedArgs.oldText !== newText) {\n        _this.triggerEvent();\n      }\n    });\n  };\n\n  TreeView.prototype.updateText = function (liEle, txtEle, newText, isInput) {\n    var newData = setValue(this.editFields.text, newText, this.editData);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      txtEle.innerText = '';\n      var dataId = liEle.getAttribute('data-uid');\n      this.renderNodeTemplate(newData, txtEle, dataId);\n      this.renderReactTemplates();\n    } else {\n      txtEle.innerText = newText;\n    }\n\n    if (isInput) {\n      removeClass([liEle], EDITING);\n      txtEle.focus();\n    }\n  };\n\n  TreeView.prototype.getElement = function (ele) {\n    if (isNOU(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n    } else if (typeof ele === 'object') {\n      return getElement(ele);\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getId = function (ele) {\n    if (isNOU(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return ele;\n    } else if (typeof ele === 'object') {\n      return getElement(ele).getAttribute('data-uid');\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\n    var data = this.getNodeData(liEle);\n    return {\n      cancel: false,\n      newText: newText,\n      node: liEle,\n      nodeData: data,\n      oldText: this.oldText,\n      innerHtml: inpEle\n    };\n  };\n\n  TreeView.prototype.getNodeObject = function (id) {\n    var childNodes;\n\n    if (isNOU(id)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\n        var dataId = getValue(this.fields.id, this.treeData[i]);\n\n        if (!isNOU(this.treeData[i]) && !isNOU(dataId) && dataId.toString() === id) {\n          return this.treeData[i];\n        }\n      }\n    } else {\n      return this.getChildNodeObject(this.treeData, this.fields, id);\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\n    var newList;\n\n    if (isNOU(obj)) {\n      return newList;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var dataId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && dataId && dataId.toString() === id) {\n        return obj[i];\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var child = 'child';\n        newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return newList;\n  };\n\n  TreeView.prototype.setDragAndDrop = function (toBind) {\n    if (toBind && !this.disabled) {\n      this.initializeDrag();\n    } else {\n      this.destroyDrag();\n    }\n  };\n\n  TreeView.prototype.initializeDrag = function () {\n    var _this = this;\n\n    var virtualEle;\n    var proxy = this;\n    this.dragObj = new Draggable(this.element, {\n      enableTailMode: true,\n      enableAutoScroll: true,\n      dragArea: this.dragArea,\n      dragTarget: '.' + TEXTWRAP,\n      helper: function (e) {\n        _this.dragTarget = e.sender.target;\n        var dragRoot = closest(_this.dragTarget, '.' + ROOT);\n        var dragWrap = closest(_this.dragTarget, '.' + TEXTWRAP);\n        _this.dragLi = closest(_this.dragTarget, '.' + LISTITEM);\n\n        if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\n          dragWrap = _this.dragTarget.nextElementSibling;\n        }\n\n        if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\n          return false;\n        }\n\n        var cloneEle = dragWrap.cloneNode(true);\n\n        if (isNOU(select('div.' + ICON, cloneEle))) {\n          var icon = proxy.createElement('div', {\n            className: ICON + ' ' + EXPANDABLE\n          });\n          cloneEle.insertBefore(icon, cloneEle.children[0]);\n        }\n\n        var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');\n        virtualEle = proxy.createElement('div', {\n          className: cssClass\n        });\n        virtualEle.appendChild(cloneEle);\n        var nLen = _this.selectedNodes.length;\n\n        if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\n          var cNode = proxy.createElement('span', {\n            className: DROPCOUNT,\n            innerHTML: '' + nLen\n          });\n          virtualEle.appendChild(cNode);\n        }\n\n        document.body.appendChild(virtualEle);\n        document.body.style.cursor = '';\n        _this.dragData = _this.getNodeData(_this.dragLi);\n        return virtualEle;\n      },\n      dragStart: function (e) {\n        addClass([_this.element], DRAGGING);\n        var listItem = closest(e.target, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\n\n        if (eventArgs.draggedNode.classList.contains(EDITING)) {\n          _this.dragObj.intDestroy(e.event);\n\n          _this.dragCancelAction(virtualEle);\n        } else {\n          _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\n            if (observedArgs.cancel) {\n              _this.dragObj.intDestroy(e.event);\n\n              _this.dragCancelAction(virtualEle);\n            } else {\n              _this.dragStartAction = true;\n            }\n          });\n        }\n      },\n      drag: function (e) {\n        _this.dragObj.setProperties({\n          cursorAt: {\n            top: !isNOU(e.event.targetTouches) || Browser.isDevice ? 60 : -20\n          }\n        });\n\n        _this.dragAction(e, virtualEle);\n      },\n      dragStop: function (e) {\n        removeClass([_this.element], DRAGGING);\n\n        _this.removeVirtualEle();\n\n        var dropTarget = e.target;\n        var preventTargetExpand = false;\n        var dropRoot = closest(dropTarget, '.' + DROPPABLE);\n        var isHelperElement = true;\n\n        if (!dropTarget || !dropRoot) {\n          detach(e.helper);\n          document.body.style.cursor = '';\n          isHelperElement = false;\n        }\n\n        var listItem = closest(dropTarget, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\n\n        eventArgs.preventTargetExpand = preventTargetExpand;\n\n        _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\n          _this.dragParent = observedArgs.draggedParentNode;\n          _this.preventExpand = observedArgs.preventTargetExpand;\n\n          if (observedArgs.cancel) {\n            if (e.helper.parentNode) {\n              detach(e.helper);\n            }\n\n            document.body.style.cursor = '';\n            isHelperElement = false;\n          }\n\n          _this.dragStartAction = false;\n        });\n      }\n    });\n    this.dropObj = new Droppable(this.element, {\n      out: function (e) {\n        if (!isNOU(e) && !e.target.classList.contains(SIBLING)) {\n          document.body.style.cursor = 'not-allowed';\n        }\n      },\n      over: function (e) {\n        document.body.style.cursor = '';\n      },\n      drop: function (e) {\n        _this.dropAction(e);\n      }\n    });\n  };\n\n  TreeView.prototype.dragCancelAction = function (virtualEle) {\n    detach(virtualEle);\n    removeClass([this.element], DRAGGING);\n    this.dragStartAction = false;\n  };\n\n  TreeView.prototype.dragAction = function (e, virtualEle) {\n    var dropRoot = closest(e.target, '.' + DROPPABLE);\n    var dropWrap = closest(e.target, '.' + TEXTWRAP);\n    var icon = select('div.' + ICON, virtualEle);\n    removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n    this.removeVirtualEle();\n    document.body.style.cursor = '';\n    var classList = e.target.classList;\n\n    if (this.fullRowSelect && !dropWrap && !isNOU(classList) && classList.contains(FULLROW)) {\n      dropWrap = e.target.nextElementSibling;\n    }\n\n    if (dropRoot) {\n      var dropLi = closest(e.target, '.' + LISTITEM);\n      var checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n      var collapse = closest(e.target, '.' + COLLAPSIBLE);\n      var expand = closest(e.target, '.' + EXPANDABLE);\n\n      if (!dropRoot.classList.contains(ROOT) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        if (this.hasTemplate && dropLi) {\n          var templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n\n          if (e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n            var index = this.fullRowSelect ? 1 : 0;\n            this.appendIndicator(dropLi, icon, index);\n          } else if (e && !expand && !collapse && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n            var index = this.fullRowSelect ? 2 : 1;\n            this.appendIndicator(dropLi, icon, index);\n          } else {\n            addClass([icon], DROPIN);\n          }\n        } else {\n          if (dropLi && e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n            var index = this.fullRowSelect ? 1 : 0;\n            this.appendIndicator(dropLi, icon, index);\n          } else if (dropLi && e && !expand && !collapse && e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10 && !checkWrapper || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n            var index = this.fullRowSelect ? 2 : 1;\n            this.appendIndicator(dropLi, icon, index);\n          } else {\n            addClass([icon], DROPIN);\n          }\n        }\n      } else if (e.target.nodeName === 'LI' && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        addClass([icon], DROPNEXT);\n        this.renderVirtualEle(e);\n      } else if (e.target.classList.contains(SIBLING)) {\n        addClass([icon], DROPNEXT);\n      } else {\n        addClass([icon], DROPOUT);\n      }\n    } else {\n      addClass([icon], NODROP);\n      document.body.style.cursor = 'not-allowed';\n    }\n\n    var listItem = closest(e.target, '.e-list-item');\n    var level;\n\n    if (listItem) {\n      level = parseInt(listItem.getAttribute('aria-level'), 10);\n    }\n\n    var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n\n    if (eventArgs.dropIndicator) {\n      removeClass([icon], eventArgs.dropIndicator);\n    }\n\n    this.trigger('nodeDragging', eventArgs);\n\n    if (eventArgs.dropIndicator) {\n      addClass([icon], eventArgs.dropIndicator);\n    }\n  };\n\n  TreeView.prototype.appendIndicator = function (dropLi, icon, index) {\n    addClass([icon], DROPNEXT);\n    var virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    dropLi.insertBefore(virEle, dropLi.children[index]);\n  };\n  /* eslint-disable */\n\n\n  TreeView.prototype.dropAction = function (e) {\n    var offsetY = e.event.offsetY;\n    var dropTarget = e.target;\n    var dragObj;\n    var level;\n    var drop = false;\n    var dragInstance;\n    dragInstance = e.dragData.draggable;\n\n    for (var i = 0; i < dragInstance.ej2_instances.length; i++) {\n      if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\n        dragObj = dragInstance.ej2_instances[i];\n        break;\n      }\n    }\n\n    if (dragObj && dragObj.dragTarget) {\n      var dragTarget = dragObj.dragTarget;\n      var dragLi = closest(dragTarget, '.' + LISTITEM);\n      var dropLi = closest(dropTarget, '.' + LISTITEM);\n\n      if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n        dropLi = dropTarget.firstElementChild;\n      }\n\n      detach(e.droppedElement);\n      document.body.style.cursor = '';\n\n      if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        if (this.fields.dataSource instanceof DataManager === false) {\n          this.preventExpand = false;\n        }\n\n        return;\n      }\n\n      if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n        var sNodes = selectAll('.' + ACTIVE, dragObj.element);\n\n        if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n          for (var i = sNodes.length - 1; i >= 0; i--) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        } else {\n          for (var i = 0; i < sNodes.length; i++) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        }\n      } else {\n        this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n      }\n\n      level = parseInt(dragLi.getAttribute('aria-level'), 10);\n      drop = true;\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n\n    if (dragObj.element.id !== this.element.id) {\n      dragObj.triggerEvent();\n    }\n\n    this.triggerEvent();\n  };\n\n  TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n    var checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n    var collapse = closest(e.target, '.' + COLLAPSIBLE);\n    var expand = closest(e.target, '.' + EXPANDABLE);\n\n    if (!dragLi.classList.contains('e-disable') && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {\n      if (dropTarget.nodeName === 'LI') {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n        if (dropTarget.firstElementChild.nodeName === 'UL') {\n          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n        }\n      } else if (dropTarget.classList.contains('e-icon-collapsible') || dropTarget.classList.contains('e-icon-expandable')) {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else {\n        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n      }\n    } else {\n      this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n    }\n  };\n\n  TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\n    var dropUl = closest(dropLi, '.' + PARENTITEM);\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var pre;\n\n    if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    } else if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      if (e.event.offsetY < 5 || e.event.offsetX < 3) {\n        pre = true;\n      } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {\n        pre = false;\n      }\n    }\n\n    if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      var target = e.target.closest('li');\n      dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n    } else {\n      dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n    }\n\n    this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var dropParentUl = closest(dropLi, '.' + PARENTITEM);\n    var templateTarget;\n\n    if (e && e.target) {\n      templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n    }\n\n    if (e && pos < 7 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi);\n      this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n    } else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10 && !isCheck && !this.hasTemplate) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else {\n      var dropUl = this.expandParent(dropLi);\n      var childLi = dropUl.childNodes[index];\n      dropUl.insertBefore(dragLi, childLi);\n      this.moveData(dragLi, childLi, dropUl, true, dragObj);\n    }\n\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\n    var dropParentLi = closest(dropUl, '.' + LISTITEM);\n    var id = this.getId(dragLi);\n    var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n    var refId = this.getId(dropLi);\n    var index = this.getDataPos(this.treeData, this.fields, refId);\n    var parentId = this.getId(dropParentLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n      var pos = isNOU(index) ? this.treeData.length : pre ? index : index + 1;\n\n      if (isNOU(parentId) && !this.hasPid) {\n        delete removedData[0][this.fields.parentID];\n      } else {\n        var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n        setValue(this.fields.parentID, currPid, removedData[0]);\n      }\n\n      this.treeData.splice(pos, 0, removedData[0]);\n\n      if (dragObj.element.id !== this.element.id) {\n        var childData = dragObj.removeChildNodes(id);\n        pos++;\n\n        for (var i = 0, len = childData.length; i < len; i++) {\n          this.treeData.splice(pos, 0, childData[i]);\n          pos++;\n        }\n\n        dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n    }\n  };\n\n  TreeView.prototype.expandParent = function (dropLi) {\n    var dropIcon = select('div.' + ICON, dropLi);\n\n    if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n      this.expandAction(dropLi, dropIcon, null);\n    }\n\n    var dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (this.preventExpand === true && !dropUl && dropIcon) {\n      this.renderChildNodes(dropLi);\n    }\n\n    dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (!isNOU(dropUl) && this.preventExpand === true) {\n      dropUl.style.display = 'none';\n    }\n\n    if (!isNOU(dropUl) && this.preventExpand === false) {\n      dropUl.style.display = 'block';\n    }\n\n    if (isNOU(dropUl) && this.preventExpand === true) {\n      if (isNOU(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        icon.classList.add('e-icon-expandable');\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n\n      if (icon) {\n        removeClass([icon], COLLAPSIBLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      dropLi.setAttribute('aria-expanded', 'false');\n      dropUl.style.display = 'none';\n    }\n\n    if (isNOU(dropUl)) {\n      this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n\n      if (isNOU(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        removeClass([icon], EXPANDABLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n        icon = select('div.' + ICON, dropLi);\n        removeClass([icon], EXPANDABLE);\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n      this.addExpand(dropLi);\n      this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n    }\n\n    return dropUl;\n  };\n\n  TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\n    if (dragParentLi && dragParentUl.childElementCount === 0) {\n      var dragIcon = select('div.' + ICON, dragParentLi);\n      detach(dragParentUl);\n      detach(dragIcon);\n      var parentId = this.getId(dragParentLi);\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n      this.removeExpand(dragParentLi, true);\n    }\n  };\n\n  TreeView.prototype.updateAriaLevel = function (dragLi) {\n    var level = this.parents(dragLi, '.' + PARENTITEM).length;\n    dragLi.setAttribute('aria-level', '' + level);\n    this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n  };\n\n  TreeView.prototype.updateChildAriaLevel = function (element, level) {\n    if (!isNOU(element)) {\n      var cNodes = element.childNodes;\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        liEle.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n      }\n    }\n  };\n\n  TreeView.prototype.renderVirtualEle = function (e) {\n    var pre;\n\n    if (e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    }\n\n    var virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;\n    e.target.insertBefore(virEle, e.target.children[index]);\n  };\n\n  TreeView.prototype.removeVirtualEle = function () {\n    var sibEle = select('.' + SIBLING);\n\n    if (sibEle) {\n      detach(sibEle);\n    }\n  };\n\n  TreeView.prototype.destroyDrag = function () {\n    if (this.dragObj && this.dropObj) {\n      this.dragObj.destroy();\n      this.dropObj.destroy();\n    }\n  };\n\n  TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n    var dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n    var dropData = dropLi ? this.getNodeData(dropLi) : null;\n    var draggedNode = obj ? obj.dragLi : dragNode;\n    var draggedNodeData = obj ? obj.dragData : null;\n    var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n    var dragLiParent = obj.dragLi.parentElement;\n    var dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n    var targetParent = null;\n    var indexValue = null;\n    var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n    var iconClass = null;\n    var node = drop === true ? draggedNode : dropLi;\n    var index = node ? closest(node, '.e-list-parent') : null;\n    var i = 0;\n    var position = null;\n    dragParent = obj.dragLi && dragParent === null ? closest(dragLiParent, '.' + ROOT) : dragParent;\n    dragParent = drop === true ? this.dragParent : dragParent;\n\n    if (cloneEle) {\n      while (i < 4) {\n        if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n          iconClass = iconCss[i];\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    if (index) {\n      var dropTar = 0;\n\n      for (i = 0; i < index.childElementCount; i++) {\n        dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;\n\n        if (drop !== true && index.children[i].classList.contains('e-hover')) {\n          indexValue = event.offsetY >= 23 ? i + 1 : i;\n          break;\n        } else if (index.children[i] === node) {\n          indexValue = event.offsetY >= 23 ? i : i;\n          break;\n        }\n      }\n\n      indexValue = dropTar !== 0 ? --indexValue : indexValue;\n      position = iconClass == \"e-drop-in\" ? \"Inside\" : event.offsetY < 7 ? \"Before\" : \"After\";\n    }\n\n    if (dropTarget) {\n      if (newParent.length === 0) {\n        targetParent = null;\n      } else if (dropTarget.classList.contains(LISTITEM)) {\n        targetParent = newParent[0];\n      } else {\n        targetParent = newParent[1];\n      }\n    }\n\n    if (dropLi === draggedNode) {\n      targetParent = dropLi;\n    }\n\n    if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n      targetParent = dropLi;\n\n      if (drop !== true) {\n        level = ++level;\n        var parent_2 = targetParent ? select('.e-list-parent', targetParent) : null;\n        indexValue = parent_2 ? parent_2.children.length : 0;\n\n        if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {\n          var parent_3 = targetParent.hasAttribute('data-uid') ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n          indexValue = parent_3 ? parent_3.length : 0;\n        }\n      }\n    }\n\n    return {\n      cancel: false,\n      clonedNode: cloneEle,\n      event: event,\n      draggedNode: draggedNode,\n      draggedNodeData: draggedNodeData,\n      droppedNode: dropLi,\n      droppedNodeData: dropData,\n      dropIndex: indexValue,\n      dropLevel: level,\n      draggedParentNode: dragParent,\n      dropTarget: targetParent,\n      dropIndicator: iconClass,\n      target: target,\n      position: position\n    };\n  };\n\n  TreeView.prototype.addFullRow = function (toAdd) {\n    var len = this.liList.length;\n\n    if (toAdd) {\n      for (var i = 0; i < len; i++) {\n        this.createFullRow(this.liList[i]);\n      }\n    } else {\n      for (var i = 0; i < len; i++) {\n        var rowDiv = select('.' + FULLROW, this.liList[i]);\n        detach(rowDiv);\n      }\n    }\n  };\n\n  TreeView.prototype.createFullRow = function (item) {\n    var rowDiv = this.createElement('div', {\n      className: FULLROW\n    });\n    item.insertBefore(rowDiv, item.childNodes[0]);\n  };\n\n  TreeView.prototype.addMultiSelect = function (toAdd) {\n    if (toAdd) {\n      var liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n\n      for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\n        var ele = liEles_1[_i];\n        ele.setAttribute('aria-selected', 'false');\n      }\n    } else {\n      var liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n\n      for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\n        var ele = liEles_2[_a];\n        ele.removeAttribute('aria-selected');\n      }\n    }\n  };\n\n  TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNOU(element)) {\n      var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        var icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNOU(icon)) {\n          this.collapseNode(liEle, icon, null);\n        }\n\n        this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\n    var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n\n    for (var i = 0, len = cIcons.length; i < len; i++) {\n      var icon = cIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.collapseNode(liEle, icon, null);\n    }\n  };\n\n  TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNOU(element)) {\n      var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = eNodes.length; i < len; i++) {\n        var liEle = eNodes[i];\n        var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNOU(icon)) {\n          this.expandAction(liEle, icon, null);\n        }\n\n        this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\n    var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n\n    for (var i = 0, len = eIcons.length; i < len; i++) {\n      var icon = eIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.expandAction(liEle, icon, null, true);\n    }\n  };\n\n  TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\n    var vNodes = Array.prototype.slice.call(nodes);\n\n    if (excludeHiddenNodes) {\n      for (var i = 0; i < vNodes.length; i++) {\n        if (!isVisible(vNodes[i])) {\n          vNodes.splice(i, 1);\n          i--;\n        }\n      }\n    }\n\n    return vNodes;\n  };\n\n  TreeView.prototype.removeNode = function (node) {\n    var dragParentUl = closest(node, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      this.destroyTemplate(node);\n    }\n\n    detach(node);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.removeData(node);\n  };\n\n  TreeView.prototype.updateInstance = function () {\n    this.updateList();\n    this.updateSelectedNodes();\n    this.updateExpandedNodes();\n  };\n\n  TreeView.prototype.updateList = function () {\n    this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n  };\n\n  TreeView.prototype.updateSelectedNodes = function () {\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n    var sNodes = selectAll('.' + ACTIVE, this.element);\n    this.selectGivenNodes(sNodes);\n  };\n\n  TreeView.prototype.updateExpandedNodes = function () {\n    this.setProperties({\n      expandedNodes: []\n    }, true);\n    var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n\n    for (var i = 0, len = eNodes.length; i < len; i++) {\n      this.addExpand(eNodes[i]);\n    }\n  };\n\n  TreeView.prototype.removeData = function (node) {\n    if (this.dataType === 1) {\n      var dm = new DataManager(this.treeData);\n      var id = this.getId(node);\n      var data = {};\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      data[this.fields.id] = newId;\n      dm.remove(this.fields.id, data);\n      this.removeChildNodes(id);\n    } else {\n      var id = this.getId(node);\n      this.updateChildField(this.treeData, this.fields, id, null, null, true);\n    }\n  };\n\n  TreeView.prototype.removeChildNodes = function (parentId) {\n    var cNodes = this.getChildGroup(this.groupedData, parentId, false);\n    var childData = [];\n\n    if (cNodes) {\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var dm = new DataManager(this.treeData);\n        var id = getValue(this.fields.id, cNodes[i]).toString();\n        var data = {};\n        var currId = this.isNumberTypeId ? parseFloat(id) : id;\n        data[this.fields.id] = currId;\n        var nodeData = dm.remove(this.fields.id, data);\n        childData.push(nodeData[0]);\n        this.removeChildNodes(id);\n      }\n    }\n\n    return childData;\n  };\n\n  TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var liEle = this.getElement(nodes[i]);\n\n      if (isNOU(liEle)) {\n        continue;\n      }\n\n      var icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n\n      if (!isNOU(icon)) {\n        toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n      }\n    }\n  };\n\n  TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    var sNodes = this.getSortedData(nodes);\n    var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n\n    if (isRemote) {\n      this.updateMapper(level);\n    }\n\n    var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n    var dropUl;\n\n    if (!dropEle) {\n      dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n    } else {\n      dropUl = dropEle;\n    }\n\n    var refNode = dropUl.childNodes[index];\n\n    for (var i = 0; i < li.length; i++) {\n      dropUl.insertBefore(li[i], refNode);\n    }\n\n    var id = this.getId(dropLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n      var refId = this.getId(refNode);\n      var pos = isNOU(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n\n      for (var j = 0; j < nodes.length; j++) {\n        if (!isNOU(id)) {\n          var currId = this.isNumberTypeId ? parseFloat(id) : id;\n          setValue(this.fields.parentID, currId, nodes[j]);\n        }\n\n        this.treeData.splice(pos, 0, nodes[j]);\n        pos++;\n      }\n    } else {\n      this.addChildData(this.treeData, this.fields, id, nodes, index);\n    }\n\n    this.finalizeNode(dropUl);\n  };\n\n  TreeView.prototype.updateMapper = function (level) {\n    var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n    this.updateListProp(mapper);\n  };\n\n  TreeView.prototype.updateListProp = function (mapper) {\n    var prop = this.getActualProperties(mapper);\n    this.listBaseOption.fields = prop;\n    this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n  };\n\n  TreeView.prototype.getDataPos = function (obj, mapper, id) {\n    var pos = null;\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        return i;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var data = getValue(mapper.child, obj[i]);\n        pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var items = getValue('child', obj[i]);\n        pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      }\n    }\n\n    return pos;\n  };\n\n  TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\n    var updated;\n\n    if (isNOU(id)) {\n      index = isNOU(index) ? obj.length : index;\n\n      for (var k = 0, len = data.length; k < len; k++) {\n        obj.splice(index, 0, data[k]);\n        index++;\n      }\n\n      return updated;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (typeof mapper.child === 'string' && obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null || this.fields.dataSource instanceof DataManager && obj[i].hasOwnProperty('child')) {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          var childData = getValue(key, obj[i]);\n\n          if (isNOU(childData)) {\n            childData = [];\n          }\n\n          index = isNOU(index) ? childData.length : index;\n\n          for (var k = 0, len = data.length; k < len; k++) {\n            childData.splice(index, 0, data[k]);\n            index++;\n          }\n        } else {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          obj[i][key] = data;\n        }\n\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childObj = getValue(mapper.child, obj[i]);\n        updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var childData = getValue('child', obj[i]);\n        updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return updated;\n  };\n\n  TreeView.prototype.doDisableAction = function (nodes) {\n    var validNodes = this.nodeType(nodes);\n    var validID = this.checkValidId(validNodes);\n    this.validArr = [];\n\n    for (var i = 0, len = validID.length; i < len; i++) {\n      var id = validID[i][this.fields.id].toString();\n\n      if (id && this.disableNode.indexOf(id) === -1) {\n        this.disableNode.push(id);\n      }\n\n      var liEle = this.getElement(id);\n\n      if (liEle) {\n        liEle.setAttribute('aria-disabled', 'true');\n        addClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.doEnableAction = function (nodes) {\n    var strNodes = this.nodeType(nodes);\n\n    for (var i = 0, len = strNodes.length; i < len; i++) {\n      var liEle = this.getElement(strNodes[i]);\n      var id = strNodes[i];\n\n      if (id && this.disableNode.indexOf(id) !== -1) {\n        this.disableNode.splice(this.disableNode.indexOf(id), 1);\n      }\n\n      if (liEle) {\n        liEle.removeAttribute('aria-disabled');\n        removeClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.nodeType = function (nodes) {\n    var validID = [];\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var id = void 0;\n\n      if (typeof nodes[i] == \"string\") {\n        id = nodes[i] ? nodes[i].toString() : null;\n      } else if (typeof nodes[i] === \"object\") {\n        id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n      }\n\n      if (validID.indexOf(id) == -1) {\n        validID.push(id);\n      }\n    }\n\n    return validID;\n  };\n\n  TreeView.prototype.checkValidId = function (node) {\n    var _this = this;\n\n    if (this.dataType === 1) {\n      this.validArr = this.treeData.filter(function (data) {\n        return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\n      });\n    } else if (this.dataType === 2) {\n      for (var k = 0; k < this.treeData.length; k++) {\n        var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n\n        if (node.indexOf(id) !== -1) {\n          this.validArr.push(this.treeData[k]);\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n\n        if (childItems) {\n          this.filterNestedChild(childItems, node);\n        }\n      }\n    }\n\n    return this.validArr;\n  };\n\n  TreeView.prototype.filterNestedChild = function (treeData, nodes) {\n    for (var k = 0; k < treeData.length; k++) {\n      var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n\n      if (nodes.indexOf(id) !== -1) {\n        this.validArr.push(treeData[k]);\n      }\n\n      var childItems = getValue(this.fields.child.toString(), treeData[k]);\n\n      if (childItems) {\n        this.filterNestedChild(childItems, nodes);\n      }\n    }\n  };\n\n  TreeView.prototype.setTouchClass = function () {\n    var ele = closest(this.element, '.' + BIGGER);\n    this.touchClass = isNOU(ele) ? '' : SMALL;\n  };\n\n  TreeView.prototype.updatePersistProp = function () {\n    this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n    var sleNodes = this.selectedNodes;\n\n    for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\n      this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n    }\n\n    var enodes = this.expandedNodes;\n\n    for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\n      this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n    }\n\n    if (this.showCheckBox) {\n      this.removeField(this.treeData, this.fields, ['isChecked']);\n      var cnodes = this.checkedNodes;\n\n      for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n        this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n      }\n    }\n  };\n\n  TreeView.prototype.removeField = function (obj, mapper, names) {\n    if (isNOU(obj) || isNOU(mapper)) {\n      return;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      for (var j = 0; j < names.length; j++) {\n        var field = this.getMapperProp(mapper, names[j]);\n\n        if (!isNOU(obj[i][field])) {\n          delete obj[i][field];\n        }\n      }\n\n      if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n      }\n    }\n  };\n\n  TreeView.prototype.getMapperProp = function (mapper, fieldName) {\n    switch (fieldName) {\n      case 'selected':\n        return !isNOU(mapper.selected) ? mapper.selected : 'selected';\n\n      case 'expanded':\n        return !isNOU(mapper.expanded) ? mapper.expanded : 'expanded';\n\n      case 'isChecked':\n        return !isNOU(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n\n      case 'hasChildren':\n        return !isNOU(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n\n      default:\n        return fieldName;\n    }\n  };\n\n  TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\n    var childNodes;\n\n    if (isNOU(id)) {\n      return;\n    } else if (this.dataType === 1) {\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n      setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n    } else {\n      this.updateChildField(obj, mapper, id, key, value);\n    }\n  };\n\n  TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {\n    var removedData;\n\n    if (isNOU(obj)) {\n      return removedData;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (remove) {\n          removedData = obj.splice(i, 1);\n        } else {\n          setValue(this.getMapperProp(mapper, key), value, obj[i]);\n          removedData = [];\n        }\n\n        return removedData;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var childItems = getValue('child', obj[i]);\n        removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return removedData;\n  };\n\n  TreeView.prototype.triggerEvent = function () {\n    this.renderReactTemplates();\n    var eventArgs = {\n      data: this.treeData\n    };\n    this.trigger('dataSourceChanged', eventArgs);\n  };\n\n  TreeView.prototype.wireInputEvents = function (inpEle) {\n    EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n  };\n\n  TreeView.prototype.wireEditingEvents = function (toBind) {\n    var _this = this;\n\n    if (toBind && !this.disabled) {\n      var proxy_2 = this;\n      this.touchEditObj = new Touch(this.element, {\n        tap: function (e) {\n          if (_this.isDoubleTapped(e) && e.tapCount === 2) {\n            e.originalEvent.preventDefault();\n            proxy_2.editingHandler(e.originalEvent);\n          }\n        }\n      });\n    } else {\n      if (this.touchEditObj) {\n        this.touchEditObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireClickEvent = function (toBind) {\n    if (toBind) {\n      var proxy_3 = this;\n      this.touchClickObj = new Touch(this.element, {\n        tap: function (e) {\n          proxy_3.clickHandler(e);\n        }\n      });\n    } else {\n      if (this.touchClickObj) {\n        this.touchClickObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireExpandOnEvent = function (toBind) {\n    var _this = this;\n\n    if (toBind) {\n      var proxy_4 = this;\n      this.touchExpandObj = new Touch(this.element, {\n        tap: function (e) {\n          if ((_this.expandOnType === 'Click' || _this.expandOnType === 'DblClick' && _this.isDoubleTapped(e) && e.tapCount === 2) && e.originalEvent.which !== 3) {\n            proxy_4.expandHandler(e);\n          }\n        }\n      });\n    } else {\n      if (this.touchExpandObj) {\n        this.touchExpandObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.mouseDownHandler = function (e) {\n    this.mouseDownStatus = true;\n\n    if (e.shiftKey || e.ctrlKey) {\n      e.preventDefault();\n    }\n\n    if (e.ctrlKey && this.allowMultiSelection) {\n      EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.preventContextMenu = function (e) {\n    e.preventDefault();\n  };\n\n  TreeView.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n    this.wireClickEvent(true);\n\n    if (this.expandOnType !== 'None') {\n      this.wireExpandOnEvent(true);\n    }\n\n    EventHandler.add(this.element, 'focus', this.focusIn, this);\n    EventHandler.add(this.element, 'blur', this.focusOut, this);\n    EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n    EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  TreeView.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n    this.wireClickEvent(false);\n    this.wireExpandOnEvent(false);\n    EventHandler.remove(this.element, 'focus', this.focusIn);\n    EventHandler.remove(this.element, 'blur', this.focusOut);\n    EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n    EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n\n    if (!this.disabled) {\n      this.keyboardModule.destroy();\n    }\n  };\n\n  TreeView.prototype.parents = function (element, selector) {\n    var matched = [];\n    var el = element.parentNode;\n\n    while (!isNOU(el)) {\n      if (matches(el, selector)) {\n        matched.push(el);\n      }\n\n      el = el.parentNode;\n    }\n\n    return matched;\n  };\n\n  TreeView.prototype.isDoubleTapped = function (e) {\n    var target = e.originalEvent.target;\n    var secondTap;\n\n    if (target && e.tapCount) {\n      if (e.tapCount === 1) {\n        this.firstTap = closest(target, '.' + LISTITEM);\n      } else if (e.tapCount === 2) {\n        secondTap = closest(target, '.' + LISTITEM);\n      }\n    }\n\n    return this.firstTap === secondTap;\n  };\n\n  TreeView.prototype.isDescendant = function (parent, child) {\n    var node = child.parentNode;\n\n    while (!isNOU(node)) {\n      if (node === parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  };\n\n  TreeView.prototype.showSpinner = function (element) {\n    addClass([element], LOAD);\n    createSpinner({\n      target: element,\n      width: Browser.isDevice ? 16 : 14\n    }, this.createElement);\n    showSpinner(element);\n  };\n\n  TreeView.prototype.hideSpinner = function (element) {\n    hideSpinner(element);\n    element.innerHTML = '';\n    removeClass([element], LOAD);\n  };\n\n  TreeView.prototype.setCheckedNodes = function (nodes) {\n    nodes = JSON.parse(JSON.stringify(nodes));\n    this.uncheckAll(this.checkedNodes);\n    this.setIndeterminate(nodes);\n\n    if (nodes.length > 0) {\n      this.checkAll(nodes);\n    }\n  };\n  /**\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\n   */\n\n\n  TreeView.prototype.setValidCheckedNode = function (node) {\n    if (this.dataType === 1) {\n      var mapper = this.fields;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n\n      if (resultData[0]) {\n        this.setChildCheckState(resultData, node, resultData[0]);\n\n        if (this.autoCheck) {\n          var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n          var childNodes = this.getChildNodes(this.treeData, parent_4);\n          var count = 0;\n\n          for (var len = 0; len < childNodes.length; len++) {\n            var childId = childNodes[len][this.fields.id].toString();\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n\n          if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\n            this.checkedNodes.push(parent_4);\n          }\n        }\n      }\n    } else if (this.dataType === 2) {\n      for (var a = 0; a < this.treeData.length; a++) {\n        var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n\n        if (index === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n          break;\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n\n        if (childItems) {\n          this.setChildCheckState(childItems, node, this.treeData[a]);\n        }\n      }\n    }\n  };\n  /**\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\n   */\n\n\n  TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {\n    var checkedParent;\n    var count = 0;\n\n    if (this.dataType === 1) {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n            this.checkedNodes.push(checkNode);\n          }\n        }\n\n        if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = this.getChildNodes(this.treeData, checkNode);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, treeData);\n        }\n      }\n    } else {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n\n        if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, childItems[index]);\n        }\n\n        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n          count++;\n        }\n\n        if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n          this.checkedNodes.push(checkedParent);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.setIndeterminate = function (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      this.setValidCheckedNode(nodes[i]);\n    }\n  };\n\n  TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\n    if (this.dataType === 1) {\n      var pos = this.getDataPos(this.treeData, this.fields, id);\n      this.treeData.splice(pos, 1, newData);\n\n      if (isRefreshChild) {\n        this.removeChildNodes(id);\n\n        for (var j = 0; j < childValue.length; j++) {\n          this.treeData.splice(pos, 0, childValue[j]);\n          pos++;\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n    }\n  };\n\n  TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\n    var found;\n\n    for (var i = 0, objlen = treeData.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, treeData[i]);\n\n      if (treeData[i] && nodeId && nodeId.toString() === currID) {\n        treeData[i] = newData[0];\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, treeData[i]))) {\n        var childObj = getValue(mapper.child, treeData[i]);\n        found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', treeData[i]))) {\n        var childData = getValue('child', treeData[i]);\n        found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  TreeView.prototype.dynamicState = function () {\n    this.setDragAndDrop(this.allowDragAndDrop);\n    this.wireEditingEvents(this.allowEditing);\n\n    if (!this.disabled) {\n      this.wireEvents();\n      this.setRipple();\n    } else {\n      this.unWireEvents();\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n  };\n\n  TreeView.prototype.crudOperation = function (operation, nodes, target, newText, newNode, index, prevent) {\n    var _this = this;\n\n    var data = this.fields.dataSource;\n    var matchedArr = [];\n    var query = this.getQuery(this.fields);\n    var key = this.fields.id;\n    var crud;\n    var changes = {\n      addedRecords: [],\n      deletedRecords: [],\n      changedRecords: []\n    };\n    var nodesID = [];\n\n    if (nodes) {\n      nodesID = this.nodeType(nodes);\n    } else if (target) {\n      if (typeof target == \"string\") {\n        nodesID[0] = target.toString();\n      } else if (typeof target === \"object\") {\n        nodesID[0] = target.getAttribute(\"data-uid\").toString();\n      }\n    }\n\n    for (var i = 0, len = nodesID.length; i < len; i++) {\n      var liEle = this.getElement(nodesID[i]);\n\n      if (isNullOrUndefined(liEle)) {\n        continue;\n      }\n\n      var removedData = this.getNodeObject(nodesID[i]);\n      matchedArr.push(removedData);\n    }\n\n    switch (operation) {\n      case 'delete':\n        if (nodes.length == 1) {\n          crud = data.remove(key, matchedArr[0], query.fromTable, query);\n        } else {\n          changes.deletedRecords = matchedArr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(function (e) {\n          return _this.deleteSuccess(nodesID);\n        }).catch(function (e) {\n          return _this.dmFailure(e);\n        });\n        break;\n\n      case 'update':\n        matchedArr[0][this.fields.text] = newText;\n        crud = data.update(key, matchedArr[0], query.fromTable, query);\n        crud.then(function (e) {\n          return _this.editSucess(target, newText, prevent);\n        }).catch(function (e) {\n          return _this.dmFailure(e, target, prevent);\n        });\n        break;\n\n      case 'insert':\n        if (newNode.length == 1) {\n          crud = data.insert(newNode[0], query.fromTable, query);\n        } else {\n          var arr = [];\n\n          for (var i = 0, len = newNode.length; i < len; i++) {\n            arr.push(newNode[i]);\n          }\n\n          changes.addedRecords = arr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(function (e) {\n          var dropLi = _this.getElement(target);\n\n          _this.addSuccess(newNode, dropLi, index);\n\n          _this.preventExpand = false;\n        }).catch(function (e) {\n          return _this.dmFailure(e);\n        });\n        break;\n    }\n  };\n\n  TreeView.prototype.deleteSuccess = function (nodes) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var liEle = this.getElement(nodes[i]);\n\n      if (isNOU(liEle)) {\n        continue;\n      }\n\n      this.removeNode(liEle);\n    }\n\n    this.updateInstance();\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.triggerEvent();\n  };\n\n  TreeView.prototype.editSucess = function (target, newText, prevent) {\n    var liEle = this.getElement(target);\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.appendNewText(liEle, txtEle, newText, prevent);\n  };\n\n  TreeView.prototype.addSuccess = function (nodes, dropLi, index) {\n    var dropUl;\n    var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n    var proxy = this;\n\n    if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector('.' + PARENTITEM) === null) {\n      proxy.renderChildNodes(dropLi, null, function () {\n        dropUl = dropLi.querySelector('.' + PARENTITEM);\n        proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);\n        proxy.triggerEvent();\n      });\n    } else {\n      this.addGivenNodes(nodes, dropLi, index, true);\n      this.triggerEvent();\n    }\n  };\n\n  TreeView.prototype.dmFailure = function (e, target, prevent) {\n    if (target) {\n      this.updatePreviousText(target, prevent);\n    }\n\n    this.trigger('actionFailure', {\n      error: e\n    });\n  };\n\n  TreeView.prototype.updatePreviousText = function (target, prevent) {\n    var liEle = this.getElement(target);\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.updateText(liEle, txtEle, this.oldText, prevent);\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * @param  {TreeView} newProp\n   * @param  {TreeView} oldProp\n   * @returns void\n   * @private\n   */\n\n\n  TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.setDragAndDrop(this.allowDragAndDrop);\n          break;\n\n        case 'dragArea':\n          if (this.allowDragAndDrop) {\n            this.dragObj.dragArea = this.dragArea;\n          }\n\n          break;\n\n        case 'allowEditing':\n          this.wireEditingEvents(this.allowEditing);\n          break;\n\n        case 'allowMultiSelection':\n          if (this.selectedNodes.length > 1) {\n            var sNode = this.getElement(this.selectedNodes[0]);\n            this.isLoaded = false;\n            this.removeSelectAll();\n            this.selectNode(sNode, null);\n            this.isLoaded = true;\n          }\n\n          this.setMultiSelect(this.allowMultiSelection);\n          this.addMultiSelect(this.allowMultiSelection);\n          break;\n\n        case 'checkedNodes':\n          if (this.showCheckBox) {\n            this.checkedNodes = oldProp.checkedNodes;\n            this.setCheckedNodes(newProp.checkedNodes);\n          }\n\n          break;\n\n        case 'autoCheck':\n          if (this.showCheckBox) {\n            this.autoCheck = newProp.autoCheck;\n            this.ensureIndeterminate();\n          }\n\n          break;\n\n        case 'cssClass':\n          this.setCssClass(oldProp.cssClass, newProp.cssClass);\n          break;\n\n        case 'enableRtl':\n          this.setEnableRtl();\n          break;\n\n        case 'expandedNodes':\n          this.isAnimate = false;\n          this.setProperties({\n            expandedNodes: []\n          }, true);\n          this.collapseAll();\n          this.isInitalExpand = true;\n          this.setProperties({\n            expandedNodes: isNOU(newProp.expandedNodes) ? [] : newProp.expandedNodes\n          }, true);\n          this.doExpandAction();\n          this.isInitalExpand = false;\n          this.isAnimate = true;\n          break;\n\n        case 'expandOn':\n          this.wireExpandOnEvent(false);\n          this.setExpandOnType();\n\n          if (this.expandOnType !== 'None' && !this.disabled) {\n            this.wireExpandOnEvent(true);\n          }\n\n          break;\n\n        case 'disabled':\n          this.setDisabledMode();\n          this.dynamicState();\n          break;\n\n        case 'fields':\n          this.isAnimate = false;\n          this.isFieldChange = true;\n          this.initialRender = true;\n          this.reRenderNodes();\n          this.initialRender = false;\n          this.isAnimate = true;\n          this.isFieldChange = false;\n          break;\n\n        case 'fullRowSelect':\n          this.setFullRow(this.fullRowSelect);\n          this.addFullRow(this.fullRowSelect);\n          break;\n\n        case 'loadOnDemand':\n          if (this.loadOnDemand === false && !this.onLoaded) {\n            var nodes = this.element.querySelectorAll('li');\n            var i = 0;\n\n            while (i < nodes.length) {\n              if (nodes[i].getAttribute('aria-expanded') !== 'true') {\n                this.renderChildNodes(nodes[i], true, null, true);\n              }\n\n              i++;\n            }\n\n            this.onLoaded = true;\n          }\n\n          break;\n\n        case 'nodeTemplate':\n          this.hasTemplate = false;\n          this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n          this.reRenderNodes();\n          break;\n\n        case 'selectedNodes':\n          this.removeSelectAll();\n          this.setProperties({\n            selectedNodes: newProp.selectedNodes\n          }, true);\n          this.doSelectionAction();\n          break;\n\n        case 'showCheckBox':\n          this.reRenderNodes();\n          break;\n\n        case 'sortOrder':\n          this.reRenderNodes();\n          break;\n\n        case 'fullRowNavigable':\n          this.setProperties({\n            fullRowNavigable: newProp.fullRowNavigable\n          }, true);\n          this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\n          this.reRenderNodes();\n          break;\n      }\n    }\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n   */\n\n\n  TreeView.prototype.destroy = function () {\n    this.clearTemplate();\n    this.element.removeAttribute('aria-activedescendant');\n    this.element.removeAttribute('tabindex');\n    this.unWireEvents();\n    this.wireEditingEvents(false);\n\n    if (!this.disabled) {\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n\n    this.setCssClass(this.cssClass, null);\n    this.setDragAndDrop(false);\n    this.setFullRow(false);\n\n    if (this.ulElement && this.ulElement.parentElement) {\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\n   * then the nodes are added as children of the given parentID or in the root level of TreeView.\n   * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\n   * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n   */\n\n\n  TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\n    if (isNOU(nodes)) {\n      return;\n    }\n\n    nodes = JSON.parse(JSON.stringify(nodes));\n    var dropLi = this.getElement(target);\n    this.preventExpand = preventTargetExpand;\n\n    if (this.fields.dataSource instanceof DataManager) {\n      if (!this.isOffline) {\n        this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\n      } else {\n        this.addSuccess(nodes, dropLi, index);\n      }\n    } else if (this.dataType === 2) {\n      this.addGivenNodes(nodes, dropLi, index);\n    } else {\n      if (dropLi) {\n        this.addGivenNodes(nodes, dropLi, index);\n      } else {\n        nodes = this.getSortedData(nodes);\n\n        for (var i = 0; i < nodes.length; i++) {\n          var pid = getValue(this.fields.parentID, nodes[i]);\n          dropLi = pid ? this.getElement(pid.toString()) : pid;\n          this.addGivenNodes([nodes[i]], dropLi, index);\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.updateCheckedStateFromDS();\n\n    if (this.showCheckBox && dropLi) {\n      this.ensureParentCheckState(dropLi);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n      this.triggerEvent();\n    }\n  };\n  /**\n   * Instead of clicking on the TreeView node for editing, we can enable it by using\n   * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\n   * will be created for the particular node thus allowing us to edit it.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   */\n\n\n  TreeView.prototype.beginEdit = function (node) {\n    var ele = this.getElement(node);\n\n    if (isNOU(ele) || this.disabled) {\n      return;\n    }\n\n    this.createTextbox(ele, null);\n  };\n  /**\n   * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\n   * as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.checkAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, true);\n    }\n  };\n  /**\n   * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\n   * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\n   * a specific level of nodes, set **level** as argument to collapseAll method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\n   * @param  {number} level - TreeView nodes will collapse up to the given level.\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\n   */\n\n\n  TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNOU(nodes)) {\n      this.doGivenAction(nodes, COLLAPSIBLE, false);\n    } else {\n      if (level > 0) {\n        this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.collapseAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\n   * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   */\n\n\n  TreeView.prototype.disableNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      this.doDisableAction(nodes);\n    }\n  };\n  /**\n   * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   */\n\n\n  TreeView.prototype.enableNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      this.doEnableAction(nodes);\n    }\n  };\n  /**\n   * Ensures visibility of the TreeView node by using node ID or node element.\n   * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\n   * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\n   */\n\n\n  TreeView.prototype.ensureVisible = function (node) {\n    var liEle = this.getElement(node);\n\n    if (isNOU(liEle)) {\n      return;\n    }\n\n    var parents = this.parents(liEle, '.' + LISTITEM);\n    this.expandAll(parents);\n    setTimeout(function () {\n      liEle.scrollIntoView(true);\n    }, 450);\n  };\n  /**\n   * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\n   * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\n   * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   * @param  {number} level - TreeView nodes will expand up to the given level.\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\n   */\n\n\n  TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNOU(nodes)) {\n      this.doGivenAction(nodes, EXPANDABLE, true);\n    } else {\n      if (level > 0) {\n        this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.expandAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\n   * Gets all the checked nodes including child, whether it is loaded or not.\n   */\n\n\n  TreeView.prototype.getAllCheckedNodes = function () {\n    var checkNodes = this.checkedNodes;\n    return checkNodes;\n  };\n  /**\n  * Gets all the disabled nodes including child, whether it is loaded or not.\n  */\n\n\n  TreeView.prototype.getDisabledNodes = function () {\n    var disabledNodes = this.disableNode;\n    return disabledNodes;\n  };\n  /**\n   * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   */\n\n\n  TreeView.prototype.getNode = function (node) {\n    var ele = this.getElement(node);\n    return this.getNodeData(ele, true);\n  };\n  /**\n   * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\n   * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\n   * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\n   * of the corresponding node otherwise it will return the entire updated data source of TreeView.\n   * * The updated data source also contains custom attributes if you specified in data source.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   * @isGenericType true\n   */\n\n\n  TreeView.prototype.getTreeData = function (node) {\n    var id = this.getId(node);\n    this.updatePersistProp();\n\n    if (isNOU(id)) {\n      return this.treeData;\n    } else {\n      var data = this.getNodeObject(id);\n      return isNOU(data) ? [] : [data];\n    }\n  };\n  /**\n   * Moves the collection of nodes within the same TreeView based on target or its index position.\n   * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  {number} index - Specifies the index to place the moved nodes in the target element.\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n   */\n\n\n  TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\n    var dropLi = this.getElement(target);\n\n    if (isNOU(dropLi)) {\n      return;\n    }\n\n    for (var i = 0; i < sourceNodes.length; i++) {\n      var dragLi = this.getElement(sourceNodes[i]);\n\n      if (isNOU(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        continue;\n      }\n\n      this.preventExpand = preventTargetExpand;\n      this.dropAsChildNode(dragLi, dropLi, this, index);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    this.triggerEvent();\n  };\n  /**\n   * Refreshes a particular node of the TreeView.\n   * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\n   * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\n   */\n\n\n  TreeView.prototype.refreshNode = function (target, newData) {\n    if (isNOU(target) || isNOU(newData)) {\n      return;\n    }\n\n    var id;\n    var isRefreshChild = false;\n\n    if (this.dataType == 1 && newData.length > 1) {\n      isRefreshChild = true;\n    } else if (this.dataType == 2 && newData.length === 1) {\n      var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n\n      if (!isNOU(updatedChildValue)) {\n        isRefreshChild = true;\n      }\n    }\n\n    var liEle = this.getElement(target);\n    id = liEle ? liEle.getAttribute('data-uid') : target ? target.toString() : null;\n    this.refreshData = this.getNodeObject(id);\n    newData = JSON.parse(JSON.stringify(newData));\n    /* eslint-disable */\n\n    var newNodeData;\n    var parentData;\n\n    if (this.dataType == 1 && isRefreshChild) {\n      for (var k = 0; k < newData.length; k++) {\n        if (isNOU(newData[k][this.fields.parentID])) {\n          parentData = newData[k];\n          newData.splice(k, 1);\n          break;\n        }\n      }\n\n      newNodeData = extend({}, this.refreshData, parentData);\n    } else {\n      newNodeData = extend({}, this.refreshData, newData[0]);\n    }\n\n    if (isNOU(liEle)) {\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n      return;\n    }\n\n    this.isRefreshed = true;\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n    var ul = select('.' + PARENTITEM, liEle);\n    var childItems = getValue(this.fields.child.toString(), newNodeData);\n\n    if (isRefreshChild && ul || isRefreshChild && !isNOU(childItems)) {\n      var parentEle = liEle.parentElement;\n      var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);\n      remove(liEle);\n      parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n\n      if (isRefreshChild && ul) {\n        this.expandAll([id]);\n      }\n    } else {\n      var txtEle = select('.' + TEXTWRAP, liEle);\n      var newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n      var icon = select('div.' + ICON, txtEle);\n      var newIcon = select('div.' + ICON, newTextEle);\n\n      if (icon && newIcon) {\n        if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n          removeClass([newIcon], EXPANDABLE);\n          addClass([newIcon], COLLAPSIBLE);\n        } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n          removeClass([newIcon], COLLAPSIBLE);\n          addClass([newIcon], EXPANDABLE);\n        } else if (icon.classList.contains('interaction')) {\n          addClass([newIcon], 'interaction');\n        }\n      }\n\n      remove(txtEle);\n      var fullEle = select('.' + FULLROW, liEle);\n      fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n    }\n\n    liEle = this.getElement(target);\n\n    if (newNodeData[this.fields.tooltip]) {\n      liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n    }\n\n    if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n      var attr = {};\n      merge(attr, newNodeData[this.fields.htmlAttributes]);\n\n      if (attr.class) {\n        addClass([liEle], attr.class.split(' '));\n        delete attr.class;\n      } else {\n        attributes(liEle, attr);\n      }\n    }\n\n    if (this.selectedNodes.indexOf(id) !== -1) {\n      liEle.setAttribute('aria-selected', 'true');\n      addClass([liEle], ACTIVE);\n    }\n\n    this.isRefreshed = false;\n    this.triggerEvent();\n  };\n  /**\n   * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.removeNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n        this.crudOperation('delete', nodes);\n      } else {\n        this.deleteSuccess(nodes);\n      }\n    }\n  };\n  /**\n   * Replaces the text of the TreeView node with the given text.\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  {string} newText - Specifies the new text of TreeView node.\n   */\n\n\n  TreeView.prototype.updateNode = function (target, newText) {\n    var _this = this;\n\n    if (isNOU(target) || isNOU(newText) || !this.allowEditing) {\n      return;\n    }\n\n    var liEle = this.getElement(target);\n\n    if (isNOU(liEle)) {\n      return;\n    }\n\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var eventArgs = this.getEditEvent(liEle, null, null);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        if (_this.fields.dataSource instanceof DataManager && !_this.isOffline) {\n          _this.crudOperation('update', null, target, newText, null, null, false);\n        } else {\n          _this.appendNewText(liEle, txtEle, newText, false);\n        }\n      }\n    });\n  };\n  /**\n   * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\n   * as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.uncheckAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, false);\n    }\n  };\n\n  var TreeView_1;\n\n  __decorate([Property(false)], TreeView.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowEditing\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowMultiSelection\", void 0);\n\n  __decorate([Complex({}, NodeAnimationSettings)], TreeView.prototype, \"animation\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"checkedNodes\", void 0);\n\n  __decorate([Property('')], TreeView.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"disabled\", void 0);\n\n  __decorate([Property(null)], TreeView.prototype, \"dragArea\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"expandedNodes\", void 0);\n\n  __decorate([Property('Auto')], TreeView.prototype, \"expandOn\", void 0);\n\n  __decorate([Complex({}, FieldsSettings)], TreeView.prototype, \"fields\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"fullRowSelect\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"loadOnDemand\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"locale\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"nodeTemplate\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"selectedNodes\", void 0);\n\n  __decorate([Property('None')], TreeView.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"showCheckBox\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"autoCheck\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"fullRowNavigable\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"actionFailure\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"created\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"dataBound\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"dataSourceChanged\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"drawNode\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"keyPress\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeChecked\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeChecking\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeClicked\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeCollapsed\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeCollapsing\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragging\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragStart\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragStop\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDropped\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeEdited\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeEditing\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeExpanded\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeExpanding\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeSelected\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeSelecting\", void 0);\n\n  TreeView = TreeView_1 = __decorate([NotifyPropertyChanges], TreeView);\n  return TreeView;\n}(Component);\n\nexport { TreeView };","map":{"version":3,"sources":["C:/Users/Tshilidzi-PC/Documents/GitHub/Givee/Give-a-Lot/frontend/givealot/node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Component","isUndefined","Browser","compile","isNullOrUndefined","Property","NotifyPropertyChanges","ChildProperty","Complex","Event","EventHandler","KeyboardEvents","rippleEffect","Animation","remove","Draggable","Droppable","getElement","addClass","removeClass","closest","matches","detach","select","selectAll","isVisible","append","DataManager","Query","isNOU","Touch","getValue","setValue","extend","merge","attributes","ListBase","createCheckBox","rippleMouseHandler","Input","createSpinner","showSpinner","hideSpinner","ROOT","CONTROL","COLLAPSIBLE","EXPANDABLE","LISTITEM","LISTTEXT","PARENTITEM","HOVER","ACTIVE","LOAD","PROCESS","ICON","TEXTWRAP","INPUT","INPUTGROUP","TREEINPUT","EDITING","RTL","INTERACTION","DRAGITEM","DROPPABLE","DRAGGING","SIBLING","DROPIN","DROPNEXT","DROPOUT","NODROP","FULLROWWRAP","FULLROW","SELECTED","EXPANDED","NODECOLLAPSED","DISABLE","DROPCOUNT","CHECK","INDETERMINATE","CHECKBOXWRAP","CHECKBOXFRAME","CHECKBOXRIPPLE","RIPPLE","RIPPLEELMENT","FOCUS","IMAGE","BIGGER","SMALL","CHILD","ITEM_ANIMATION_ACTIVE","DISABLED","treeAriaAttr","treeRole","itemRole","listRole","itemText","wrapperRole","FieldsSettings","_super","apply","ActionSettings","NodeAnimationSettings","effect","duration","easing","TreeView","options","element","_this","call","isRefreshed","preventExpand","checkedElement","disableNode","validArr","validNodes","expandChildren","isFieldChange","changeDataSource","hasTemplate","mouseDownStatus","TreeView_1","getModuleName","preRender","checkActionNodes","parentNodeCheck","dragStartAction","isAnimate","keyConfigs","escape","end","enter","f2","home","moveDown","moveLeft","moveRight","moveUp","ctrlDown","ctrlUp","ctrlEnter","ctrlHome","ctrlEnd","ctrlA","shiftDown","shiftUp","shiftEnter","shiftHome","shiftEnd","csDown","csUp","csEnter","csHome","csEnd","space","listBaseOption","expandCollapse","showIcon","expandIconClass","ariaAttributes","expandIconPosition","itemCreated","e","beforeNodeCreate","enableHtmlSanitizer","itemNavigable","fullRowNavigable","updateListProp","fields","aniObj","treeList","isLoaded","isInitalExpand","index","setTouchClass","selectedNodes","setProperties","checkedNodes","expandedNodes","getPersistData","keyEntity","addOnPersist","render","initialRender","initialize","setDataBinding","setDisabledMode","setExpandOnType","disabled","setRipple","wireEditingEvents","allowEditing","setDragAndDrop","allowDragAndDrop","wireEvents","renderComplete","setAttribute","id","setCssClass","cssClass","setEnableRtl","setFullRow","fullRowSelect","nodeTemplateFn","templateComplier","nodeTemplate","classList","add","enableRtl","tempStr","rippleModel","selector","ignore","rippleFn","iconModel","isCenterRipple","rippleIconFn","isEnabled","setMultiSelect","firstUl","removeAttribute","template","document","querySelectorAll","querySelector","innerHTML","trim","undefined","push","dataSource","isOffline","offline","ready","then","pop","treeData","result","isNumberTypeId","getType","setRootData","renderItems","finalize","catch","trigger","error","executeQuery","getQuery","rootData","JSON","parse","stringify","mapper","value","columns","query","prop","getActualProperties","_i","_a","keys","col","indexOf","from","tableName","clone","addSorting","sortOrder","text","parentID","where","parseFloat","dataType","getDataType","groupedData","getGroupedData","rootItems","getChildNodes","isSorted","level","sortedData","getSortedData","ulElement","createList","createElement","appendChild","rootNodes","loadOnDemand","renderChildNodes","parentEle","finalizeNode","parentCheckData","updateCheckedStateFromDS","autoCheck","showCheckBox","updateParentCheckState","resultData","executeLocal","isChecked","resultId","toString","resultPId","hasChildren","id_1","childData","child","childId","mapper_1","checkState","getCheckedNodeDetails","checkIndeterminateState","checkedId","checkedData","fieldId","childItems","updateChildCheckState","checkNodes","count","len","childNodes","preElement","check","changeState","indeterminate","childCheckedElement","node","nodeId","getAttribute","j","nodeCheck","data","ariaChecked","checkedParent","checkedChild","subChildItems","checkboxEle","touchClass","icon","item","insertBefore","checkValue","curData","addCheck","frame","frameMouseHandler","createFullRow","allowMultiSelection","contains","addActionClass","selected","expanded","textEle","dataId","renderNodeTemplate","eventArgs","nodeData","rippleSpan","parentElement","action","actionValue","ds","groupBy","cusQuery","group","getDataSource","grpItem","itemObj","items","list","iNodes","k","sNodes","selectNode","cNodes","disableExpandAttr","eNodes","updateList","updateCheckedProp","nodes","concat","ensureIndeterminate","liElement","ensureParentCheckState","ensureChildCheckState","indeterminateNodes","checkBoxEle","getElementsByClassName","parentUL","currentParent","childElement","checkBoxes","parentCheck","childCheck","expandState","checkedState","currentLoadData","ele","splice","isNodeChecked","doCheckBoxAction","doCheck","li","liEle","setValidCheckedNode","dynamicCheckState","updateField","checkBox","validateCheckNode","updateFieldChecked","checkbox","currLi","nodeDetails","getNodeData","parent_1","updateIndeterminate","subChild","updateChildIndeterminate","indeterminateData","getTreeData","parent","subId","childElementCheck","innerChild","wrapper","state","isPrevent","isAdd","getCheckEvent","observedArgs","cancel","nodeCheckAction","ariaState","frameSpan","removeCheck","ensureStateChange","checked","isInteracted","firstNode","updateIdAttr","renderReactTemplates","hasPid","doExpandAction","eUids","expandGivenNodes","eNode","expandAction","afterFinalized","arr","proxy","expandCallback","eUid","callback","doSelectionAction","sUids","sNode","selectGivenNodes","clickHandler","event","originalEvent","preventContextMenu","which","rippleElement","rippleIcons","removeHover","setFocusElement","checkWrapper","checkElement","triggerClickEvent","collapseNode","toggleSelect","nodeCheckedEvent","isCheck","expandNode","loaded","start_1","end_1","proxy_1","ul_1","liEle_1","setHeight","activeElement_1","animate","name","animation","expand","timingFunction","begin","args","style","overflow","HTMLElement","offsetHeight","progress","display","animateHeight","expandedNode","ul","height","addExpand","expandArgs","getExpandEvent","colArgs","nodeCollapseAction","start","activeElement","collapse","collapsedNode","removeExpand","toRemove","visibility","remaining","timeStamp","currentHeight","parentLi","expandChild","eicon","parents","mapper_2","getChildFields","loadChild","setSelectionForChildNodes","ensureCheckNode","disableTreeNodes","renderSubChild","getNodeObject","doDisableAction","getFields","nodeLevel","dataLevel","getChildMapper","obj","parentId","isRoot","getChildGroup","objlen","cIcons","curLi","multiSelect","ctrlKey","isActive","unselectNode","getSelectEvent","nodeSelectAction","removeSelectAll","shiftKey","startNode","startIndex","liList","endIndex","temp","currNode","addSelect","nodeUnselectAction","removeSelect","focusedNode","getFocusedNode","selectedLI","selectedLI_1","expandOnType","expandOn","isDevice","expandHandler","expandCollapseAction","nodeExpandAction","nodeName","liEles","getId","icon_1","keyActionHandler","inpEle","blur","focus","oldText","preventDefault","checkNode","openNode","shiftKeySelect","navigateNode","navigateRootNode","createTextbox","navigateToFocus","isUp","focusNode","pos","getBoundingClientRect","getScrollParent","parentPos","bottom","scrollTop","top","isVisibleInViewport","scrollIntoView","txtWrap","left","window","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","scrollHeight","isTowards","nextNode","getNextNode","getPrevNode","checkWrap","nodeCheckingAction","allCheckNode","parentIndex","getChildItems","childStateChange","childIsCheck","newCheck","validateCheck","length_1","childId_1","toBeOpened","focusNextNode","setFocus","isBackwards","rootNode","getRootNode","getEndNode","selectedItem","fNode","firstElementChild","lastChild","previousSibling","nextSibling","prevNode","endNode","preNode","focusIn","focusOut","onMouseOver","currentLi","setHover","onMouseLeave","hoveredNode","fromDS","getText","pNode","parentNode","pid","nodeFields","textContent","tempArr","isStringTemplate","slice","destroyTemplate","clearTemplate","reRenderNodes","isIE","removeChild","oldClass","newClass","split","editingHandler","oldInpEle","updateOldText","innerEle","className","attrs","getEditEvent","outerHTML","inpWidth","offsetWidth","innerHtml","inputObj","createInput","properties","container","inputEle","setSelectionRange","wireInputEvents","editData","editFields","inputFocusOut","newText","txtEle","crudOperation","appendNewText","isInput","updateText","triggerEvent","newData","innerText","getChildNodeObject","newList","toBind","initializeDrag","destroyDrag","virtualEle","dragObj","enableTailMode","enableAutoScroll","dragArea","dragTarget","helper","sender","dragRoot","dragWrap","dragLi","nextElementSibling","isSameNode","cloneEle","cloneNode","children","nLen","cNode","body","cursor","dragData","dragStart","listItem","parseInt","getDragEvent","draggedNode","intDestroy","dragCancelAction","drag","cursorAt","targetTouches","dragAction","dragStop","removeVirtualEle","dropTarget","preventTargetExpand","dropRoot","isHelperElement","dragParent","draggedParentNode","dropObj","out","over","drop","dropAction","dropWrap","dropLi","isDescendant","templateTarget","offsetY","offsetX","appendIndicator","renderVirtualEle","dropIndicator","virEle","dragInstance","draggable","ej2_instances","droppedElement","appendNode","draggedElement","dropAsSiblingNode","dropAsChildNode","dropUl","dragParentUl","dragParentLi","pre","moveData","updateElement","updateAriaLevel","updateInstance","dropParentUl","expandParent","childLi","dropParentLi","removedData","updateChildField","refId","getDataPos","currPid","removeChildNodes","addChildData","dropIcon","generateIcon","generateUL","childElementCount","dragIcon","updateChildAriaLevel","sibEle","destroy","dragNode","dropData","draggedNodeData","newParent","dragLiParent","targetParent","indexValue","iconCss","iconClass","position","dropTar","parent_2","parent_3","hasAttribute","clonedNode","droppedNode","droppedNodeData","dropIndex","dropLevel","addFullRow","toAdd","rowDiv","addMultiSelect","liEles_1","liEles_2","collapseByLevel","excludeHiddenNodes","getVisibleNodes","collapseAllNodes","expandByLevel","expandAllNodes","eIcons","vNodes","removeNode","removeData","updateSelectedNodes","updateExpandedNodes","dm","newId","currId","doGivenAction","toExpand","addGivenNodes","isRemote","dropEle","updateMapper","createListItemFromJson","refNode","url","navigateUrl","updated","childObj","nodeType","validID","checkValidId","doEnableAction","strNodes","filter","filterNestedChild","updatePersistProp","removeField","sleNodes","l","slelen","enodes","nodelen","cnodes","m","names","field","getMapperProp","fieldName","proxy_2","touchEditObj","tap","isDoubleTapped","tapCount","wireClickEvent","proxy_3","touchClickObj","wireExpandOnEvent","proxy_4","touchExpandObj","mouseDownHandler","keyboardModule","keyAction","bind","eventName","unWireEvents","matched","el","secondTap","firstTap","width","setCheckedNodes","uncheckAll","setIndeterminate","checkAll","setChildCheckState","parent_4","a","updatePosition","isRefreshChild","childValue","updateChildPosition","currID","found","dynamicState","operation","newNode","prevent","matchedArr","crud","changes","addedRecords","deletedRecords","changedRecords","nodesID","fromTable","saveChanges","deleteSuccess","dmFailure","update","editSucess","insert","addSuccess","updatePreviousText","onPropertyChanged","newProp","oldProp","collapseAll","onLoaded","addNodes","beginEdit","disableNodes","enableNodes","ensureVisible","expandAll","setTimeout","getAllCheckedNodes","getDisabledNodes","disabledNodes","getNode","moveNodes","sourceNodes","refreshNode","updatedChildValue","refreshData","newNodeData","parentData","newliEle","newTextEle","newIcon","fullEle","tooltip","htmlAttributes","attr","class","removeNodes","updateNode"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, isUndefined, Browser, compile, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { rippleEffect, Animation, remove } from '@syncfusion/ej2-base';\nimport { Draggable, Droppable } from '@syncfusion/ej2-base';\nimport { getElement } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, closest, matches, detach, select, selectAll, isVisible, append } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined as isNOU, Touch, getValue, setValue, extend, merge, attributes } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nvar ROOT = 'e-treeview';\nvar CONTROL = 'e-control';\nvar COLLAPSIBLE = 'e-icon-collapsible';\nvar EXPANDABLE = 'e-icon-expandable';\nvar LISTITEM = 'e-list-item';\nvar LISTTEXT = 'e-list-text';\nvar PARENTITEM = 'e-list-parent';\nvar HOVER = 'e-hover';\nvar ACTIVE = 'e-active';\nvar LOAD = 'e-icons-spinner';\nvar PROCESS = 'e-process';\nvar ICON = 'e-icons';\nvar TEXTWRAP = 'e-text-content';\nvar INPUT = 'e-input';\nvar INPUTGROUP = 'e-input-group';\nvar TREEINPUT = 'e-tree-input';\nvar EDITING = 'e-editing';\nvar RTL = 'e-rtl';\nvar INTERACTION = 'e-interaction';\nvar DRAGITEM = 'e-drag-item';\nvar DROPPABLE = 'e-droppable';\nvar DRAGGING = 'e-dragging';\nvar SIBLING = 'e-sibling';\nvar DROPIN = 'e-drop-in';\nvar DROPNEXT = 'e-drop-next';\nvar DROPOUT = 'e-drop-out';\nvar NODROP = 'e-no-drop';\nvar FULLROWWRAP = 'e-fullrow-wrap';\nvar FULLROW = 'e-fullrow';\nvar SELECTED = 'e-selected';\nvar EXPANDED = 'e-expanded';\nvar NODECOLLAPSED = 'e-node-collapsed';\nvar DISABLE = 'e-disable';\nvar DROPCOUNT = 'e-drop-count';\nvar CHECK = 'e-check';\nvar INDETERMINATE = 'e-stop';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECKBOXRIPPLE = 'e-ripple-container';\nvar RIPPLE = 'e-ripple';\nvar RIPPLEELMENT = 'e-ripple-element';\nvar FOCUS = 'e-node-focus';\nvar IMAGE = 'e-list-img';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar CHILD = 'e-has-child';\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nvar DISABLED = 'e-disabled';\nvar treeAriaAttr = {\n    treeRole: 'tree',\n    itemRole: 'treeitem',\n    listRole: 'group',\n    itemText: '',\n    wrapperRole: ''\n};\n/**\n * Configures the fields to bind to the properties of node in the TreeView component.\n */\nvar FieldsSettings = /** @class */ (function (_super) {\n    __extends(FieldsSettings, _super);\n    function FieldsSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('child')\n    ], FieldsSettings.prototype, \"child\", void 0);\n    __decorate([\n        Property([])\n    ], FieldsSettings.prototype, \"dataSource\", void 0);\n    __decorate([\n        Property('expanded')\n    ], FieldsSettings.prototype, \"expanded\", void 0);\n    __decorate([\n        Property('hasChildren')\n    ], FieldsSettings.prototype, \"hasChildren\", void 0);\n    __decorate([\n        Property('htmlAttributes')\n    ], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n    __decorate([\n        Property('iconCss')\n    ], FieldsSettings.prototype, \"iconCss\", void 0);\n    __decorate([\n        Property('id')\n    ], FieldsSettings.prototype, \"id\", void 0);\n    __decorate([\n        Property('imageUrl')\n    ], FieldsSettings.prototype, \"imageUrl\", void 0);\n    __decorate([\n        Property('isChecked')\n    ], FieldsSettings.prototype, \"isChecked\", void 0);\n    __decorate([\n        Property('parentID')\n    ], FieldsSettings.prototype, \"parentID\", void 0);\n    __decorate([\n        Property(null)\n    ], FieldsSettings.prototype, \"query\", void 0);\n    __decorate([\n        Property('selected')\n    ], FieldsSettings.prototype, \"selected\", void 0);\n    __decorate([\n        Property(null)\n    ], FieldsSettings.prototype, \"tableName\", void 0);\n    __decorate([\n        Property('text')\n    ], FieldsSettings.prototype, \"text\", void 0);\n    __decorate([\n        Property('tooltip')\n    ], FieldsSettings.prototype, \"tooltip\", void 0);\n    __decorate([\n        Property('navigateUrl')\n    ], FieldsSettings.prototype, \"navigateUrl\", void 0);\n    return FieldsSettings;\n}(ChildProperty));\nexport { FieldsSettings };\n/**\n * Configures animation settings for the TreeView component.\n */\nvar ActionSettings = /** @class */ (function (_super) {\n    __extends(ActionSettings, _super);\n    function ActionSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('SlideDown')\n    ], ActionSettings.prototype, \"effect\", void 0);\n    __decorate([\n        Property(400)\n    ], ActionSettings.prototype, \"duration\", void 0);\n    __decorate([\n        Property('linear')\n    ], ActionSettings.prototype, \"easing\", void 0);\n    return ActionSettings;\n}(ChildProperty));\nexport { ActionSettings };\n/**\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\n */\nvar NodeAnimationSettings = /** @class */ (function (_super) {\n    __extends(NodeAnimationSettings, _super);\n    function NodeAnimationSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Complex({ effect: 'SlideUp', duration: 400, easing: 'linear' }, ActionSettings)\n    ], NodeAnimationSettings.prototype, \"collapse\", void 0);\n    __decorate([\n        Complex({ effect: 'SlideDown', duration: 400, easing: 'linear' }, ActionSettings)\n    ], NodeAnimationSettings.prototype, \"expand\", void 0);\n    return NodeAnimationSettings;\n}(ChildProperty));\nexport { NodeAnimationSettings };\n/**\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\n * functions to perform edit, drag and drop, selection with check-box, and more.\n * ```html\n *  <div id=\"tree\"></div>\n * ```\n * ```typescript\n *  let treeObj: TreeView = new TreeView();\n *  treeObj.appendTo('#tree');\n * ```\n */\nvar TreeView = /** @class */ (function (_super) {\n    __extends(TreeView, _super);\n    function TreeView(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.isRefreshed = false;\n        _this.preventExpand = false;\n        _this.checkedElement = [];\n        _this.disableNode = [];\n        // eslint-disable-next-line\n        _this.validArr = [];\n        _this.validNodes = [];\n        _this.expandChildren = [];\n        _this.isFieldChange = false;\n        _this.changeDataSource = false;\n        _this.hasTemplate = false;\n        _this.mouseDownStatus = false;\n        return _this;\n    }\n    TreeView_1 = TreeView;\n    /**\n     * Get component name.\n     *\n     * @returns {string} - returns module name.\n     * @private\n     */\n    TreeView.prototype.getModuleName = function () {\n        return 'treeview';\n    };\n    /**\n     * Initialize the event handler\n     *\n     * @returns {void}\n     */\n    TreeView.prototype.preRender = function () {\n        var _this = this;\n        this.checkActionNodes = [];\n        this.parentNodeCheck = [];\n        this.dragStartAction = false;\n        this.isAnimate = false;\n        this.keyConfigs = {\n            escape: 'escape',\n            end: 'end',\n            enter: 'enter',\n            f2: 'f2',\n            home: 'home',\n            moveDown: 'downarrow',\n            moveLeft: 'leftarrow',\n            moveRight: 'rightarrow',\n            moveUp: 'uparrow',\n            ctrlDown: 'ctrl+downarrow',\n            ctrlUp: 'ctrl+uparrow',\n            ctrlEnter: 'ctrl+enter',\n            ctrlHome: 'ctrl+home',\n            ctrlEnd: 'ctrl+end',\n            ctrlA: 'ctrl+A',\n            shiftDown: 'shift+downarrow',\n            shiftUp: 'shift+uparrow',\n            shiftEnter: 'shift+enter',\n            shiftHome: 'shift+home',\n            shiftEnd: 'shift+end',\n            csDown: 'ctrl+shift+downarrow',\n            csUp: 'ctrl+shift+uparrow',\n            csEnter: 'ctrl+shift+enter',\n            csHome: 'ctrl+shift+home',\n            csEnd: 'ctrl+shift+end',\n            space: 'space'\n        };\n        this.listBaseOption = {\n            expandCollapse: true,\n            showIcon: true,\n            expandIconClass: EXPANDABLE,\n            ariaAttributes: treeAriaAttr,\n            expandIconPosition: 'Left',\n            itemCreated: function (e) {\n                _this.beforeNodeCreate(e);\n            },\n            enableHtmlSanitizer: this.enableHtmlSanitizer,\n            itemNavigable: this.fullRowNavigable\n        };\n        this.updateListProp(this.fields);\n        this.aniObj = new Animation({});\n        this.treeList = [];\n        this.isLoaded = false;\n        this.isInitalExpand = false;\n        this.expandChildren = [];\n        this.index = 0;\n        this.setTouchClass();\n        if (isNOU(this.selectedNodes)) {\n            this.setProperties({ selectedNodes: [] }, true);\n        }\n        if (isNOU(this.checkedNodes)) {\n            this.setProperties({ checkedNodes: [] }, true);\n        }\n        if (isNOU(this.expandedNodes)) {\n            this.setProperties({ expandedNodes: [] }, true);\n        }\n        else {\n            this.isInitalExpand = true;\n        }\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - returns the persisted data\n     * @hidden\n     */\n    TreeView.prototype.getPersistData = function () {\n        var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * To Initialize the control rendering\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeView.prototype.render = function () {\n        this.initialRender = true;\n        this.initialize();\n        this.setDataBinding(false);\n        this.setDisabledMode();\n        this.setExpandOnType();\n        if (!this.disabled) {\n            this.setRipple();\n        }\n        this.wireEditingEvents(this.allowEditing);\n        this.setDragAndDrop(this.allowDragAndDrop);\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.initialRender = false;\n        this.renderComplete();\n    };\n    TreeView.prototype.initialize = function () {\n        this.element.setAttribute('role', 'tree');\n        this.element.setAttribute('tabindex', '0');\n        this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n        this.setCssClass(null, this.cssClass);\n        this.setEnableRtl();\n        this.setFullRow(this.fullRowSelect);\n        this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n    };\n    TreeView.prototype.setDisabledMode = function () {\n        if (this.disabled) {\n            this.element.classList.add(DISABLED);\n        }\n        else {\n            this.element.classList.remove(DISABLED);\n        }\n    };\n    TreeView.prototype.setEnableRtl = function () {\n        (this.enableRtl ? addClass : removeClass)([this.element], RTL);\n    };\n    TreeView.prototype.setRipple = function () {\n        var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n        var rippleModel = {\n            selector: tempStr,\n            ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n        };\n        this.rippleFn = rippleEffect(this.element, rippleModel);\n        var iconModel = {\n            selector: '.' + TEXTWRAP + ' > .' + ICON,\n            isCenterRipple: true\n        };\n        this.rippleIconFn = rippleEffect(this.element, iconModel);\n    };\n    TreeView.prototype.setFullRow = function (isEnabled) {\n        (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);\n    };\n    TreeView.prototype.setMultiSelect = function (isEnabled) {\n        var firstUl = select('.' + PARENTITEM, this.element);\n        if (isEnabled) {\n            firstUl.setAttribute('aria-multiselectable', 'true');\n        }\n        else {\n            firstUl.removeAttribute('aria-multiselectable');\n        }\n    };\n    // eslint-disable-next-line\n    TreeView.prototype.templateComplier = function (template) {\n        if (template) {\n            this.hasTemplate = true;\n            // eslint-disable-next-line\n            var e = void 0;\n            this.element.classList.add(INTERACTION);\n            try {\n                if (document.querySelectorAll(template).length) {\n                    return compile(document.querySelector(template).innerHTML.trim());\n                }\n            }\n            catch (e) {\n                return compile(template);\n            }\n        }\n        this.element.classList.remove(INTERACTION);\n        return undefined;\n    };\n    TreeView.prototype.setDataBinding = function (changeDataSource) {\n        var _this = this;\n        this.treeList.push('false');\n        if (this.fields.dataSource instanceof DataManager) {\n            /* eslint-disable */\n            this.isOffline = this.fields.dataSource.dataSource.offline;\n            if (this.fields.dataSource.ready) {\n                this.fields.dataSource.ready.then(function (e) {\n                    /* eslint-disable */\n                    _this.isOffline = _this.fields.dataSource.dataSource.offline;\n                    if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {\n                        _this.treeList.pop();\n                        _this.treeData = e.result;\n                        _this.isNumberTypeId = _this.getType();\n                        _this.setRootData();\n                        _this.renderItems(true);\n                        if (_this.treeList.length === 0 && !_this.isLoaded) {\n                            _this.finalize();\n                        }\n                    }\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n            else {\n                this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\n                    _this.treeList.pop();\n                    _this.treeData = e.result;\n                    _this.isNumberTypeId = _this.getType();\n                    _this.setRootData();\n                    if (changeDataSource) {\n                        _this.changeDataSource = true;\n                    }\n                    _this.renderItems(true);\n                    _this.changeDataSource = false;\n                    if (_this.treeList.length === 0 && !_this.isLoaded) {\n                        _this.finalize();\n                    }\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            this.treeList.pop();\n            if (isNOU(this.fields.dataSource)) {\n                this.rootData = this.treeData = [];\n            }\n            else {\n                this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n                this.setRootData();\n            }\n            this.isNumberTypeId = this.getType();\n            this.renderItems(false);\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    };\n    TreeView.prototype.getQuery = function (mapper, value) {\n        if (value === void 0) { value = null; }\n        var columns = [];\n        var query;\n        if (!mapper.query) {\n            query = new Query();\n            var prop = this.getActualProperties(mapper);\n            for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\n                var col = _a[_i];\n                if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col]\n                    && col !== 'url' && columns.indexOf(mapper[col]) === -1) {\n                    columns.push(mapper[col]);\n                }\n            }\n            query.select(columns);\n            if (prop.hasOwnProperty('tableName')) {\n                query.from(mapper.tableName);\n            }\n        }\n        else {\n            query = mapper.query.clone();\n        }\n        ListBase.addSorting(this.sortOrder, mapper.text, query);\n        if (!isNOU(value) && !isNOU(mapper.parentID)) {\n            query.where(mapper.parentID, 'equal', (this.isNumberTypeId ? parseFloat(value) : value));\n        }\n        return query;\n    };\n    TreeView.prototype.getType = function () {\n        return this.treeData[0] ? ((typeof getValue(this.fields.id, this.treeData[0]) === 'number') ? true : false) : false;\n    };\n    TreeView.prototype.setRootData = function () {\n        this.dataType = this.getDataType(this.treeData, this.fields);\n        if (this.dataType === 1) {\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n            var rootItems = this.getChildNodes(this.treeData, undefined, true);\n            if (isNOU(rootItems)) {\n                this.rootData = [];\n            }\n            else {\n                this.rootData = rootItems;\n            }\n        }\n        else {\n            this.rootData = this.treeData;\n        }\n    };\n    TreeView.prototype.renderItems = function (isSorted) {\n        /* eslint-disable */\n        this.listBaseOption.ariaAttributes.level = 1;\n        var sortedData = this.getSortedData(this.rootData);\n        this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\n        this.element.appendChild(this.ulElement);\n        var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n        if (this.loadOnDemand === false) {\n            var i = 0;\n            while (i < rootNodes.length) {\n                this.renderChildNodes(rootNodes[i], true, null, true);\n                i++;\n            }\n        }\n        var parentEle = selectAll('.' + PARENTITEM, this.element);\n        if ((parentEle.length === 1 && (rootNodes && rootNodes.length !== 0)) || this.loadOnDemand) {\n            this.finalizeNode(this.element);\n        }\n        this.parentNodeCheck = [];\n        this.parentCheckData = [];\n        this.updateCheckedStateFromDS();\n        if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n            this.updateParentCheckState();\n        }\n    };\n    /**\n     * Update the checkedNodes from datasource at initial rendering\n     */\n    TreeView.prototype.updateCheckedStateFromDS = function (id) {\n        this.validNodes = [];\n        if (this.treeData && this.showCheckBox) {\n            if (this.dataType === 1) {\n                var mapper = this.fields;\n                var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n                for (var i = 0; i < resultData.length; i++) {\n                    var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n                    var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n                    if (this.checkedNodes.indexOf(resultId) === -1 && !(this.isLoaded)) {\n                        this.checkedNodes.push(resultId);\n                    }\n                    if (resultData[i][this.fields.hasChildren]) {\n                        var id_1 = resultData[i][this.fields.id];\n                        var childData = new DataManager(this.treeData).\n                            executeLocal(new Query().where(mapper.parentID, 'equal', id_1, false));\n                        for (var child = 0; child < childData.length; child++) {\n                            var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n                            if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                                this.checkedNodes.push(childId);\n                            }\n                        }\n                    }\n                }\n                for (var i = 0; i < this.checkedNodes.length; i++) {\n                    var mapper_1 = this.fields;\n                    var checkState = new DataManager(this.treeData).\n                        executeLocal(new Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));\n                    if (checkState[0] && this.autoCheck) {\n                        this.getCheckedNodeDetails(mapper_1, checkState);\n                        this.checkIndeterminateState(checkState[0]);\n                    }\n                    if (checkState.length > 0) {\n                        var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n                            this.validNodes.push(checkedId);\n                        }\n                    }\n                    var checkedData = new DataManager(this.treeData).\n                        executeLocal(new Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));\n                    for (var index = 0; index < checkedData.length; index++) {\n                        var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n                            this.checkedNodes.push(checkedId);\n                        }\n                        if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n                            this.validNodes.push(checkedId);\n                        }\n                    }\n                }\n            }\n            else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\n                this.isOffline)) {\n                for (var index = 0; index < this.treeData.length; index++) {\n                    var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n                    if (this.treeData[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(fieldId) === -1) {\n                        this.checkedNodes.push(fieldId);\n                    }\n                    if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {\n                        this.validNodes.push(fieldId);\n                    }\n                    var childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n                    if (childItems) {\n                        this.updateChildCheckState(childItems, this.treeData[index]);\n                    }\n                }\n            }\n            this.setProperties({ checkedNodes: this.validNodes }, true);\n        }\n    };\n    /**\n     * To check whether the list data has sub child and to change the parent check state accordingly\n     */\n    TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\n        var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n        var count = 0;\n        var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n        var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n        if (!element && !parentEle) {\n            var len = this.parentNodeCheck.length;\n            if (this.parentNodeCheck.indexOf(id) === -1) {\n                this.parentNodeCheck.push(id);\n            }\n            var childNodes = this.getChildNodes(this.treeData, id);\n            for (var i = 0; i < childNodes.length; i++) {\n                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n                if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n                    this.checkedNodes.push(id);\n                }\n            }\n            var preElement = new DataManager(this.treeData).\n                executeLocal(new Query().where(mapper.id, 'equal', id, true));\n            this.getCheckedNodeDetails(mapper, preElement);\n        }\n        else if (parentEle) {\n            var check = select('.' + CHECK, parentEle);\n            if (!check) {\n                this.changeState(parentEle, 'indeterminate', null, true, true);\n            }\n        }\n    };\n    /**\n     * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\n     */\n    TreeView.prototype.updateParentCheckState = function () {\n        var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n        var childCheckedElement;\n        for (var i = 0; i < indeterminate.length; i++) {\n            var node = closest(indeterminate[i], '.' + LISTITEM);\n            var nodeId = node.getAttribute('data-uid').toString();\n            if (this.dataType === 1) {\n                childCheckedElement = new DataManager(this.treeData).\n                    executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n            }\n            else {\n                childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n            }\n            var count = 0;\n            if (childCheckedElement) {\n                for (var j = 0; j < childCheckedElement.length; j++) {\n                    var childId = childCheckedElement[j][this.fields.id].toString();\n                    if (this.checkedNodes.indexOf(childId) !== -1) {\n                        count++;\n                    }\n                }\n                if (count === childCheckedElement.length) {\n                    var nodeCheck = node.getAttribute('data-uid');\n                    if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n                        this.checkedNodes.push(nodeCheck);\n                    }\n                    this.changeState(node, 'check', null, true, true);\n                }\n                else if (count === 0 && this.checkedNodes.length === 0) {\n                    this.changeState(node, 'uncheck', null, true, true);\n                }\n            }\n        }\n    };\n    /**\n     * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\n     */\n    TreeView.prototype.checkIndeterminateState = function (data) {\n        var element;\n        if (this.dataType === 1) {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n        }\n        else {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n        }\n        if (element) {\n            var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n            if (ariaChecked !== 'true') {\n                this.changeState(element, 'indeterminate', null, true, true);\n            }\n        }\n        else if (this.dataType === 2) {\n            var len = this.parentNodeCheck.length;\n            if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n                this.parentNodeCheck.push(data[this.fields.id].toString());\n            }\n        }\n    };\n    /**\n     * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\n     */\n    TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\n        var count = 0;\n        var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n        for (var index = 0; index < childItems.length; index++) {\n            var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n            if (childItems[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(checkedChild) === -1) {\n                this.checkedNodes.push(checkedChild);\n            }\n            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n                this.checkedNodes.push(checkedChild);\n            }\n            if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                count++;\n            }\n            if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {\n                this.validNodes.push(checkedChild);\n            }\n            var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n            if (subChildItems) {\n                this.parentCheckData.push(treeData);\n                this.updateChildCheckState(subChildItems, childItems[index]);\n            }\n            if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n                this.checkedNodes.push(checkedParent);\n            }\n        }\n        if (count !== 0 && this.autoCheck) {\n            this.checkIndeterminateState(treeData);\n            for (var len = 0; len < this.parentCheckData.length; len++) {\n                if ((treeData !== this.parentCheckData[len]) && (this.parentCheckData[len])) {\n                    this.checkIndeterminateState(this.parentCheckData[len]);\n                }\n            }\n        }\n        this.parentCheckData = [];\n    };\n    TreeView.prototype.beforeNodeCreate = function (e) {\n        if (this.showCheckBox) {\n            var checkboxEle = createCheckBox(this.createElement, true, { cssClass: this.touchClass });\n            checkboxEle.setAttribute('role', 'checkbox');\n            var icon = select('div.' + ICON, e.item);\n            var id = e.item.getAttribute('data-uid');\n            e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNOU(icon) ? 0 : 1]);\n            var checkValue = getValue(e.fields.isChecked, e.curData);\n            if (this.checkedNodes.indexOf(id) > -1) {\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                checkboxEle.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else if (!isNOU(checkValue) && checkValue.toString() === 'true') {\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                checkboxEle.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else {\n                checkboxEle.setAttribute('aria-checked', 'false');\n            }\n            var frame = select('.' + CHECKBOXFRAME, checkboxEle);\n            EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n            EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n        }\n        if (this.fullRowSelect) {\n            this.createFullRow(e.item);\n        }\n        if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {\n            e.item.setAttribute('aria-selected', 'false');\n        }\n        var fields = e.fields;\n        this.addActionClass(e, fields.selected, SELECTED);\n        this.addActionClass(e, fields.expanded, EXPANDED);\n        if (!isNOU(this.nodeTemplateFn)) {\n            var textEle = e.item.querySelector('.' + LISTTEXT);\n            var dataId = e.item.getAttribute('data-uid');\n            textEle.innerHTML = '';\n            this.renderNodeTemplate(e.curData, textEle, dataId);\n        }\n        var eventArgs = {\n            node: e.item,\n            nodeData: e.curData,\n            text: e.text,\n        };\n        if (!this.isRefreshed) {\n            this.trigger('drawNode', eventArgs);\n        }\n    };\n    TreeView.prototype.frameMouseHandler = function (e) {\n        var rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n        rippleMouseHandler(e, rippleSpan);\n    };\n    TreeView.prototype.addActionClass = function (e, action, cssClass) {\n        var data = e.curData;\n        var actionValue = getValue(action, data);\n        if (!isNOU(actionValue) && actionValue.toString() !== 'false') {\n            e.item.classList.add(cssClass);\n        }\n    };\n    TreeView.prototype.getDataType = function (ds, mapper) {\n        if (this.fields.dataSource instanceof DataManager) {\n            for (var i = 0; i < ds.length; i++) {\n                if (this.isOffline) {\n                    if ((typeof mapper.child === 'string') && isNOU(getValue(mapper.child, ds[i])) && !isNOU(getValue(mapper.parentID, ds[i]))) {\n                        return 1;\n                    }\n                }\n                else if ((typeof mapper.child === 'string') && isNOU(getValue(mapper.child, ds[i]))) {\n                    return 1;\n                }\n            }\n            return 2;\n        }\n        for (var i = 0, len = ds.length; i < len; i++) {\n            if ((typeof mapper.child === 'string') && !isNOU(getValue(mapper.child, ds[i]))) {\n                return 2;\n            }\n            if (!isNOU(getValue(mapper.parentID, ds[i])) || !isNOU(getValue(mapper.hasChildren, ds[i]))) {\n                return 1;\n            }\n        }\n        return 1;\n    };\n    TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\n        var cusQuery = new Query().group(groupBy);\n        var ds = ListBase.getDataSource(dataSource, cusQuery);\n        var grpItem = [];\n        for (var j = 0; j < ds.length; j++) {\n            var itemObj = ds[j].items;\n            grpItem.push(itemObj);\n        }\n        return grpItem;\n    };\n    TreeView.prototype.getSortedData = function (list) {\n        if (list && this.sortOrder !== 'None') {\n            list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n        }\n        return list;\n    };\n    TreeView.prototype.finalizeNode = function (element) {\n        var iNodes = selectAll('.' + IMAGE, element);\n        for (var k = 0; k < iNodes.length; k++) {\n            iNodes[k].setAttribute('alt', IMAGE);\n        }\n        if (this.isLoaded) {\n            var sNodes = selectAll('.' + SELECTED, element);\n            for (var i = 0; i < sNodes.length; i++) {\n                this.selectNode(sNodes[i], null);\n                break;\n            }\n            removeClass(sNodes, SELECTED);\n        }\n        var cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n        for (var j = 0; j < cNodes.length; j++) {\n            var icon = select('div.' + ICON, cNodes[j]);\n            if (icon && icon.classList.contains(EXPANDABLE)) {\n                this.disableExpandAttr(cNodes[j]);\n            }\n        }\n        var eNodes = selectAll('.' + EXPANDED, element);\n        if (!this.isInitalExpand) {\n            for (var i = 0; i < eNodes.length; i++) {\n                this.renderChildNodes(eNodes[i]);\n            }\n        }\n        removeClass(eNodes, EXPANDED);\n        this.updateList();\n        if (this.isLoaded) {\n            this.updateCheckedProp();\n        }\n    };\n    TreeView.prototype.updateCheckedProp = function () {\n        if (this.showCheckBox) {\n            var nodes = [].concat([], this.checkedNodes);\n            this.setProperties({ checkedNodes: nodes }, true);\n        }\n    };\n    TreeView.prototype.ensureIndeterminate = function () {\n        if (this.autoCheck) {\n            var liElement = selectAll('li', this.element);\n            var ulElement = void 0;\n            for (var i = 0; i < liElement.length; i++) {\n                if (liElement[i].classList.contains(LISTITEM)) {\n                    ulElement = select('.' + PARENTITEM, liElement[i]);\n                    if (ulElement) {\n                        this.ensureParentCheckState(liElement[i]);\n                    }\n                    else {\n                        this.ensureChildCheckState(liElement[i]);\n                    }\n                }\n            }\n        }\n        else {\n            var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n            for (var i = 0; i < indeterminate.length; i++) {\n                indeterminate[i].classList.remove(INDETERMINATE);\n            }\n        }\n    };\n    TreeView.prototype.ensureParentCheckState = function (element) {\n        if (!isNOU(element)) {\n            if (element.classList.contains(ROOT)) {\n                return;\n            }\n            var ulElement = element;\n            if (element.classList.contains(LISTITEM)) {\n                ulElement = select('.' + PARENTITEM, element);\n            }\n            var checkedNodes = selectAll('.' + CHECK, ulElement);\n            var indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n            var nodes = selectAll('.' + LISTITEM, ulElement);\n            var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n            if (nodes.length === checkedNodes.length) {\n                this.changeState(checkBoxEle, 'check', null, true, true);\n            }\n            else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n                this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n            }\n            else if (checkedNodes.length === 0) {\n                this.changeState(checkBoxEle, 'uncheck', null, true, true);\n            }\n            var parentUL = closest(element, '.' + PARENTITEM);\n            if (!isNOU(parentUL)) {\n                var currentParent = closest(parentUL, '.' + LISTITEM);\n                this.ensureParentCheckState(currentParent);\n            }\n        }\n    };\n    TreeView.prototype.ensureChildCheckState = function (element, e) {\n        if (!isNOU(element)) {\n            var childElement = select('.' + PARENTITEM, element);\n            var checkBoxes = void 0;\n            if (!isNOU(childElement)) {\n                checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n                var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n                var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n                var childCheck = childElement.querySelectorAll('li');\n                var expandState = childElement.parentElement.getAttribute('aria-expanded');\n                var checkedState = void 0;\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    var childId = childCheck[index].getAttribute('data-uid');\n                    if (!isNOU(this.currentLoadData) && !isNOU(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n                        checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n                        if (this.ele !== -1) {\n                            checkedState = isChecked ? 'check' : 'uncheck';\n                        }\n                        if ((checkedState === 'uncheck') && (!isUndefined(this.parentNodeCheck) && this.autoCheck\n                            && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                            checkedState = 'indeterminate';\n                        }\n                    }\n                    else {\n                        var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n                        if (isChecked) {\n                            checkedState = 'check';\n                        }\n                        else if (isNodeChecked && !this.isLoaded) {\n                            checkedState = 'check';\n                        }\n                        else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n                            checkedState = 'check';\n                        }\n                        else if (childCheck[index].classList.contains(CHILD) && (!isUndefined(this.parentNodeCheck) && this.autoCheck\n                            && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else if (this.dataType === 1 && (!isUndefined(this.parentNodeCheck) && this.autoCheck &&\n                            (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else {\n                            checkedState = 'uncheck';\n                        }\n                    }\n                    this.changeState(checkBoxes[index], checkedState, e, true, true);\n                }\n            }\n            if (this.autoCheck && this.isLoaded) {\n                this.updateParentCheckState();\n            }\n        }\n    };\n    TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\n        var li = selectAll('.' + LISTITEM, this.element);\n        if (!isNOU(nodes)) {\n            for (var len = nodes.length; len >= 0; len--) {\n                var liEle = void 0;\n                if (nodes.length === 1) {\n                    liEle = this.getElement(nodes[len - 1]);\n                }\n                else {\n                    liEle = this.getElement(nodes[len]);\n                }\n                if (isNOU(liEle)) {\n                    var node = void 0;\n                    node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n                    if (node !== '' && doCheck && node) {\n                        this.setValidCheckedNode(node);\n                        this.dynamicCheckState(node, doCheck);\n                    }\n                    else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n                        var childItems = this.getChildNodes(this.treeData, node);\n                        if (childItems) {\n                            for (var i = 0; i < childItems.length; i++) {\n                                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n                                if (this.checkedNodes.indexOf(id) !== -1) {\n                                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                                }\n                            }\n                            if (this.parentNodeCheck.indexOf(node) !== -1) {\n                                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n                            }\n                        }\n                        if (node) {\n                            this.dynamicCheckState(node, doCheck);\n                        }\n                        this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                    }\n                    continue;\n                }\n                var checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n                this.validateCheckNode(checkBox, !doCheck, liEle, null);\n            }\n        }\n        else {\n            var checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n            if (this.loadOnDemand) {\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n                }\n            }\n            else {\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n                }\n            }\n        }\n        if (nodes) {\n            for (var j = 0; j < nodes.length; j++) {\n                var node = nodes[j] ? nodes[j].toString() : '';\n                if (!doCheck) {\n                    this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                }\n            }\n        }\n        if (this.autoCheck) {\n            this.updateParentCheckState();\n        }\n    };\n    TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\n        var currLi = closest(checkbox, '.' + LISTITEM);\n        var id = currLi.getAttribute('data-uid');\n        var nodeDetails = this.getNodeData(currLi);\n        if (nodeDetails.isChecked === 'true' && !doCheck) {\n            this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n    };\n    /**\n     * Changes the parent and child  check state while changing the checkedNodes via setmodel\n     */\n    TreeView.prototype.dynamicCheckState = function (node, doCheck) {\n        if (this.dataType === 1) {\n            var count = 0;\n            var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n            if (resultId[0]) {\n                var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n                var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n                var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\n                var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n                var check = parentElement ? select('.' + CHECK, parentElement) : null;\n                var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                var childNodes = this.getChildNodes(this.treeData, parent_1);\n                if (childNodes) {\n                    for (var i = 0; i < childNodes.length; i++) {\n                        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                }\n                if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (id === node) && this.autoCheck) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && element && (id === node) && !doCheck) {\n                    this.changeState(element, 'uncheck', null);\n                }\n                else if (this.checkedNodes.indexOf(node) !== -1 && element && (id === node) && doCheck) {\n                    this.changeState(element, 'check', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count !== 0) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count === 0) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else if (!element && !parentElement && (id === node) && this.autoCheck) {\n                    this.updateIndeterminate(node, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\n            this.isOffline)) {\n            var id = void 0;\n            var parentElement = void 0;\n            var check = void 0;\n            for (var i = 0; i < this.treeData.length; i++) {\n                id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n                parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                check = parentElement ? select('.' + CHECK, parentElement) : null;\n                if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                var subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n                if (subChild) {\n                    this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n                }\n            }\n        }\n    };\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\n     */\n    TreeView.prototype.updateIndeterminate = function (node, doCheck) {\n        var indeterminateData = this.getTreeData(node);\n        var count = 0;\n        var parent;\n        if (this.dataType === 1) {\n            parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n        }\n        var childNodes = this.getChildNodes(this.treeData, parent);\n        if (childNodes) {\n            for (var i = 0; i < childNodes.length; i++) {\n                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n            }\n        }\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n        if (parentElement && doCheck) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n            this.changeState(parentElement, 'uncheck', null);\n        }\n        else if (!parentElement) {\n            if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n            }\n            else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n                this.parentNodeCheck.push(parent);\n            }\n            else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1\n                && count !== 0) {\n                this.parentNodeCheck.push(parent);\n            }\n            this.updateIndeterminate(parent, doCheck);\n            if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n            }\n        }\n    };\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\n     */\n    TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\n        var count = 0;\n        for (var j = 0; j < subChild.length; j++) {\n            var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n            if (this.checkedNodes.indexOf(subId) !== -1) {\n                count++;\n            }\n            var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n            var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n            var check = parentElement ? select('.' + CHECK, parentElement) : null;\n            var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n            var childElementCheck = element ? select('.' + CHECK, element) : null;\n            if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (subId === node) && this.autoCheck) {\n                this.changeState(parentElement, 'indeterminate', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && (subId === node) && !doCheck) {\n                if (this.autoCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else {\n                    if (count !== 0) {\n                        this.changeState(parentElement, 'indeterminate', null);\n                    }\n                    else {\n                        this.changeState(parentElement, 'uncheck', null);\n                    }\n                }\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && element && (subId === node) && !doCheck) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && (subId === node) && this.autoCheck && count === 0\n                && !doCheck) {\n                indeterminate.classList.remove(INDETERMINATE);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && !element && check && (subId === node) && count === 0) {\n                this.changeState(parentElement, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (!element && !parentElement && (subId === node) || (this.parentNodeCheck.indexOf(parent) !== -1) && this.autoCheck) {\n                var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n                if (doCheck && count !== 0) {\n                    this.changeState(childElement, 'indeterminate', null);\n                }\n                else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n                    this.checkedNodes.push(parent);\n                }\n                else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                    this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n                }\n                if (this.parentNodeCheck.indexOf(parent) === -1) {\n                    this.parentNodeCheck.push(parent);\n                }\n            }\n            var innerChild = getValue(this.fields.child.toString(), subChild[j]);\n            if (innerChild) {\n                this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n            }\n        }\n    };\n    TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\n        var _this = this;\n        var eventArgs;\n        var currLi = closest(wrapper, '.' + LISTITEM);\n        if (!isPrevent) {\n            this.checkActionNodes = [];\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n                }\n            });\n        }\n        else {\n            this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n        }\n    };\n    TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n        var ariaState;\n        var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK);\n            this.addCheck(currLi);\n            ariaState = 'true';\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n            removeClass([frameSpan], [CHECK, INDETERMINATE]);\n            this.removeCheck(currLi);\n            ariaState = 'false';\n        }\n        else if (state === 'indeterminate' && this.autoCheck) {\n            frameSpan.classList.remove(CHECK);\n            frameSpan.classList.add(INDETERMINATE);\n            this.removeCheck(currLi);\n            ariaState = 'mixed';\n        }\n        ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n        if (!isNOU(ariaState)) {\n            wrapper.setAttribute('aria-checked', ariaState);\n        }\n        if (isAdd) {\n            var data = [].concat([], this.checkActionNodes);\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            if (isUndefined(isPrevent)) {\n                eventArgs.data = data;\n            }\n        }\n        if (doCheck !== undefined) {\n            this.ensureStateChange(currLi, doCheck);\n        }\n        if (!isPrevent) {\n            if (!isNOU(ariaState)) {\n                wrapper.setAttribute('aria-checked', ariaState);\n                eventArgs.data[0].checked = ariaState;\n                this.trigger('nodeChecked', eventArgs);\n                this.checkActionNodes = [];\n            }\n        }\n    };\n    TreeView.prototype.addCheck = function (liEle) {\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.checkedNodes.indexOf(id) === -1) {\n            this.checkedNodes.push(id);\n        }\n    };\n    TreeView.prototype.removeCheck = function (liEle) {\n        var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.checkedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.getCheckEvent = function (currLi, action, e) {\n        this.checkActionNodes.push(this.getNodeData(currLi));\n        var nodeData = this.checkActionNodes;\n        return { action: action, cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, data: nodeData };\n    };\n    TreeView.prototype.finalize = function () {\n        var firstUl = select('.' + PARENTITEM, this.element);\n        if (!isNullOrUndefined(firstUl)) {\n            firstUl.setAttribute('role', treeAriaAttr.treeRole);\n            this.setMultiSelect(this.allowMultiSelection);\n            var firstNode = select('.' + LISTITEM, this.element);\n            if (firstNode) {\n                addClass([firstNode], FOCUS);\n                this.updateIdAttr(null, firstNode);\n            }\n            this.renderReactTemplates();\n            this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n            this.doExpandAction();\n        }\n    };\n    TreeView.prototype.doExpandAction = function () {\n        var eUids = this.expandedNodes;\n        if (this.isInitalExpand && eUids.length > 0) {\n            this.setProperties({ expandedNodes: [] }, true);\n            /* eslint-disable */\n            if (this.fields.dataSource instanceof DataManager) {\n                this.expandGivenNodes(eUids);\n            }\n            else {\n                for (var i = 0; i < eUids.length; i++) {\n                    var eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n                    if (!isNOU(eNode)) {\n                        var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n                        if (!isNOU(icon)) {\n                            this.expandAction(eNode, icon, null);\n                        }\n                    }\n                    else {\n                        if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n                            this.expandChildren.push(eUids[i].toString());\n                        }\n                        continue;\n                    }\n                }\n                this.afterFinalized();\n            }\n        }\n        else {\n            this.afterFinalized();\n        }\n    };\n    TreeView.prototype.expandGivenNodes = function (arr) {\n        var proxy = this;\n        this.expandCallback(arr[this.index], function () {\n            proxy.index++;\n            if (proxy.index < arr.length) {\n                proxy.expandGivenNodes(arr);\n            }\n            else {\n                proxy.afterFinalized();\n            }\n        });\n    };\n    TreeView.prototype.expandCallback = function (eUid, callback) {\n        var eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n        if (!isNOU(eNode)) {\n            var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n            if (!isNOU(icon)) {\n                this.expandAction(eNode, icon, null, false, callback);\n            }\n            else {\n                callback();\n            }\n        }\n        else {\n            callback();\n        }\n    };\n    TreeView.prototype.afterFinalized = function () {\n        this.doSelectionAction();\n        this.updateCheckedProp();\n        this.isAnimate = true;\n        this.isInitalExpand = false;\n        if (!this.isLoaded || this.isFieldChange) {\n            var eventArgs = { data: this.treeData };\n            this.trigger('dataBound', eventArgs);\n        }\n        this.isLoaded = true;\n    };\n    TreeView.prototype.doSelectionAction = function () {\n        var sNodes = selectAll('.' + SELECTED, this.element);\n        var sUids = this.selectedNodes;\n        if (sUids.length > 0) {\n            this.setProperties({ selectedNodes: [] }, true);\n            for (var i = 0; i < sUids.length; i++) {\n                var sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n                if (sNode && !(sNode.classList.contains('e-active'))) {\n                    this.selectNode(sNode, null, true);\n                }\n                else {\n                    this.selectedNodes.push(sUids[i]);\n                }\n                if (!this.allowMultiSelection) {\n                    break;\n                }\n            }\n        }\n        else {\n            this.selectGivenNodes(sNodes);\n        }\n        removeClass(sNodes, SELECTED);\n    };\n    TreeView.prototype.selectGivenNodes = function (sNodes) {\n        for (var i = 0; i < sNodes.length; i++) {\n            if (!sNodes[i].classList.contains('e-disable')) {\n                this.selectNode(sNodes[i], null, true);\n            }\n            if (!this.allowMultiSelection) {\n                break;\n            }\n        }\n    };\n    TreeView.prototype.clickHandler = function (event) {\n        var target = event.originalEvent.target;\n        EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n        if (!target || this.dragStartAction) {\n            return;\n        }\n        else {\n            var classList = target.classList;\n            var li = closest(target, '.' + LISTITEM);\n            if (!li) {\n                return;\n            }\n            else if (event.originalEvent.which !== 3) {\n                var rippleElement = select('.' + RIPPLEELMENT, li);\n                var rippleIcons = select('.' + ICON, li);\n                this.removeHover();\n                this.setFocusElement(li);\n                if (this.showCheckBox && !li.classList.contains('e-disable')) {\n                    var checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n                    if (!isNOU(checkWrapper)) {\n                        var checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n                        this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n                        this.triggerClickEvent(event.originalEvent, li);\n                        return;\n                    }\n                }\n                if (classList.contains(EXPANDABLE)) {\n                    this.expandAction(li, target, event);\n                }\n                else if (classList.contains(COLLAPSIBLE)) {\n                    this.collapseNode(li, target, event);\n                }\n                else if (rippleElement && rippleIcons) {\n                    if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n                        this.expandAction(li, rippleIcons, event);\n                    }\n                    else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n                        this.collapseNode(li, rippleIcons, event);\n                    }\n                    else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n                else {\n                    if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n            }\n            this.triggerClickEvent(event.originalEvent, li);\n        }\n    };\n    TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\n        var currLi = closest(wrapper, '.' + LISTITEM);\n        var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n        eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n        this.trigger('nodeChecked', eventArgs);\n    };\n    TreeView.prototype.triggerClickEvent = function (e, li) {\n        var eventArgs = {\n            event: e,\n            node: li,\n        };\n        this.trigger('nodeClicked', eventArgs);\n    };\n    TreeView.prototype.expandNode = function (currLi, icon, loaded) {\n        var _this = this;\n        this.renderReactTemplates();\n        if (icon.classList.contains(LOAD)) {\n            this.hideSpinner(icon);\n        }\n        if (!this.initialRender) {\n            icon.classList.add('interaction');\n        }\n        if (loaded !== true || (loaded === true && currLi.classList.contains('e-expanded'))) {\n            if (this.preventExpand !== true) {\n                removeClass([icon], EXPANDABLE);\n                addClass([icon], COLLAPSIBLE);\n                var start_1 = 0;\n                var end_1 = 0;\n                var proxy_1 = this;\n                var ul_1 = select('.' + PARENTITEM, currLi);\n                var liEle_1 = currLi;\n                this.setHeight(liEle_1, ul_1);\n                var activeElement_1 = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n                if (this.isAnimate && !this.isRefreshed) {\n                    this.aniObj.animate(ul_1, {\n                        name: this.animation.expand.effect,\n                        duration: this.animation.expand.duration,\n                        timingFunction: this.animation.expand.easing,\n                        begin: function (args) {\n                            liEle_1.style.overflow = 'hidden';\n                            if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\n                            }\n                            start_1 = liEle_1.offsetHeight;\n                            end_1 = select('.' + TEXTWRAP, currLi).offsetHeight;\n                        },\n                        progress: function (args) {\n                            args.element.style.display = 'block';\n                            proxy_1.animateHeight(args, start_1, end_1);\n                        },\n                        end: function (args) {\n                            args.element.style.display = 'block';\n                            if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\n                            }\n                            _this.expandedNode(liEle_1, ul_1, icon);\n                        }\n                    });\n                }\n                else {\n                    this.expandedNode(liEle_1, ul_1, icon);\n                }\n            }\n        }\n        else {\n            var ul = select('.' + PARENTITEM, currLi);\n            ul.style.display = 'none';\n            if (this.fields.dataSource instanceof DataManager === true) {\n                this.preventExpand = false;\n            }\n        }\n        if (this.initialRender) {\n            icon.classList.add('interaction');\n        }\n    };\n    TreeView.prototype.expandedNode = function (currLi, ul, icon) {\n        ul.style.display = 'block';\n        currLi.style.display = 'block';\n        currLi.style.overflow = '';\n        currLi.style.height = '';\n        removeClass([icon], PROCESS);\n        this.addExpand(currLi);\n        if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, null);\n            this.trigger('nodeExpanded', this.expandArgs);\n        }\n    };\n    TreeView.prototype.addExpand = function (liEle) {\n        liEle.setAttribute('aria-expanded', 'true');\n        removeClass([liEle], NODECOLLAPSED);\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\n            this.expandedNodes.push(id);\n        }\n    };\n    TreeView.prototype.collapseNode = function (currLi, icon, e) {\n        var _this = this;\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            addClass([icon], PROCESS);\n        }\n        var colArgs;\n        if (this.isLoaded) {\n            colArgs = this.getExpandEvent(currLi, e);\n            this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\n                if (observedArgs.cancel) {\n                    removeClass([icon], PROCESS);\n                }\n                else {\n                    _this.nodeCollapseAction(currLi, icon, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeCollapseAction(currLi, icon, colArgs);\n        }\n    };\n    TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\n        var _this = this;\n        removeClass([icon], COLLAPSIBLE);\n        addClass([icon], EXPANDABLE);\n        var start = 0;\n        var end = 0;\n        var proxy = this;\n        var ul = select('.' + PARENTITEM, currLi);\n        var liEle = currLi;\n        var activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n        if (this.isAnimate) {\n            this.aniObj.animate(ul, {\n                name: this.animation.collapse.effect,\n                duration: this.animation.collapse.duration,\n                timingFunction: this.animation.collapse.easing,\n                begin: function (args) {\n                    liEle.style.overflow = 'hidden';\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n                    }\n                    start = select('.' + TEXTWRAP, currLi).offsetHeight;\n                    end = liEle.offsetHeight;\n                },\n                progress: function (args) {\n                    proxy.animateHeight(args, start, end);\n                },\n                end: function (args) {\n                    args.element.style.display = 'none';\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n                    }\n                    _this.collapsedNode(liEle, ul, icon, colArgs);\n                }\n            });\n        }\n        else {\n            this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n    };\n    TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\n        ul.style.display = 'none';\n        liEle.style.overflow = '';\n        liEle.style.height = '';\n        removeClass([icon], PROCESS);\n        this.removeExpand(liEle);\n        if (this.isLoaded) {\n            colArgs = this.getExpandEvent(liEle, null);\n            this.trigger('nodeCollapsed', colArgs);\n        }\n    };\n    TreeView.prototype.removeExpand = function (liEle, toRemove) {\n        if (toRemove) {\n            liEle.removeAttribute('aria-expanded');\n        }\n        else {\n            this.disableExpandAttr(liEle);\n        }\n        var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.expandedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.disableExpandAttr = function (liEle) {\n        liEle.setAttribute('aria-expanded', 'false');\n        addClass([liEle], NODECOLLAPSED);\n    };\n    TreeView.prototype.setHeight = function (currLi, ul) {\n        ul.style.display = 'block';\n        ul.style.visibility = 'hidden';\n        currLi.style.height = currLi.offsetHeight + 'px';\n        ul.style.display = 'none';\n        ul.style.visibility = '';\n    };\n    TreeView.prototype.animateHeight = function (args, start, end) {\n        var remaining = (args.duration - args.timeStamp) / args.duration;\n        var currentHeight = (end - start) * remaining + start;\n        args.element.parentElement.style.height = currentHeight + 'px';\n    };\n    TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {\n        var _this = this;\n        var eicon = select('div.' + ICON, parentLi);\n        if (isNOU(eicon)) {\n            return;\n        }\n        this.showSpinner(eicon);\n        var childItems;\n        /* eslint-disable */\n        if (this.fields.dataSource instanceof DataManager) {\n            var level = this.parents(parentLi, '.' + PARENTITEM).length;\n            var mapper_2 = this.getChildFields(this.fields, level, 1);\n            if (isNOU(mapper_2) || isNOU(mapper_2.dataSource)) {\n                detach(eicon);\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            this.treeList.push('false');\n            if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n                this.treeList.pop();\n                childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n                this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n            }\n            else {\n                mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\n                    _this.treeList.pop();\n                    childItems = e.result;\n                    if (_this.dataType === 1) {\n                        _this.dataType = 2;\n                    }\n                    _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n            this.currentLoadData = this.getSortedData(childItems);\n            if (isNOU(childItems) || childItems.length === 0) {\n                detach(eicon);\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            else {\n                this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n                parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));\n                this.expandNode(parentLi, eicon, loaded);\n                this.setSelectionForChildNodes(childItems);\n                this.ensureCheckNode(parentLi);\n                this.finalizeNode(parentLi);\n                this.disableTreeNodes(childItems);\n                this.renderSubChild(parentLi, expandChild, loaded);\n            }\n        }\n    };\n    TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n        this.currentLoadData = childItems;\n        if (isNOU(childItems) || childItems.length === 0) {\n            detach(eicon);\n            this.removeExpand(parentLi, true);\n        }\n        else {\n            this.updateListProp(mapper);\n            if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n                var id = parentLi.getAttribute('data-uid');\n                var nodeData = this.getNodeObject(id);\n                setValue('child', childItems, nodeData);\n            }\n            this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n            parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n            this.expandNode(parentLi, eicon, loaded);\n            this.setSelectionForChildNodes(childItems);\n            this.ensureCheckNode(parentLi);\n            this.finalizeNode(parentLi);\n            this.disableTreeNodes(childItems);\n            this.renderSubChild(parentLi, expandChild, loaded);\n        }\n        if (callback) {\n            callback();\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    };\n    TreeView.prototype.disableTreeNodes = function (childItems) {\n        var i = 0;\n        while (i < childItems.length) {\n            var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n            if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n                this.doDisableAction([id]);\n            }\n            i++;\n        }\n    };\n    /**\n     * Sets the child Item in selectedState while rendering the child node\n     */\n    TreeView.prototype.setSelectionForChildNodes = function (nodes) {\n        var i;\n        for (i = 0; i < nodes.length; i++) {\n            var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n            if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n                this.doSelectionAction();\n            }\n        }\n    };\n    TreeView.prototype.ensureCheckNode = function (element) {\n        if (this.showCheckBox) {\n            this.ele = (this.checkedElement) ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n            if (this.autoCheck) {\n                this.ensureChildCheckState(element);\n                this.ensureParentCheckState(element);\n            }\n        }\n        this.currentLoadData = null;\n    };\n    TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\n        if (nodeLevel === dataLevel) {\n            return mapper;\n        }\n        else {\n            return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    };\n    TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\n        var childData;\n        if (nodeLevel === dataLevel) {\n            return this.getChildMapper(mapper);\n        }\n        else {\n            return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    };\n    TreeView.prototype.getChildMapper = function (mapper) {\n        return (typeof mapper.child === 'string' || isNOU(mapper.child)) ? mapper : mapper.child;\n    };\n    TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {\n        if (isRoot === void 0) { isRoot = false; }\n        var childNodes;\n        if (isNOU(obj)) {\n            return childNodes;\n        }\n        else if (this.dataType === 1) {\n            return this.getChildGroup(this.groupedData, parentId, isRoot);\n        }\n        else {\n            if (typeof this.fields.child === 'string') {\n                for (var i = 0, objlen = obj.length; i < objlen; i++) {\n                    var dataId = getValue(this.fields.id, obj[i]);\n                    if (dataId && dataId.toString() === parentId) {\n                        return getValue(this.fields.child, obj[i]);\n                    }\n                    else if (!isNOU(getValue(this.fields.child, obj[i]))) {\n                        childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\n                        if (childNodes !== undefined) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return childNodes;\n    };\n    TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\n        var childNodes;\n        if (isNOU(data)) {\n            return childNodes;\n        }\n        for (var i = 0, objlen = data.length; i < objlen; i++) {\n            if (!isNOU(data[i][0]) && !isNOU(getValue(this.fields.parentID, data[i][0]))) {\n                if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n                    return data[i];\n                }\n            }\n            else if (isRoot) {\n                return data[i];\n            }\n            else {\n                return [];\n            }\n        }\n        return childNodes;\n    };\n    TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {\n        if (expandChild) {\n            var cIcons = selectAll('.' + EXPANDABLE, element);\n            for (var i = 0, len = cIcons.length; i < len; i++) {\n                var icon = cIcons[i];\n                if (element.querySelector('.e-icons') !== cIcons[i]) {\n                    var curLi = closest(icon, '.' + LISTITEM);\n                    this.expandArgs = this.getExpandEvent(curLi, null);\n                    if (loaded !== true) {\n                        this.trigger('nodeExpanding', this.expandArgs);\n                    }\n                    this.renderChildNodes(curLi, expandChild, null, loaded);\n                }\n            }\n        }\n    };\n    TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\n        if (!li.classList.contains('e-disable')) {\n            if (this.allowMultiSelection && ((e && e.ctrlKey) || multiSelect) && this.isActive(li)) {\n                this.unselectNode(li, e);\n            }\n            else {\n                this.selectNode(li, e, multiSelect);\n            }\n        }\n    };\n    TreeView.prototype.isActive = function (li) {\n        return li.classList.contains(ACTIVE) ? true : false;\n    };\n    TreeView.prototype.selectNode = function (li, e, multiSelect) {\n        var _this = this;\n        if (isNOU(li) || (!this.allowMultiSelection && this.isActive(li) && !isNOU(e))) {\n            this.setFocusElement(li);\n            return;\n        }\n        var eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'select', e);\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeSelectAction(li, e, observedArgs, multiSelect);\n                }\n            });\n        }\n        else {\n            this.nodeSelectAction(li, e, eventArgs, multiSelect);\n        }\n    };\n    TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\n        if (!this.allowMultiSelection || (!multiSelect && (!e || (e && !e.ctrlKey)))) {\n            this.removeSelectAll();\n        }\n        if (this.allowMultiSelection && e && e.shiftKey) {\n            if (!this.startNode) {\n                this.startNode = li;\n            }\n            var startIndex = this.liList.indexOf(this.startNode);\n            var endIndex = this.liList.indexOf(li);\n            if (startIndex > endIndex) {\n                var temp = startIndex;\n                startIndex = endIndex;\n                endIndex = temp;\n            }\n            for (var i = startIndex; i <= endIndex; i++) {\n                var currNode = this.liList[i];\n                if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n                    this.addSelect(currNode);\n                }\n            }\n        }\n        else {\n            this.startNode = li;\n            this.addSelect(li);\n        }\n        this.setFocusElement(li);\n        if (this.isLoaded) {\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n        }\n    };\n    TreeView.prototype.unselectNode = function (li, e) {\n        var _this = this;\n        var eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'un-select', e);\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeUnselectAction(li, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeUnselectAction(li, eventArgs);\n        }\n    };\n    TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\n        this.removeSelect(li);\n        this.setFocusElement(li);\n        if (this.isLoaded) {\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n        }\n    };\n    TreeView.prototype.setFocusElement = function (li) {\n        if (!isNOU(li)) {\n            var focusedNode = this.getFocusedNode();\n            if (focusedNode) {\n                removeClass([focusedNode], FOCUS);\n            }\n            addClass([li], FOCUS);\n            this.updateIdAttr(focusedNode, li);\n        }\n    };\n    TreeView.prototype.addSelect = function (liEle) {\n        liEle.setAttribute('aria-selected', 'true');\n        addClass([liEle], ACTIVE);\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\n            this.selectedNodes.push(id);\n        }\n    };\n    TreeView.prototype.removeSelect = function (liEle) {\n        if (this.allowMultiSelection) {\n            liEle.setAttribute('aria-selected', 'false');\n        }\n        else {\n            liEle.removeAttribute('aria-selected');\n        }\n        removeClass([liEle], ACTIVE);\n        var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.selectedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.removeSelectAll = function () {\n        var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n        for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n            var ele = selectedLI_1[_i];\n            if (this.allowMultiSelection) {\n                ele.setAttribute('aria-selected', 'false');\n            }\n            else {\n                ele.removeAttribute('aria-selected');\n            }\n        }\n        removeClass(selectedLI, ACTIVE);\n        this.setProperties({ selectedNodes: [] }, true);\n    };\n    TreeView.prototype.getSelectEvent = function (currLi, action, e) {\n        var nodeData = this.getNodeData(currLi);\n        return { action: action, cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, nodeData: nodeData };\n    };\n    TreeView.prototype.setExpandOnType = function () {\n        this.expandOnType = (this.expandOn === 'Auto') ? (Browser.isDevice ? 'Click' : 'DblClick') : this.expandOn;\n    };\n    TreeView.prototype.expandHandler = function (e) {\n        var target = e.originalEvent.target;\n        if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) ||\n            target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) ||\n            target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n            return;\n        }\n        else {\n            this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n        }\n    };\n    TreeView.prototype.expandCollapseAction = function (currLi, e) {\n        var icon = select('div.' + ICON, currLi);\n        if (!icon || icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            var classList = icon.classList;\n            if (classList.contains(EXPANDABLE)) {\n                this.expandAction(currLi, icon, e);\n            }\n            else if (classList.contains(COLLAPSIBLE)) {\n                this.collapseNode(currLi, icon, e);\n            }\n        }\n    };\n    TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {\n        var _this = this;\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            addClass([icon], PROCESS);\n        }\n        if (this.isLoaded && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, e);\n            this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\n                if (observedArgs.cancel) {\n                    removeClass([icon], PROCESS);\n                }\n                else {\n                    _this.nodeExpandAction(currLi, icon, expandChild, callback);\n                }\n            });\n        }\n        else {\n            this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n    };\n    TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {\n        var ul = select('.' + PARENTITEM, currLi);\n        if (ul && ul.nodeName === 'UL') {\n            this.expandNode(currLi, icon);\n        }\n        else {\n            this.renderChildNodes(currLi, expandChild, callback);\n            var liEles = selectAll('.' + LISTITEM, currLi);\n            for (var i = 0; i < liEles.length; i++) {\n                var id = this.getId(liEles[i]);\n                if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n                    var icon_1 = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n                    if (!isNOU(icon_1)) {\n                        this.expandAction(liEles[i], icon_1, null);\n                    }\n                    this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n                }\n            }\n        }\n    };\n    TreeView.prototype.keyActionHandler = function (e) {\n        var _this = this;\n        var target = e.target;\n        var focusedNode = this.getFocusedNode();\n        if (target && target.classList.contains(INPUT)) {\n            var inpEle = target;\n            if (e.action === 'enter') {\n                inpEle.blur();\n                this.element.focus();\n                addClass([focusedNode], HOVER);\n            }\n            else if (e.action === 'escape') {\n                inpEle.value = this.oldText;\n                inpEle.blur();\n                this.element.focus();\n                addClass([focusedNode], HOVER);\n            }\n            return;\n        }\n        e.preventDefault();\n        var eventArgs = {\n            cancel: false,\n            event: e,\n            node: focusedNode,\n        };\n        this.trigger('keyPress', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'space':\n                        if (_this.showCheckBox) {\n                            _this.checkNode(e);\n                        }\n                        break;\n                    case 'moveRight':\n                        _this.openNode(_this.enableRtl ? false : true, e);\n                        break;\n                    case 'moveLeft':\n                        _this.openNode(_this.enableRtl ? true : false, e);\n                        break;\n                    case 'shiftDown':\n                        _this.shiftKeySelect(true, e);\n                        break;\n                    case 'moveDown':\n                    case 'ctrlDown':\n                    case 'csDown':\n                        _this.navigateNode(true);\n                        break;\n                    case 'shiftUp':\n                        _this.shiftKeySelect(false, e);\n                        break;\n                    case 'moveUp':\n                    case 'ctrlUp':\n                    case 'csUp':\n                        _this.navigateNode(false);\n                        break;\n                    case 'home':\n                    case 'shiftHome':\n                    case 'ctrlHome':\n                    case 'csHome':\n                        _this.navigateRootNode(true);\n                        break;\n                    case 'end':\n                    case 'shiftEnd':\n                    case 'ctrlEnd':\n                    case 'csEnd':\n                        _this.navigateRootNode(false);\n                        break;\n                    case 'enter':\n                    case 'ctrlEnter':\n                    case 'shiftEnter':\n                    case 'csEnter':\n                        _this.toggleSelect(focusedNode, e);\n                        break;\n                    case 'f2':\n                        if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n                            _this.createTextbox(focusedNode, e);\n                        }\n                        break;\n                    case 'ctrlA':\n                        if (_this.allowMultiSelection) {\n                            var sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\n                            _this.selectGivenNodes(sNodes);\n                        }\n                        break;\n                }\n            }\n        });\n    };\n    TreeView.prototype.navigateToFocus = function (isUp) {\n        var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n        var pos = focusNode.getBoundingClientRect();\n        var parent = this.getScrollParent(this.element);\n        if (!isNOU(parent)) {\n            var parentPos = parent.getBoundingClientRect();\n            if (pos.bottom > parentPos.bottom) {\n                parent.scrollTop += pos.bottom - parentPos.bottom;\n            }\n            else if (pos.top < parentPos.top) {\n                parent.scrollTop -= parentPos.top - pos.top;\n            }\n        }\n        var isVisible = this.isVisibleInViewport(focusNode);\n        if (!isVisible) {\n            focusNode.scrollIntoView(isUp);\n        }\n    };\n    TreeView.prototype.isVisibleInViewport = function (txtWrap) {\n        var pos = txtWrap.getBoundingClientRect();\n        return (pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n            pos.right <= (window.innerWidth || document.documentElement.clientWidth));\n    };\n    TreeView.prototype.getScrollParent = function (node) {\n        if (isNOU(node)) {\n            return null;\n        }\n        return (node.scrollHeight > node.clientHeight) ? node : this.getScrollParent(node.parentElement);\n    };\n    TreeView.prototype.shiftKeySelect = function (isTowards, e) {\n        if (this.allowMultiSelection) {\n            var focusedNode = this.getFocusedNode();\n            var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n            this.removeHover();\n            this.setFocusElement(nextNode);\n            this.toggleSelect(nextNode, e, false);\n            this.navigateToFocus(!isTowards);\n        }\n        else {\n            this.navigateNode(isTowards);\n        }\n    };\n    TreeView.prototype.checkNode = function (e) {\n        var focusedNode = this.getFocusedNode();\n        var checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n        var isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n        if (!focusedNode.classList.contains('e-disable')) {\n            if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n                this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n            }\n        }\n    };\n    TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\n        var _this = this;\n        var currLi = closest(checkWrap, '.' + LISTITEM);\n        this.checkActionNodes = [];\n        var ariaState = !isCheck ? 'true' : 'false';\n        if (!isNOU(ariaState)) {\n            checkWrap.setAttribute('aria-checked', ariaState);\n        }\n        var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n        this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n            }\n        });\n    };\n    TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\n        if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n            this.checkedElement.push(li.getAttribute('data-uid'));\n            var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n            (child !== null) ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n        }\n        this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n        if (this.autoCheck) {\n            this.ensureChildCheckState(li);\n            this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n            var doCheck = void 0;\n            if (eventArgs.action === 'check') {\n                doCheck = true;\n            }\n            else if (eventArgs.action === 'uncheck') {\n                doCheck = false;\n            }\n            this.ensureStateChange(li, doCheck);\n        }\n        this.nodeCheckedEvent(checkWrap, isCheck, e);\n    };\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM\n     */\n    TreeView.prototype.ensureStateChange = function (li, doCheck) {\n        var childElement = select('.' + PARENTITEM, li);\n        var parentIndex = li.getAttribute('data-uid');\n        var mapper = this.fields;\n        if (this.dataType === 1 && this.autoCheck) {\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n            for (var i = 0; i < resultData.length; i++) {\n                var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n                var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n                if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n                    this.checkedNodes.push(resultId);\n                    var childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                    if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null &&\n                    this.checkedNodes.indexOf(resultId) !== -1) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n                    }\n                    if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null ||\n                        this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        var childNodes = this.getChildNodes(this.treeData, resultId);\n                        this.getChildItems(childNodes, doCheck);\n                        if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                        }\n                    }\n                }\n                else {\n                    var childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 1 && !this.autoCheck) {\n            if (!doCheck) {\n                var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n                for (var i = 0; i < checkedData.length; i++) {\n                    var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n                    if (this.checkedNodes.indexOf(id) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n                }\n                this.checkedNodes = [];\n            }\n            else {\n                for (var i = 0; i < this.treeData.length; i++) {\n                    var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n                    if (this.checkedNodes.indexOf(checkedId) === -1) {\n                        this.checkedNodes.push(checkedId);\n                    }\n                }\n            }\n        }\n        else {\n            var childItems = this.getChildNodes(this.treeData, parentIndex);\n            if (childItems) {\n                this.childStateChange(childItems, parentIndex, childElement, doCheck);\n            }\n        }\n    };\n    TreeView.prototype.getChildItems = function (childItems, doCheck) {\n        for (var i = 0; i < childItems.length; i++) {\n            var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n            var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() :\n                null;\n            if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n            }\n            if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n                this.checkedNodes.push(childId);\n            }\n            if (childIsCheck === 'true' && !doCheck) {\n                this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n            }\n            var subChildItems = this.getChildNodes(this.treeData, childId);\n            if (subChildItems.length > 0) {\n                this.getChildItems(subChildItems, doCheck);\n            }\n        }\n    };\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\n     */\n    TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\n        for (var i = 0; i < childItems.length; i++) {\n            var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n            var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n            if (this.autoCheck) {\n                if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n                    this.checkedNodes.push(checkedChild);\n                    if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    }\n                }\n            }\n            else if (!this.autoCheck) {\n                if (!doCheck) {\n                    if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    this.checkedNodes = [];\n                }\n                else {\n                    if (this.checkedNodes.indexOf(checkedChild) === -1) {\n                        this.checkedNodes.push(checkedChild);\n                    }\n                }\n            }\n            var subChild = this.getChildNodes([childItems[i]], checkedChild);\n            if (subChild) {\n                this.childStateChange(subChild, parent, childElement, doCheck);\n            }\n        }\n    };\n    //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n    TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\n        if (child) {\n            for (var length_1 = 0; length_1 < child.length; length_1++) {\n                var childId = getValue(this.fields.id, child[length_1]);\n                var check = this.element.querySelector('[data-uid=\"' + childId + '\"]');\n                //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n                if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n                    if (((check === null && !isNOU(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1)\n                        || childCheck === 0 || checked === 2)) {\n                        (child[length_1][this.fields.isChecked] !== false || checked === 2) ? newCheck.push(childId.toString())\n                            : childCheck = null;\n                        childCheck = (child[length_1][this.fields.isChecked] !== false || checked === 2) ? 0 : null;\n                    }\n                }\n                //Pushes child checked node done thro' UI interaction\n                if (newCheck.indexOf(childId.toString()) === -1 && isNOU(checked)) {\n                    newCheck.push(childId.toString());\n                }\n                //Gets if any next level children are available for child nodes\n                if (getValue(this.fields.hasChildren, child[length_1]) === true ||\n                    getValue(this.fields.child.toString(), child[length_1])) {\n                    var id = getValue(this.fields.id, child[length_1]);\n                    var childId_1 = this.getChildNodes(this.treeData, id.toString());\n                    if (childId_1) {\n                        (isNOU(validateCheck)) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) :\n                            this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\n                        childCheck = null;\n                    }\n                }\n                childCheck = null;\n            }\n        }\n    };\n    TreeView.prototype.openNode = function (toBeOpened, e) {\n        var focusedNode = this.getFocusedNode();\n        var icon = select('div.' + ICON, focusedNode);\n        if (toBeOpened) {\n            if (!icon) {\n                return;\n            }\n            else if (icon.classList.contains(EXPANDABLE)) {\n                this.expandAction(focusedNode, icon, e);\n            }\n            else {\n                this.focusNextNode(focusedNode, true);\n            }\n        }\n        else {\n            if (icon && icon.classList.contains(COLLAPSIBLE)) {\n                this.collapseNode(focusedNode, icon, e);\n            }\n            else {\n                var parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n                if (!parentLi) {\n                    return;\n                }\n                else {\n                    if (!parentLi.classList.contains('e-disable')) {\n                        this.setFocus(focusedNode, parentLi);\n                        this.navigateToFocus(true);\n                    }\n                }\n            }\n        }\n    };\n    TreeView.prototype.navigateNode = function (isTowards) {\n        var focusedNode = this.getFocusedNode();\n        this.focusNextNode(focusedNode, isTowards);\n    };\n    TreeView.prototype.navigateRootNode = function (isBackwards) {\n        var focusedNode = this.getFocusedNode();\n        var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n        if (!rootNode.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, rootNode);\n            this.navigateToFocus(isBackwards);\n        }\n    };\n    TreeView.prototype.getFocusedNode = function () {\n        var selectedItem;\n        var fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\n        if (isNOU(fNode)) {\n            selectedItem = select('.' + LISTITEM, this.element);\n        }\n        return isNOU(fNode) ? (isNOU(selectedItem) ? this.element.firstElementChild : selectedItem) : fNode;\n    };\n    TreeView.prototype.focusNextNode = function (li, isTowards) {\n        var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n        this.setFocus(li, nextNode);\n        this.navigateToFocus(!isTowards);\n        if (nextNode.classList.contains('e-disable')) {\n            var lastChild = nextNode.lastChild;\n            if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n                this.focusNextNode(nextNode, true);\n            }\n            else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n                this.focusNextNode(nextNode, false);\n            }\n            else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {\n                this.focusNextNode(nextNode, false);\n            }\n            else {\n                this.focusNextNode(nextNode, isTowards);\n            }\n        }\n    };\n    TreeView.prototype.getNextNode = function (li) {\n        var index = this.liList.indexOf(li);\n        var nextNode;\n        do {\n            index++;\n            nextNode = this.liList[index];\n            if (isNOU(nextNode)) {\n                return li;\n            }\n        } while (!isVisible(nextNode));\n        return nextNode;\n    };\n    TreeView.prototype.getPrevNode = function (li) {\n        var index = this.liList.indexOf(li);\n        var prevNode;\n        do {\n            index--;\n            prevNode = this.liList[index];\n            if (isNOU(prevNode)) {\n                return li;\n            }\n        } while (!isVisible(prevNode));\n        return prevNode;\n    };\n    TreeView.prototype.getRootNode = function () {\n        var index = 0;\n        var rootNode;\n        do {\n            rootNode = this.liList[index];\n            index++;\n        } while (!isVisible(rootNode));\n        return rootNode;\n    };\n    TreeView.prototype.getEndNode = function () {\n        var index = this.liList.length - 1;\n        var endNode;\n        do {\n            endNode = this.liList[index];\n            index--;\n        } while (!isVisible(endNode));\n        return endNode;\n    };\n    TreeView.prototype.setFocus = function (preNode, nextNode) {\n        removeClass([preNode], [HOVER, FOCUS]);\n        if (!nextNode.classList.contains('e-disable')) {\n            addClass([nextNode], [HOVER, FOCUS]);\n            this.updateIdAttr(preNode, nextNode);\n        }\n    };\n    TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\n        this.element.removeAttribute('aria-activedescendant');\n        if (preNode) {\n            preNode.removeAttribute('id');\n        }\n        nextNode.setAttribute('id', this.element.id + '_active');\n        this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    };\n    TreeView.prototype.focusIn = function () {\n        if (!this.mouseDownStatus) {\n            addClass([this.getFocusedNode()], HOVER);\n        }\n        this.mouseDownStatus = false;\n    };\n    TreeView.prototype.focusOut = function () {\n        removeClass([this.getFocusedNode()], HOVER);\n    };\n    TreeView.prototype.onMouseOver = function (e) {\n        var target = e.target;\n        var classList = target.classList;\n        var currentLi = closest(target, '.' + LISTITEM);\n        if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {\n            this.removeHover();\n            return;\n        }\n        else {\n            if (currentLi && !currentLi.classList.contains('e-disable')) {\n                this.setHover(currentLi);\n            }\n        }\n    };\n    TreeView.prototype.setHover = function (li) {\n        if (!li.classList.contains(HOVER)) {\n            this.removeHover();\n            addClass([li], HOVER);\n        }\n    };\n    ;\n    TreeView.prototype.onMouseLeave = function (e) {\n        this.removeHover();\n    };\n    TreeView.prototype.removeHover = function () {\n        var hoveredNode = selectAll('.' + HOVER, this.element);\n        if (hoveredNode && hoveredNode.length) {\n            removeClass(hoveredNode, HOVER);\n        }\n    };\n    ;\n    TreeView.prototype.getNodeData = function (currLi, fromDS) {\n        if (!isNOU(currLi) && currLi.classList.contains(LISTITEM) &&\n            !isNOU(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n            var id = currLi.getAttribute('data-uid');\n            var text = this.getText(currLi, fromDS);\n            var pNode = closest(currLi.parentNode, '.' + LISTITEM);\n            var pid = pNode ? pNode.getAttribute('data-uid') : null;\n            var selected = currLi.classList.contains(ACTIVE);\n            var expanded = (currLi.getAttribute('aria-expanded') === 'true') ? true : false;\n            var hasChildren = currLi.getAttribute('aria-expanded') !== null ? true : (select('.' + EXPANDABLE, currLi) || select('.' + COLLAPSIBLE, currLi)) != null ? true : false;\n            var checked = null;\n            if (this.showCheckBox) {\n                checked = select('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');\n            }\n            return {\n                id: id, text: text, parentID: pid, selected: selected, expanded: expanded,\n                isChecked: checked, hasChildren: hasChildren\n            };\n        }\n        return { id: '', text: '', parentID: '', selected: false, expanded: false, isChecked: '', hasChildren: false };\n    };\n    TreeView.prototype.getText = function (currLi, fromDS) {\n        if (fromDS) {\n            var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n            var level = parseFloat(currLi.getAttribute('aria-level'));\n            var nodeFields = this.getFields(this.fields, level, 1);\n            return getValue(nodeFields.text, nodeData);\n        }\n        return select('.' + LISTTEXT, currLi).textContent;\n    };\n    TreeView.prototype.getExpandEvent = function (currLi, e) {\n        var nodeData = this.getNodeData(currLi);\n        return { cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, nodeData: nodeData, event: e };\n    };\n    TreeView.prototype.renderNodeTemplate = function (data, textEle, dataId) {\n        var tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle);\n        if (tempArr) {\n            tempArr = Array.prototype.slice.call(tempArr);\n            append(tempArr, textEle);\n        }\n    };\n    TreeView.prototype.destroyTemplate = function (liEle) {\n        this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\n    };\n    TreeView.prototype.reRenderNodes = function () {\n        this.updateListProp(this.fields);\n        if (Browser.isIE) {\n            this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        else {\n            this.element.innerHTML = '';\n        }\n        if (!isNOU(this.nodeTemplateFn)) {\n            this.clearTemplate();\n        }\n        this.setTouchClass();\n        this.setProperties({ selectedNodes: [], checkedNodes: [], expandedNodes: [] }, true);\n        this.checkedElement = [];\n        this.isLoaded = false;\n        this.setDataBinding(true);\n    };\n    TreeView.prototype.setCssClass = function (oldClass, newClass) {\n        if (!isNOU(oldClass) && oldClass !== '') {\n            removeClass([this.element], oldClass.split(' '));\n        }\n        if (!isNOU(newClass) && newClass !== '') {\n            addClass([this.element], newClass.split(' '));\n        }\n    };\n    TreeView.prototype.editingHandler = function (e) {\n        var target = e.target;\n        if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) ||\n            target.classList.contains(LISTITEM) || target.classList.contains(ICON) ||\n            target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n            return;\n        }\n        else {\n            var liEle = closest(target, '.' + LISTITEM);\n            this.createTextbox(liEle, e);\n        }\n    };\n    TreeView.prototype.createTextbox = function (liEle, e) {\n        var _this = this;\n        var oldInpEle = select('.' + TREEINPUT, this.element);\n        if (oldInpEle) {\n            oldInpEle.blur();\n        }\n        var textEle = select('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        var innerEle = this.createElement('input', { className: TREEINPUT, attrs: { value: this.oldText } });\n        var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                var inpWidth = textEle.offsetWidth + 5;\n                var style = 'width:' + inpWidth + 'px';\n                addClass([liEle], EDITING);\n                if (!isNOU(_this.nodeTemplateFn)) {\n                    _this.destroyTemplate(liEle);\n                }\n                textEle.innerHTML = eventArgs.innerHtml;\n                var inpEle = select('.' + TREEINPUT, textEle);\n                _this.inputObj = Input.createInput({\n                    element: inpEle,\n                    properties: {\n                        enableRtl: _this.enableRtl,\n                    }\n                }, _this.createElement);\n                _this.inputObj.container.setAttribute('style', style);\n                inpEle.focus();\n                var inputEle = inpEle;\n                inputEle.setSelectionRange(0, inputEle.value.length);\n                _this.wireInputEvents(inpEle);\n            }\n        });\n    };\n    TreeView.prototype.updateOldText = function (liEle) {\n        var id = liEle.getAttribute('data-uid');\n        this.editData = this.getNodeObject(id);\n        var level = parseFloat(liEle.getAttribute('aria-level'));\n        this.editFields = this.getFields(this.fields, level, 1);\n        this.oldText = getValue(this.editFields.text, this.editData);\n    };\n    TreeView.prototype.inputFocusOut = function (e) {\n        if (!select('.' + TREEINPUT, this.element)) {\n            return;\n        }\n        var target = e.target;\n        var newText = target.value;\n        var txtEle = closest(target, '.' + LISTTEXT);\n        var liEle = closest(target, '.' + LISTITEM);\n        detach(this.inputObj.container);\n        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n            this.crudOperation('update', null, liEle, newText, null, null, true);\n        }\n        else {\n            this.appendNewText(liEle, txtEle, newText, true);\n        }\n    };\n    TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\n        var _this = this;\n        var eventArgs = this.getEditEvent(liEle, newText, null);\n        this.trigger('nodeEdited', eventArgs, function (observedArgs) {\n            newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n            _this.updateText(liEle, txtEle, newText, isInput);\n            if (observedArgs.oldText !== newText) {\n                _this.triggerEvent();\n            }\n        });\n    };\n    TreeView.prototype.updateText = function (liEle, txtEle, newText, isInput) {\n        var newData = setValue(this.editFields.text, newText, this.editData);\n        if (!isNOU(this.nodeTemplateFn)) {\n            txtEle.innerText = '';\n            var dataId = liEle.getAttribute('data-uid');\n            this.renderNodeTemplate(newData, txtEle, dataId);\n            this.renderReactTemplates();\n        }\n        else {\n            txtEle.innerText = newText;\n        }\n        if (isInput) {\n            removeClass([liEle], EDITING);\n            txtEle.focus();\n        }\n    };\n    TreeView.prototype.getElement = function (ele) {\n        if (isNOU(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n        }\n        else if (typeof ele === 'object') {\n            return getElement(ele);\n        }\n        else {\n            return null;\n        }\n    };\n    TreeView.prototype.getId = function (ele) {\n        if (isNOU(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return ele;\n        }\n        else if (typeof ele === 'object') {\n            return (getElement(ele)).getAttribute('data-uid');\n        }\n        else {\n            return null;\n        }\n    };\n    TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\n        var data = this.getNodeData(liEle);\n        return { cancel: false, newText: newText, node: liEle, nodeData: data, oldText: this.oldText, innerHtml: inpEle };\n    };\n    TreeView.prototype.getNodeObject = function (id) {\n        var childNodes;\n        if (isNOU(id)) {\n            return childNodes;\n        }\n        else if (this.dataType === 1) {\n            for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\n                var dataId = getValue(this.fields.id, this.treeData[i]);\n                if (!isNOU(this.treeData[i]) && !isNOU(dataId) && dataId.toString() === id) {\n                    return this.treeData[i];\n                }\n            }\n        }\n        else {\n            return this.getChildNodeObject(this.treeData, this.fields, id);\n        }\n        return childNodes;\n    };\n    TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\n        var newList;\n        if (isNOU(obj)) {\n            return newList;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var dataId = getValue(mapper.id, obj[i]);\n            if (obj[i] && dataId && dataId.toString() === id) {\n                return obj[i];\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childData = getValue(mapper.child, obj[i]);\n                newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var child = 'child';\n                newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n        }\n        return newList;\n    };\n    TreeView.prototype.setDragAndDrop = function (toBind) {\n        if (toBind && !this.disabled) {\n            this.initializeDrag();\n        }\n        else {\n            this.destroyDrag();\n        }\n    };\n    TreeView.prototype.initializeDrag = function () {\n        var _this = this;\n        var virtualEle;\n        var proxy = this;\n        this.dragObj = new Draggable(this.element, {\n            enableTailMode: true, enableAutoScroll: true,\n            dragArea: this.dragArea,\n            dragTarget: '.' + TEXTWRAP,\n            helper: function (e) {\n                _this.dragTarget = e.sender.target;\n                var dragRoot = closest(_this.dragTarget, '.' + ROOT);\n                var dragWrap = closest(_this.dragTarget, '.' + TEXTWRAP);\n                _this.dragLi = closest(_this.dragTarget, '.' + LISTITEM);\n                if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\n                    dragWrap = _this.dragTarget.nextElementSibling;\n                }\n                if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap ||\n                    _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) ||\n                    _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\n                    return false;\n                }\n                var cloneEle = (dragWrap.cloneNode(true));\n                if (isNOU(select('div.' + ICON, cloneEle))) {\n                    var icon = proxy.createElement('div', { className: ICON + ' ' + EXPANDABLE });\n                    cloneEle.insertBefore(icon, cloneEle.children[0]);\n                }\n                var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');\n                virtualEle = proxy.createElement('div', { className: cssClass });\n                virtualEle.appendChild(cloneEle);\n                var nLen = _this.selectedNodes.length;\n                if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\n                    var cNode = proxy.createElement('span', { className: DROPCOUNT, innerHTML: '' + nLen });\n                    virtualEle.appendChild(cNode);\n                }\n                document.body.appendChild(virtualEle);\n                document.body.style.cursor = '';\n                _this.dragData = _this.getNodeData(_this.dragLi);\n                return virtualEle;\n            },\n            dragStart: function (e) {\n                addClass([_this.element], DRAGGING);\n                var listItem = closest(e.target, '.e-list-item');\n                var level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\n                if (eventArgs.draggedNode.classList.contains(EDITING)) {\n                    _this.dragObj.intDestroy(e.event);\n                    _this.dragCancelAction(virtualEle);\n                }\n                else {\n                    _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\n                        if (observedArgs.cancel) {\n                            _this.dragObj.intDestroy(e.event);\n                            _this.dragCancelAction(virtualEle);\n                        }\n                        else {\n                            _this.dragStartAction = true;\n                        }\n                    });\n                }\n            },\n            drag: function (e) {\n                _this.dragObj.setProperties({ cursorAt: { top: (!isNOU(e.event.targetTouches) || Browser.isDevice) ? 60 : -20 } });\n                _this.dragAction(e, virtualEle);\n            },\n            dragStop: function (e) {\n                removeClass([_this.element], DRAGGING);\n                _this.removeVirtualEle();\n                var dropTarget = e.target;\n                var preventTargetExpand = false;\n                var dropRoot = (closest(dropTarget, '.' + DROPPABLE));\n                var isHelperElement = true;\n                if (!dropTarget || !dropRoot) {\n                    detach(e.helper);\n                    document.body.style.cursor = '';\n                    isHelperElement = false;\n                }\n                var listItem = closest(dropTarget, '.e-list-item');\n                var level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\n                eventArgs.preventTargetExpand = preventTargetExpand;\n                _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\n                    _this.dragParent = observedArgs.draggedParentNode;\n                    _this.preventExpand = observedArgs.preventTargetExpand;\n                    if (observedArgs.cancel) {\n                        if (e.helper.parentNode) {\n                            detach(e.helper);\n                        }\n                        document.body.style.cursor = '';\n                        isHelperElement = false;\n                    }\n                    _this.dragStartAction = false;\n                });\n            }\n        });\n        this.dropObj = new Droppable(this.element, {\n            out: function (e) {\n                if (!isNOU(e) && !e.target.classList.contains(SIBLING)) {\n                    document.body.style.cursor = 'not-allowed';\n                }\n            },\n            over: function (e) {\n                document.body.style.cursor = '';\n            },\n            drop: function (e) {\n                _this.dropAction(e);\n            }\n        });\n    };\n    TreeView.prototype.dragCancelAction = function (virtualEle) {\n        detach(virtualEle);\n        removeClass([this.element], DRAGGING);\n        this.dragStartAction = false;\n    };\n    TreeView.prototype.dragAction = function (e, virtualEle) {\n        var dropRoot = closest(e.target, '.' + DROPPABLE);\n        var dropWrap = closest(e.target, '.' + TEXTWRAP);\n        var icon = select('div.' + ICON, virtualEle);\n        removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n        this.removeVirtualEle();\n        document.body.style.cursor = '';\n        var classList = e.target.classList;\n        if (this.fullRowSelect && !dropWrap && !isNOU(classList) && classList.contains(FULLROW)) {\n            dropWrap = e.target.nextElementSibling;\n        }\n        if (dropRoot) {\n            var dropLi = closest(e.target, '.' + LISTITEM);\n            var checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n            var collapse = closest(e.target, '.' + COLLAPSIBLE);\n            var expand = closest(e.target, '.' + EXPANDABLE);\n            if (!dropRoot.classList.contains(ROOT) || (dropWrap &&\n                (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)))) {\n                if (this.hasTemplate && dropLi) {\n                    var templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n                    if ((e && (!expand && !collapse) && e.event.offsetY < 7 && !checkWrapper) || (((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3)))) {\n                        var index = this.fullRowSelect ? (1) : (0);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else if ((e && (!expand && !collapse) && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10) || ((expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19))) {\n                        var index = this.fullRowSelect ? (2) : (1);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else {\n                        addClass([icon], DROPIN);\n                    }\n                }\n                else {\n                    if ((dropLi && e && (!expand && !collapse) && (e.event.offsetY < 7) && !checkWrapper) || (((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3)))) {\n                        var index = this.fullRowSelect ? (1) : (0);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else if ((dropLi && e && (!expand && !collapse) && (e.target.offsetHeight > 0 && e.event.offsetY > (e.target.offsetHeight - 10)) && !checkWrapper) || (((expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19)))) {\n                        var index = this.fullRowSelect ? (2) : (1);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else {\n                        addClass([icon], DROPIN);\n                    }\n                }\n            }\n            else if (e.target.nodeName === 'LI' && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {\n                addClass([icon], DROPNEXT);\n                this.renderVirtualEle(e);\n            }\n            else if (e.target.classList.contains(SIBLING)) {\n                addClass([icon], DROPNEXT);\n            }\n            else {\n                addClass([icon], DROPOUT);\n            }\n        }\n        else {\n            addClass([icon], NODROP);\n            document.body.style.cursor = 'not-allowed';\n        }\n        var listItem = closest(e.target, '.e-list-item');\n        var level;\n        if (listItem) {\n            level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n        var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n        if (eventArgs.dropIndicator) {\n            removeClass([icon], eventArgs.dropIndicator);\n        }\n        this.trigger('nodeDragging', eventArgs);\n        if (eventArgs.dropIndicator) {\n            addClass([icon], eventArgs.dropIndicator);\n        }\n    };\n    TreeView.prototype.appendIndicator = function (dropLi, icon, index) {\n        addClass([icon], DROPNEXT);\n        var virEle = this.createElement('div', { className: SIBLING });\n        dropLi.insertBefore(virEle, dropLi.children[index]);\n    };\n    /* eslint-disable */\n    TreeView.prototype.dropAction = function (e) {\n        var offsetY = e.event.offsetY;\n        var dropTarget = e.target;\n        var dragObj;\n        var level;\n        var drop = false;\n        var dragInstance;\n        dragInstance = e.dragData.draggable;\n        for (var i = 0; i < dragInstance.ej2_instances.length; i++) {\n            if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\n                dragObj = dragInstance.ej2_instances[i];\n                break;\n            }\n        }\n        if (dragObj && dragObj.dragTarget) {\n            var dragTarget = dragObj.dragTarget;\n            var dragLi = (closest(dragTarget, '.' + LISTITEM));\n            var dropLi = (closest(dropTarget, '.' + LISTITEM));\n            if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n                dropLi = dropTarget.firstElementChild;\n            }\n            detach(e.droppedElement);\n            document.body.style.cursor = '';\n            if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                if (this.fields.dataSource instanceof DataManager === false) {\n                    this.preventExpand = false;\n                }\n                return;\n            }\n            if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n                var sNodes = selectAll('.' + ACTIVE, dragObj.element);\n                if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n                    for (var i = sNodes.length - 1; i >= 0; i--) {\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n                    }\n                }\n                else {\n                    for (var i = 0; i < sNodes.length; i++) {\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n                    }\n                }\n            }\n            else {\n                this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n            }\n            level = parseInt(dragLi.getAttribute('aria-level'), 10);\n            drop = true;\n        }\n        if (this.fields.dataSource instanceof DataManager === false) {\n            this.preventExpand = false;\n        }\n        this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n        if (dragObj.element.id !== this.element.id) {\n            dragObj.triggerEvent();\n        }\n        this.triggerEvent();\n    };\n    TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n        var checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n        var collapse = closest(e.target, '.' + COLLAPSIBLE);\n        var expand = closest(e.target, '.' + EXPANDABLE);\n        if (!dragLi.classList.contains('e-disable') && !checkWrapper && ((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3) || (expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19) || (!expand && !collapse))) {\n            if (dropTarget.nodeName === 'LI') {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n                if (dropTarget.firstElementChild.nodeName === 'UL') {\n                    this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n                }\n            }\n            else if ((dropTarget.classList.contains('e-icon-collapsible')) || (dropTarget.classList.contains('e-icon-expandable'))) {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else {\n                this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n            }\n        }\n        else {\n            this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n        }\n    };\n    TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\n        var dropUl = closest(dropLi, '.' + PARENTITEM);\n        var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        var pre;\n        if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (e.event.offsetY < 2) {\n            pre = true;\n        }\n        else if (e.target.classList.contains('e-icon-expandable') || (e.target.classList.contains('e-icon-collapsible'))) {\n            if ((e.event.offsetY < 5) || (e.event.offsetX < 3)) {\n                pre = true;\n            }\n            else if ((e.event.offsetY > 15) || (e.event.offsetX > 17)) {\n                pre = false;\n            }\n        }\n        if ((e.target.classList.contains('e-icon-expandable')) || (e.target.classList.contains('e-icon-collapsible'))) {\n            var target = e.target.closest('li');\n            dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n        }\n        else {\n            dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n        }\n        this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    };\n    TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n        var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        var dropParentUl = closest(dropLi, '.' + PARENTITEM);\n        var templateTarget;\n        if (e && e.target) {\n            templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n        }\n        if (e && (pos < 7) && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi);\n            this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n        }\n        else if (e && (e.target.offsetHeight > 0 && pos > (e.target.offsetHeight - 10)) && !isCheck && !this.hasTemplate) {\n            dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n            this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n        }\n        else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n            this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n        }\n        else {\n            var dropUl = this.expandParent(dropLi);\n            var childLi = dropUl.childNodes[index];\n            dropUl.insertBefore(dragLi, childLi);\n            this.moveData(dragLi, childLi, dropUl, true, dragObj);\n        }\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    };\n    TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\n        var dropParentLi = closest(dropUl, '.' + LISTITEM);\n        var id = this.getId(dragLi);\n        var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n        var refId = this.getId(dropLi);\n        var index = this.getDataPos(this.treeData, this.fields, refId);\n        var parentId = this.getId(dropParentLi);\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n            var pos = isNOU(index) ? this.treeData.length : (pre ? index : index + 1);\n            if (isNOU(parentId) && !this.hasPid) {\n                delete removedData[0][this.fields.parentID];\n            }\n            else {\n                var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n                setValue(this.fields.parentID, currPid, removedData[0]);\n            }\n            this.treeData.splice(pos, 0, removedData[0]);\n            if (dragObj.element.id !== this.element.id) {\n                var childData = dragObj.removeChildNodes(id);\n                pos++;\n                for (var i = 0, len = childData.length; i < len; i++) {\n                    this.treeData.splice(pos, 0, childData[i]);\n                    pos++;\n                }\n                dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n        }\n    };\n    TreeView.prototype.expandParent = function (dropLi) {\n        var dropIcon = select('div.' + ICON, dropLi);\n        if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n            this.expandAction(dropLi, dropIcon, null);\n        }\n        var dropUl = select('.' + PARENTITEM, dropLi);\n        if (this.preventExpand === true && !dropUl && dropIcon) {\n            this.renderChildNodes(dropLi);\n        }\n        dropUl = select('.' + PARENTITEM, dropLi);\n        if (!isNOU(dropUl) && this.preventExpand === true) {\n            dropUl.style.display = 'none';\n        }\n        if (!isNOU(dropUl) && this.preventExpand === false) {\n            dropUl.style.display = 'block';\n        }\n        if (isNOU(dropUl) && this.preventExpand === true) {\n            if (isNOU(dropIcon)) {\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            var icon = select('div.' + ICON, dropLi);\n            if (icon) {\n                icon.classList.add('e-icon-expandable');\n            }\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            if (icon) {\n                removeClass([icon], COLLAPSIBLE);\n            }\n            else {\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            dropLi.setAttribute('aria-expanded', 'false');\n            dropUl.style.display = 'none';\n        }\n        if (isNOU(dropUl)) {\n            this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n            if (isNOU(dropIcon)) {\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n            }\n            var icon = select('div.' + ICON, dropLi);\n            if (icon) {\n                removeClass([icon], EXPANDABLE);\n            }\n            else {\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n                icon = select('div.' + ICON, dropLi);\n                removeClass([icon], EXPANDABLE);\n            }\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            this.addExpand(dropLi);\n            this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n        }\n        return dropUl;\n    };\n    TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\n        if (dragParentLi && dragParentUl.childElementCount === 0) {\n            var dragIcon = select('div.' + ICON, dragParentLi);\n            detach(dragParentUl);\n            detach(dragIcon);\n            var parentId = this.getId(dragParentLi);\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n            this.removeExpand(dragParentLi, true);\n        }\n    };\n    TreeView.prototype.updateAriaLevel = function (dragLi) {\n        var level = this.parents(dragLi, '.' + PARENTITEM).length;\n        dragLi.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n    };\n    TreeView.prototype.updateChildAriaLevel = function (element, level) {\n        if (!isNOU(element)) {\n            var cNodes = element.childNodes;\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var liEle = cNodes[i];\n                liEle.setAttribute('aria-level', '' + level);\n                this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n            }\n        }\n    };\n    TreeView.prototype.renderVirtualEle = function (e) {\n        var pre;\n        if (e.event.offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (e.event.offsetY < 2) {\n            pre = true;\n        }\n        var virEle = this.createElement('div', { className: SIBLING });\n        var index = this.fullRowSelect ? (pre ? 1 : 2) : (pre ? 0 : 1);\n        e.target.insertBefore(virEle, e.target.children[index]);\n    };\n    TreeView.prototype.removeVirtualEle = function () {\n        var sibEle = select('.' + SIBLING);\n        if (sibEle) {\n            detach(sibEle);\n        }\n    };\n    TreeView.prototype.destroyDrag = function () {\n        if (this.dragObj && this.dropObj) {\n            this.dragObj.destroy();\n            this.dropObj.destroy();\n        }\n    };\n    TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n        var dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n        var dropData = dropLi ? this.getNodeData(dropLi) : null;\n        var draggedNode = obj ? obj.dragLi : dragNode;\n        var draggedNodeData = obj ? obj.dragData : null;\n        var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n        var dragLiParent = obj.dragLi.parentElement;\n        var dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n        var targetParent = null;\n        var indexValue = null;\n        var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n        var iconClass = null;\n        var node = (drop === true) ? draggedNode : dropLi;\n        var index = node ? closest(node, '.e-list-parent') : null;\n        var i = 0;\n        var position = null;\n        dragParent = (obj.dragLi && dragParent === null) ? closest(dragLiParent, '.' + ROOT) : dragParent;\n        dragParent = (drop === true) ? this.dragParent : dragParent;\n        if (cloneEle) {\n            while (i < 4) {\n                if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n                    iconClass = iconCss[i];\n                    break;\n                }\n                i++;\n            }\n        }\n        if (index) {\n            var dropTar = 0;\n            for (i = 0; i < index.childElementCount; i++) {\n                dropTar = (drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode) ? ++dropTar : dropTar;\n                if ((drop !== true && index.children[i].classList.contains('e-hover'))) {\n                    indexValue = (event.offsetY >= 23) ? i + 1 : i;\n                    break;\n                }\n                else if (index.children[i] === node) {\n                    indexValue = (event.offsetY >= 23) ? i : i;\n                    break;\n                }\n            }\n            indexValue = (dropTar !== 0) ? --indexValue : indexValue;\n            position = (iconClass == \"e-drop-in\") ? \"Inside\" : ((event.offsetY < 7) ? \"Before\" : \"After\");\n        }\n        if (dropTarget) {\n            if (newParent.length === 0) {\n                targetParent = null;\n            }\n            else if (dropTarget.classList.contains(LISTITEM)) {\n                targetParent = newParent[0];\n            }\n            else {\n                targetParent = newParent[1];\n            }\n        }\n        if (dropLi === draggedNode) {\n            targetParent = dropLi;\n        }\n        if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n            targetParent = dropLi;\n            if (drop !== true) {\n                level = ++level;\n                var parent_2 = targetParent ? select('.e-list-parent', targetParent) : null;\n                indexValue = (parent_2) ? parent_2.children.length : 0;\n                if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {\n                    var parent_3 = targetParent.hasAttribute('data-uid') ?\n                        this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n                    indexValue = (parent_3) ? parent_3.length : 0;\n                }\n            }\n        }\n        return {\n            cancel: false,\n            clonedNode: cloneEle,\n            event: event,\n            draggedNode: draggedNode,\n            draggedNodeData: draggedNodeData,\n            droppedNode: dropLi,\n            droppedNodeData: dropData,\n            dropIndex: indexValue,\n            dropLevel: level,\n            draggedParentNode: dragParent,\n            dropTarget: targetParent,\n            dropIndicator: iconClass,\n            target: target,\n            position: position,\n        };\n    };\n    TreeView.prototype.addFullRow = function (toAdd) {\n        var len = this.liList.length;\n        if (toAdd) {\n            for (var i = 0; i < len; i++) {\n                this.createFullRow(this.liList[i]);\n            }\n        }\n        else {\n            for (var i = 0; i < len; i++) {\n                var rowDiv = select('.' + FULLROW, this.liList[i]);\n                detach(rowDiv);\n            }\n        }\n    };\n    TreeView.prototype.createFullRow = function (item) {\n        var rowDiv = this.createElement('div', { className: FULLROW });\n        item.insertBefore(rowDiv, item.childNodes[0]);\n    };\n    TreeView.prototype.addMultiSelect = function (toAdd) {\n        if (toAdd) {\n            var liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n            for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\n                var ele = liEles_1[_i];\n                ele.setAttribute('aria-selected', 'false');\n            }\n        }\n        else {\n            var liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n            for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\n                var ele = liEles_2[_a];\n                ele.removeAttribute('aria-selected');\n            }\n        }\n    };\n    TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {\n        if (level > 0 && !isNOU(element)) {\n            var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var liEle = cNodes[i];\n                var icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n                if (!isNOU(icon)) {\n                    this.collapseNode(liEle, icon, null);\n                }\n                this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n            }\n        }\n    };\n    TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\n        var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n        for (var i = 0, len = cIcons.length; i < len; i++) {\n            var icon = cIcons[i];\n            var liEle = closest(icon, '.' + LISTITEM);\n            this.collapseNode(liEle, icon, null);\n        }\n    };\n    TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\n        if (level > 0 && !isNOU(element)) {\n            var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (var i = 0, len = eNodes.length; i < len; i++) {\n                var liEle = eNodes[i];\n                var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n                if (!isNOU(icon)) {\n                    this.expandAction(liEle, icon, null);\n                }\n                this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n            }\n        }\n    };\n    TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\n        var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n        for (var i = 0, len = eIcons.length; i < len; i++) {\n            var icon = eIcons[i];\n            var liEle = closest(icon, '.' + LISTITEM);\n            this.expandAction(liEle, icon, null, true);\n        }\n    };\n    TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\n        var vNodes = Array.prototype.slice.call(nodes);\n        if (excludeHiddenNodes) {\n            for (var i = 0; i < vNodes.length; i++) {\n                if (!isVisible(vNodes[i])) {\n                    vNodes.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        return vNodes;\n    };\n    TreeView.prototype.removeNode = function (node) {\n        var dragParentUl = closest(node, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        if (!isNOU(this.nodeTemplateFn)) {\n            this.destroyTemplate(node);\n        }\n        detach(node);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.removeData(node);\n    };\n    TreeView.prototype.updateInstance = function () {\n        this.updateList();\n        this.updateSelectedNodes();\n        this.updateExpandedNodes();\n    };\n    TreeView.prototype.updateList = function () {\n        this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n    };\n    TreeView.prototype.updateSelectedNodes = function () {\n        this.setProperties({ selectedNodes: [] }, true);\n        var sNodes = selectAll('.' + ACTIVE, this.element);\n        this.selectGivenNodes(sNodes);\n    };\n    TreeView.prototype.updateExpandedNodes = function () {\n        this.setProperties({ expandedNodes: [] }, true);\n        var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n        for (var i = 0, len = eNodes.length; i < len; i++) {\n            this.addExpand(eNodes[i]);\n        }\n    };\n    TreeView.prototype.removeData = function (node) {\n        if (this.dataType === 1) {\n            var dm = new DataManager(this.treeData);\n            var id = this.getId(node);\n            var data = {};\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\n            data[this.fields.id] = newId;\n            dm.remove(this.fields.id, data);\n            this.removeChildNodes(id);\n        }\n        else {\n            var id = this.getId(node);\n            this.updateChildField(this.treeData, this.fields, id, null, null, true);\n        }\n    };\n    TreeView.prototype.removeChildNodes = function (parentId) {\n        var cNodes = this.getChildGroup(this.groupedData, parentId, false);\n        var childData = [];\n        if (cNodes) {\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var dm = new DataManager(this.treeData);\n                var id = getValue(this.fields.id, cNodes[i]).toString();\n                var data = {};\n                var currId = this.isNumberTypeId ? parseFloat(id) : id;\n                data[this.fields.id] = currId;\n                var nodeData = dm.remove(this.fields.id, data);\n                childData.push(nodeData[0]);\n                this.removeChildNodes(id);\n            }\n        }\n        return childData;\n    };\n    TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var liEle = this.getElement(nodes[i]);\n            if (isNOU(liEle)) {\n                continue;\n            }\n            var icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n            if (!isNOU(icon)) {\n                toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n            }\n        }\n    };\n    TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\n        if (nodes.length === 0) {\n            return;\n        }\n        var sNodes = this.getSortedData(nodes);\n        var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n        if (isRemote) {\n            this.updateMapper(level);\n        }\n        var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n        var dropUl;\n        if (!dropEle) {\n            dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n        }\n        else {\n            dropUl = dropEle;\n        }\n        var refNode = dropUl.childNodes[index];\n        for (var i = 0; i < li.length; i++) {\n            dropUl.insertBefore(li[i], refNode);\n        }\n        var id = this.getId(dropLi);\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n            var refId = this.getId(refNode);\n            var pos = isNOU(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n            for (var j = 0; j < nodes.length; j++) {\n                if (!isNOU(id)) {\n                    var currId = this.isNumberTypeId ? parseFloat(id) : id;\n                    setValue(this.fields.parentID, currId, nodes[j]);\n                }\n                this.treeData.splice(pos, 0, nodes[j]);\n                pos++;\n            }\n        }\n        else {\n            this.addChildData(this.treeData, this.fields, id, nodes, index);\n        }\n        this.finalizeNode(dropUl);\n    };\n    TreeView.prototype.updateMapper = function (level) {\n        var mapper = (level === 1) ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n        this.updateListProp(mapper);\n    };\n    TreeView.prototype.updateListProp = function (mapper) {\n        var prop = this.getActualProperties(mapper);\n        this.listBaseOption.fields = prop;\n        this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n    };\n    TreeView.prototype.getDataPos = function (obj, mapper, id) {\n        var pos = null;\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                return i;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var data = getValue(mapper.child, obj[i]);\n                pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var items = getValue('child', obj[i]);\n                pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n        }\n        return pos;\n    };\n    TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\n        var updated;\n        if (isNOU(id)) {\n            index = isNOU(index) ? obj.length : index;\n            for (var k = 0, len = data.length; k < len; k++) {\n                obj.splice(index, 0, data[k]);\n                index++;\n            }\n            return updated;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                if ((typeof mapper.child === 'string' && (obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null)) ||\n                    ((this.fields.dataSource instanceof DataManager) && obj[i].hasOwnProperty('child'))) {\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    var childData = getValue(key, obj[i]);\n                    if (isNOU(childData)) {\n                        childData = [];\n                    }\n                    index = isNOU(index) ? childData.length : index;\n                    for (var k = 0, len = data.length; k < len; k++) {\n                        childData.splice(index, 0, data[k]);\n                        index++;\n                    }\n                }\n                else {\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    obj[i][key] = data;\n                }\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childObj = getValue(mapper.child, obj[i]);\n                updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n            else if ((this.fields.dataSource instanceof DataManager) && !isNOU(getValue('child', obj[i]))) {\n                var childData = getValue('child', obj[i]);\n                updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n        }\n        return updated;\n    };\n    TreeView.prototype.doDisableAction = function (nodes) {\n        var validNodes = this.nodeType(nodes);\n        var validID = this.checkValidId(validNodes);\n        this.validArr = [];\n        for (var i = 0, len = validID.length; i < len; i++) {\n            var id = validID[i][this.fields.id].toString();\n            if (id && this.disableNode.indexOf(id) === -1) {\n                this.disableNode.push(id);\n            }\n            var liEle = this.getElement(id);\n            if (liEle) {\n                liEle.setAttribute('aria-disabled', 'true');\n                addClass([liEle], DISABLE);\n            }\n        }\n    };\n    TreeView.prototype.doEnableAction = function (nodes) {\n        var strNodes = this.nodeType(nodes);\n        for (var i = 0, len = strNodes.length; i < len; i++) {\n            var liEle = this.getElement(strNodes[i]);\n            var id = strNodes[i];\n            if (id && this.disableNode.indexOf(id) !== -1) {\n                this.disableNode.splice(this.disableNode.indexOf(id), 1);\n            }\n            if (liEle) {\n                liEle.removeAttribute('aria-disabled');\n                removeClass([liEle], DISABLE);\n            }\n        }\n    };\n    TreeView.prototype.nodeType = function (nodes) {\n        var validID = [];\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var id = void 0;\n            if (typeof nodes[i] == \"string\") {\n                id = (nodes[i]) ? nodes[i].toString() : null;\n            }\n            else if (typeof nodes[i] === \"object\") {\n                id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n            }\n            if (validID.indexOf(id) == -1) {\n                validID.push(id);\n            }\n        }\n        return validID;\n    };\n    TreeView.prototype.checkValidId = function (node) {\n        var _this = this;\n        if (this.dataType === 1) {\n            this.validArr = this.treeData.filter(function (data) {\n                return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\n            });\n        }\n        else if (this.dataType === 2) {\n            for (var k = 0; k < this.treeData.length; k++) {\n                var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n                if (node.indexOf(id) !== -1) {\n                    this.validArr.push(this.treeData[k]);\n                }\n                var childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n                if (childItems) {\n                    this.filterNestedChild(childItems, node);\n                }\n            }\n        }\n        return this.validArr;\n    };\n    TreeView.prototype.filterNestedChild = function (treeData, nodes) {\n        for (var k = 0; k < treeData.length; k++) {\n            var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n            if (nodes.indexOf(id) !== -1) {\n                this.validArr.push(treeData[k]);\n            }\n            var childItems = getValue(this.fields.child.toString(), treeData[k]);\n            if (childItems) {\n                this.filterNestedChild(childItems, nodes);\n            }\n        }\n    };\n    TreeView.prototype.setTouchClass = function () {\n        var ele = closest(this.element, '.' + BIGGER);\n        this.touchClass = isNOU(ele) ? '' : SMALL;\n    };\n    TreeView.prototype.updatePersistProp = function () {\n        this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n        var sleNodes = this.selectedNodes;\n        for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\n            this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n        }\n        var enodes = this.expandedNodes;\n        for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\n            this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n        }\n        if (this.showCheckBox) {\n            this.removeField(this.treeData, this.fields, ['isChecked']);\n            var cnodes = this.checkedNodes;\n            for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n                this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n            }\n        }\n    };\n    TreeView.prototype.removeField = function (obj, mapper, names) {\n        if (isNOU(obj) || isNOU(mapper)) {\n            return;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            for (var j = 0; j < names.length; j++) {\n                var field = this.getMapperProp(mapper, names[j]);\n                if (!isNOU(obj[i][field])) {\n                    delete obj[i][field];\n                }\n            }\n            if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n            }\n        }\n    };\n    TreeView.prototype.getMapperProp = function (mapper, fieldName) {\n        switch (fieldName) {\n            case 'selected':\n                return !isNOU(mapper.selected) ? mapper.selected : 'selected';\n            case 'expanded':\n                return !isNOU(mapper.expanded) ? mapper.expanded : 'expanded';\n            case 'isChecked':\n                return !isNOU(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n            case 'hasChildren':\n                return !isNOU(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n            default:\n                return fieldName;\n        }\n    };\n    TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\n        var childNodes;\n        if (isNOU(id)) {\n            return;\n        }\n        else if (this.dataType === 1) {\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n            setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n        }\n        else {\n            this.updateChildField(obj, mapper, id, key, value);\n        }\n    };\n    TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {\n        var removedData;\n        if (isNOU(obj)) {\n            return removedData;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                if (remove) {\n                    removedData = obj.splice(i, 1);\n                }\n                else {\n                    setValue(this.getMapperProp(mapper, key), value, obj[i]);\n                    removedData = [];\n                }\n                return removedData;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childData = getValue(mapper.child, obj[i]);\n                removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var childItems = getValue('child', obj[i]);\n                removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n        }\n        return removedData;\n    };\n    TreeView.prototype.triggerEvent = function () {\n        this.renderReactTemplates();\n        var eventArgs = { data: this.treeData };\n        this.trigger('dataSourceChanged', eventArgs);\n    };\n    TreeView.prototype.wireInputEvents = function (inpEle) {\n        EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n    };\n    TreeView.prototype.wireEditingEvents = function (toBind) {\n        var _this = this;\n        if (toBind && !this.disabled) {\n            var proxy_2 = this;\n            this.touchEditObj = new Touch(this.element, {\n                tap: function (e) {\n                    if (_this.isDoubleTapped(e) && e.tapCount === 2) {\n                        e.originalEvent.preventDefault();\n                        proxy_2.editingHandler(e.originalEvent);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchEditObj) {\n                this.touchEditObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.wireClickEvent = function (toBind) {\n        if (toBind) {\n            var proxy_3 = this;\n            this.touchClickObj = new Touch(this.element, {\n                tap: function (e) {\n                    proxy_3.clickHandler(e);\n                }\n            });\n        }\n        else {\n            if (this.touchClickObj) {\n                this.touchClickObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.wireExpandOnEvent = function (toBind) {\n        var _this = this;\n        if (toBind) {\n            var proxy_4 = this;\n            this.touchExpandObj = new Touch(this.element, {\n                tap: function (e) {\n                    if ((_this.expandOnType === 'Click' || (_this.expandOnType === 'DblClick' && _this.isDoubleTapped(e) && e.tapCount === 2))\n                        && e.originalEvent.which !== 3) {\n                        proxy_4.expandHandler(e);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchExpandObj) {\n                this.touchExpandObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.mouseDownHandler = function (e) {\n        this.mouseDownStatus = true;\n        if (e.shiftKey || e.ctrlKey) {\n            e.preventDefault();\n        }\n        if (e.ctrlKey && this.allowMultiSelection) {\n            EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n        }\n    };\n    ;\n    TreeView.prototype.preventContextMenu = function (e) {\n        e.preventDefault();\n    };\n    TreeView.prototype.wireEvents = function () {\n        EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n        this.wireClickEvent(true);\n        if (this.expandOnType !== 'None') {\n            this.wireExpandOnEvent(true);\n        }\n        EventHandler.add(this.element, 'focus', this.focusIn, this);\n        EventHandler.add(this.element, 'blur', this.focusOut, this);\n        EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n        EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n        this.keyboardModule = new KeyboardEvents(this.element, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n    };\n    TreeView.prototype.unWireEvents = function () {\n        EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n        this.wireClickEvent(false);\n        this.wireExpandOnEvent(false);\n        EventHandler.remove(this.element, 'focus', this.focusIn);\n        EventHandler.remove(this.element, 'blur', this.focusOut);\n        EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n        EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n        if (!this.disabled) {\n            this.keyboardModule.destroy();\n        }\n    };\n    TreeView.prototype.parents = function (element, selector) {\n        var matched = [];\n        var el = element.parentNode;\n        while (!isNOU(el)) {\n            if (matches(el, selector)) {\n                matched.push(el);\n            }\n            el = el.parentNode;\n        }\n        return matched;\n    };\n    TreeView.prototype.isDoubleTapped = function (e) {\n        var target = e.originalEvent.target;\n        var secondTap;\n        if (target && e.tapCount) {\n            if (e.tapCount === 1) {\n                this.firstTap = closest(target, '.' + LISTITEM);\n            }\n            else if (e.tapCount === 2) {\n                secondTap = closest(target, '.' + LISTITEM);\n            }\n        }\n        return (this.firstTap === secondTap);\n    };\n    TreeView.prototype.isDescendant = function (parent, child) {\n        var node = child.parentNode;\n        while (!isNOU(node)) {\n            if (node === parent) {\n                return true;\n            }\n            node = node.parentNode;\n        }\n        return false;\n    };\n    TreeView.prototype.showSpinner = function (element) {\n        addClass([element], LOAD);\n        createSpinner({\n            target: element,\n            width: Browser.isDevice ? 16 : 14\n        }, this.createElement);\n        showSpinner(element);\n    };\n    TreeView.prototype.hideSpinner = function (element) {\n        hideSpinner(element);\n        element.innerHTML = '';\n        removeClass([element], LOAD);\n    };\n    TreeView.prototype.setCheckedNodes = function (nodes) {\n        nodes = JSON.parse(JSON.stringify(nodes));\n        this.uncheckAll(this.checkedNodes);\n        this.setIndeterminate(nodes);\n        if (nodes.length > 0) {\n            this.checkAll(nodes);\n        }\n    };\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\n     */\n    TreeView.prototype.setValidCheckedNode = function (node) {\n        if (this.dataType === 1) {\n            var mapper = this.fields;\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n            if (resultData[0]) {\n                this.setChildCheckState(resultData, node, resultData[0]);\n                if (this.autoCheck) {\n                    var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n                    var childNodes = this.getChildNodes(this.treeData, parent_4);\n                    var count = 0;\n                    for (var len = 0; len < childNodes.length; len++) {\n                        var childId = childNodes[len][this.fields.id].toString();\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                    if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\n                        this.checkedNodes.push(parent_4);\n                    }\n                }\n            }\n        }\n        else if (this.dataType === 2) {\n            for (var a = 0; a < this.treeData.length; a++) {\n                var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n                if (index === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                    break;\n                }\n                var childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n                if (childItems) {\n                    this.setChildCheckState(childItems, node, this.treeData[a]);\n                }\n            }\n        }\n    };\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\n     */\n    TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {\n        var checkedParent;\n        var count = 0;\n        if (this.dataType === 1) {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n            }\n            for (var index = 0; index < childItems.length; index++) {\n                var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n                        this.checkedNodes.push(checkNode);\n                    }\n                }\n                if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                }\n                var subChildItems = this.getChildNodes(this.treeData, checkNode);\n                if (subChildItems) {\n                    this.setChildCheckState(subChildItems, node, treeData);\n                }\n            }\n        }\n        else {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n            }\n            for (var index = 0; index < childItems.length; index++) {\n                var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n                        this.checkedNodes.push(checkedChild);\n                    }\n                }\n                if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                }\n                var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n                if (subChildItems) {\n                    this.setChildCheckState(subChildItems, node, childItems[index]);\n                }\n                if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                    count++;\n                }\n                if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n                    this.checkedNodes.push(checkedParent);\n                }\n            }\n        }\n    };\n    TreeView.prototype.setIndeterminate = function (nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            this.setValidCheckedNode(nodes[i]);\n        }\n    };\n    TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\n        if (this.dataType === 1) {\n            var pos = this.getDataPos(this.treeData, this.fields, id);\n            this.treeData.splice(pos, 1, newData);\n            if (isRefreshChild) {\n                this.removeChildNodes(id);\n                for (var j = 0; j < childValue.length; j++) {\n                    this.treeData.splice(pos, 0, childValue[j]);\n                    pos++;\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n        }\n    };\n    TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\n        var found;\n        for (var i = 0, objlen = treeData.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, treeData[i]);\n            if (treeData[i] && nodeId && nodeId.toString() === currID) {\n                treeData[i] = newData[0];\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, treeData[i]))) {\n                var childObj = getValue(mapper.child, treeData[i]);\n                found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', treeData[i]))) {\n                var childData = getValue('child', treeData[i]);\n                found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n        }\n        return found;\n    };\n    TreeView.prototype.dynamicState = function () {\n        this.setDragAndDrop(this.allowDragAndDrop);\n        this.wireEditingEvents(this.allowEditing);\n        if (!this.disabled) {\n            this.wireEvents();\n            this.setRipple();\n        }\n        else {\n            this.unWireEvents();\n            this.rippleFn();\n            this.rippleIconFn();\n        }\n    };\n    TreeView.prototype.crudOperation = function (operation, nodes, target, newText, newNode, index, prevent) {\n        var _this = this;\n        var data = this.fields.dataSource;\n        var matchedArr = [];\n        var query = this.getQuery(this.fields);\n        var key = this.fields.id;\n        var crud;\n        var changes = {\n            addedRecords: [],\n            deletedRecords: [],\n            changedRecords: []\n        };\n        var nodesID = [];\n        if (nodes) {\n            nodesID = this.nodeType(nodes);\n        }\n        else if (target) {\n            if (typeof target == \"string\") {\n                nodesID[0] = target.toString();\n            }\n            else if (typeof target === \"object\") {\n                nodesID[0] = target.getAttribute(\"data-uid\").toString();\n            }\n        }\n        for (var i = 0, len = nodesID.length; i < len; i++) {\n            var liEle = this.getElement(nodesID[i]);\n            if (isNullOrUndefined(liEle)) {\n                continue;\n            }\n            var removedData = this.getNodeObject(nodesID[i]);\n            matchedArr.push(removedData);\n        }\n        switch (operation) {\n            case 'delete':\n                if (nodes.length == 1) {\n                    crud = data.remove(key, matchedArr[0], query.fromTable, query);\n                }\n                else {\n                    changes.deletedRecords = matchedArr;\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\n                }\n                crud.then(function (e) { return _this.deleteSuccess(nodesID); })\n                    .catch(function (e) { return _this.dmFailure(e); });\n                break;\n            case 'update':\n                matchedArr[0][this.fields.text] = newText;\n                crud = data.update(key, matchedArr[0], query.fromTable, query);\n                crud.then(function (e) { return _this.editSucess(target, newText, prevent); })\n                    .catch(function (e) { return _this.dmFailure(e, target, prevent); });\n                break;\n            case 'insert':\n                if (newNode.length == 1) {\n                    crud = data.insert(newNode[0], query.fromTable, query);\n                }\n                else {\n                    var arr = [];\n                    for (var i = 0, len = newNode.length; i < len; i++) {\n                        arr.push(newNode[i]);\n                    }\n                    changes.addedRecords = arr;\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\n                }\n                crud.then(function (e) {\n                    var dropLi = _this.getElement(target);\n                    _this.addSuccess(newNode, dropLi, index);\n                    _this.preventExpand = false;\n                }).catch(function (e) { return _this.dmFailure(e); });\n                break;\n        }\n    };\n    TreeView.prototype.deleteSuccess = function (nodes) {\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var liEle = this.getElement(nodes[i]);\n            if (isNOU(liEle)) {\n                continue;\n            }\n            this.removeNode(liEle);\n        }\n        this.updateInstance();\n        if (this.dataType === 1) {\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        this.triggerEvent();\n    };\n    TreeView.prototype.editSucess = function (target, newText, prevent) {\n        var liEle = this.getElement(target);\n        var txtEle = select('.' + LISTTEXT, liEle);\n        this.appendNewText(liEle, txtEle, newText, prevent);\n    };\n    TreeView.prototype.addSuccess = function (nodes, dropLi, index) {\n        var dropUl;\n        var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n        var proxy = this;\n        if (dropLi && icon && icon.classList.contains(EXPANDABLE) &&\n            dropLi.querySelector('.' + PARENTITEM) === null) {\n            proxy.renderChildNodes(dropLi, null, function () {\n                dropUl = dropLi.querySelector('.' + PARENTITEM);\n                proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);\n                proxy.triggerEvent();\n            });\n        }\n        else {\n            this.addGivenNodes(nodes, dropLi, index, true);\n            this.triggerEvent();\n        }\n    };\n    TreeView.prototype.dmFailure = function (e, target, prevent) {\n        if (target) {\n            this.updatePreviousText(target, prevent);\n        }\n        this.trigger('actionFailure', { error: e });\n    };\n    TreeView.prototype.updatePreviousText = function (target, prevent) {\n        var liEle = this.getElement(target);\n        var txtEle = select('.' + LISTTEXT, liEle);\n        this.updateText(liEle, txtEle, this.oldText, prevent);\n    };\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {TreeView} newProp\n     * @param  {TreeView} oldProp\n     * @returns void\n     * @private\n     */\n    TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'allowDragAndDrop':\n                    this.setDragAndDrop(this.allowDragAndDrop);\n                    break;\n                case 'dragArea':\n                    if (this.allowDragAndDrop) {\n                        this.dragObj.dragArea = this.dragArea;\n                    }\n                    break;\n                case 'allowEditing':\n                    this.wireEditingEvents(this.allowEditing);\n                    break;\n                case 'allowMultiSelection':\n                    if (this.selectedNodes.length > 1) {\n                        var sNode = this.getElement(this.selectedNodes[0]);\n                        this.isLoaded = false;\n                        this.removeSelectAll();\n                        this.selectNode(sNode, null);\n                        this.isLoaded = true;\n                    }\n                    this.setMultiSelect(this.allowMultiSelection);\n                    this.addMultiSelect(this.allowMultiSelection);\n                    break;\n                case 'checkedNodes':\n                    if (this.showCheckBox) {\n                        this.checkedNodes = oldProp.checkedNodes;\n                        this.setCheckedNodes(newProp.checkedNodes);\n                    }\n                    break;\n                case 'autoCheck':\n                    if (this.showCheckBox) {\n                        this.autoCheck = newProp.autoCheck;\n                        this.ensureIndeterminate();\n                    }\n                    break;\n                case 'cssClass':\n                    this.setCssClass(oldProp.cssClass, newProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'expandedNodes':\n                    this.isAnimate = false;\n                    this.setProperties({ expandedNodes: [] }, true);\n                    this.collapseAll();\n                    this.isInitalExpand = true;\n                    this.setProperties({ expandedNodes: isNOU(newProp.expandedNodes) ? [] : newProp.expandedNodes }, true);\n                    this.doExpandAction();\n                    this.isInitalExpand = false;\n                    this.isAnimate = true;\n                    break;\n                case 'expandOn':\n                    this.wireExpandOnEvent(false);\n                    this.setExpandOnType();\n                    if (this.expandOnType !== 'None' && !this.disabled) {\n                        this.wireExpandOnEvent(true);\n                    }\n                    break;\n                case 'disabled':\n                    this.setDisabledMode();\n                    this.dynamicState();\n                    break;\n                case 'fields':\n                    this.isAnimate = false;\n                    this.isFieldChange = true;\n                    this.initialRender = true;\n                    this.reRenderNodes();\n                    this.initialRender = false;\n                    this.isAnimate = true;\n                    this.isFieldChange = false;\n                    break;\n                case 'fullRowSelect':\n                    this.setFullRow(this.fullRowSelect);\n                    this.addFullRow(this.fullRowSelect);\n                    break;\n                case 'loadOnDemand':\n                    if (this.loadOnDemand === false && !this.onLoaded) {\n                        var nodes = this.element.querySelectorAll('li');\n                        var i = 0;\n                        while (i < nodes.length) {\n                            if (nodes[i].getAttribute('aria-expanded') !== 'true') {\n                                this.renderChildNodes(nodes[i], true, null, true);\n                            }\n                            i++;\n                        }\n                        this.onLoaded = true;\n                    }\n                    break;\n                case 'nodeTemplate':\n                    this.hasTemplate = false;\n                    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n                    this.reRenderNodes();\n                    break;\n                case 'selectedNodes':\n                    this.removeSelectAll();\n                    this.setProperties({ selectedNodes: newProp.selectedNodes }, true);\n                    this.doSelectionAction();\n                    break;\n                case 'showCheckBox':\n                    this.reRenderNodes();\n                    break;\n                case 'sortOrder':\n                    this.reRenderNodes();\n                    break;\n                case 'fullRowNavigable':\n                    this.setProperties({ fullRowNavigable: newProp.fullRowNavigable }, true);\n                    this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\n                    this.reRenderNodes();\n                    break;\n            }\n        }\n    };\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n     */\n    TreeView.prototype.destroy = function () {\n        this.clearTemplate();\n        this.element.removeAttribute('aria-activedescendant');\n        this.element.removeAttribute('tabindex');\n        this.unWireEvents();\n        this.wireEditingEvents(false);\n        if (!this.disabled) {\n            this.rippleFn();\n            this.rippleIconFn();\n        }\n        this.setCssClass(this.cssClass, null);\n        this.setDragAndDrop(false);\n        this.setFullRow(false);\n        if (this.ulElement && this.ulElement.parentElement) {\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\n     * then the nodes are added as children of the given parentID or in the root level of TreeView.\n     * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\n     * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     */\n    TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\n        if (isNOU(nodes)) {\n            return;\n        }\n        nodes = JSON.parse(JSON.stringify(nodes));\n        var dropLi = this.getElement(target);\n        this.preventExpand = preventTargetExpand;\n        if (this.fields.dataSource instanceof DataManager) {\n            if (!this.isOffline) {\n                this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\n            }\n            else {\n                this.addSuccess(nodes, dropLi, index);\n            }\n        }\n        else if (this.dataType === 2) {\n            this.addGivenNodes(nodes, dropLi, index);\n        }\n        else {\n            if (dropLi) {\n                this.addGivenNodes(nodes, dropLi, index);\n            }\n            else {\n                nodes = this.getSortedData(nodes);\n                for (var i = 0; i < nodes.length; i++) {\n                    var pid = getValue(this.fields.parentID, nodes[i]);\n                    dropLi = pid ? this.getElement(pid.toString()) : pid;\n                    this.addGivenNodes([nodes[i]], dropLi, index);\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        this.updateCheckedStateFromDS();\n        if (this.showCheckBox && dropLi) {\n            this.ensureParentCheckState(dropLi);\n        }\n        if ((this.fields.dataSource instanceof DataManager === false)) {\n            this.preventExpand = false;\n            this.triggerEvent();\n        }\n    };\n    /**\n     * Instead of clicking on the TreeView node for editing, we can enable it by using\n     * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\n     * will be created for the particular node thus allowing us to edit it.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     */\n    TreeView.prototype.beginEdit = function (node) {\n        var ele = this.getElement(node);\n        if (isNOU(ele) || this.disabled) {\n            return;\n        }\n        this.createTextbox(ele, null);\n    };\n    /**\n     * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\n     * as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.checkAll = function (nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, true);\n        }\n    };\n    /**\n     * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\n     * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\n     * a specific level of nodes, set **level** as argument to collapseAll method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\n     * @param  {number} level - TreeView nodes will collapse up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\n     */\n    TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\n        if (!isNOU(nodes)) {\n            this.doGivenAction(nodes, COLLAPSIBLE, false);\n        }\n        else {\n            if (level > 0) {\n                this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.collapseAllNodes(excludeHiddenNodes);\n            }\n        }\n    };\n    /**\n     * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     */\n    TreeView.prototype.disableNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            this.doDisableAction(nodes);\n        }\n    };\n    /**\n     * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     */\n    TreeView.prototype.enableNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            this.doEnableAction(nodes);\n        }\n    };\n    /**\n     * Ensures visibility of the TreeView node by using node ID or node element.\n     * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\n     * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\n     */\n    TreeView.prototype.ensureVisible = function (node) {\n        var liEle = this.getElement(node);\n        if (isNOU(liEle)) {\n            return;\n        }\n        var parents = this.parents(liEle, '.' + LISTITEM);\n        this.expandAll(parents);\n        setTimeout(function () { liEle.scrollIntoView(true); }, 450);\n    };\n    /**\n     * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\n     * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\n     * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     * @param  {number} level - TreeView nodes will expand up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\n     */\n    TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {\n        if (!isNOU(nodes)) {\n            this.doGivenAction(nodes, EXPANDABLE, true);\n        }\n        else {\n            if (level > 0) {\n                this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.expandAllNodes(excludeHiddenNodes);\n            }\n        }\n    };\n    /**\n     * Gets all the checked nodes including child, whether it is loaded or not.\n     */\n    TreeView.prototype.getAllCheckedNodes = function () {\n        var checkNodes = this.checkedNodes;\n        return checkNodes;\n    };\n    /**\n    * Gets all the disabled nodes including child, whether it is loaded or not.\n    */\n    TreeView.prototype.getDisabledNodes = function () {\n        var disabledNodes = this.disableNode;\n        return disabledNodes;\n    };\n    /**\n     * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     */\n    TreeView.prototype.getNode = function (node) {\n        var ele = this.getElement(node);\n        return this.getNodeData(ele, true);\n    };\n    /**\n     * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\n     * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\n     * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\n     * of the corresponding node otherwise it will return the entire updated data source of TreeView.\n     * * The updated data source also contains custom attributes if you specified in data source.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     * @isGenericType true\n     */\n    TreeView.prototype.getTreeData = function (node) {\n        var id = this.getId(node);\n        this.updatePersistProp();\n        if (isNOU(id)) {\n            return this.treeData;\n        }\n        else {\n            var data = this.getNodeObject(id);\n            return isNOU(data) ? [] : [data];\n        }\n    };\n    /**\n     * Moves the collection of nodes within the same TreeView based on target or its index position.\n     * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {number} index - Specifies the index to place the moved nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     */\n    TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\n        var dropLi = this.getElement(target);\n        if (isNOU(dropLi)) {\n            return;\n        }\n        for (var i = 0; i < sourceNodes.length; i++) {\n            var dragLi = this.getElement(sourceNodes[i]);\n            if (isNOU(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                continue;\n            }\n            this.preventExpand = preventTargetExpand;\n            this.dropAsChildNode(dragLi, dropLi, this, index);\n        }\n        if (this.fields.dataSource instanceof DataManager === false) {\n            this.preventExpand = false;\n        }\n        this.triggerEvent();\n    };\n    /**\n     * Refreshes a particular node of the TreeView.\n     * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\n     * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\n     */\n    TreeView.prototype.refreshNode = function (target, newData) {\n        if (isNOU(target) || isNOU(newData)) {\n            return;\n        }\n        var id;\n        var isRefreshChild = false;\n        if (this.dataType == 1 && newData.length > 1) {\n            isRefreshChild = true;\n        }\n        else if (this.dataType == 2 && newData.length === 1) {\n            var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n            if (!isNOU(updatedChildValue)) {\n                isRefreshChild = true;\n            }\n        }\n        var liEle = this.getElement(target);\n        id = liEle ? liEle.getAttribute('data-uid') : ((target) ? target.toString() : null);\n        this.refreshData = this.getNodeObject(id);\n        newData = JSON.parse(JSON.stringify(newData));\n        /* eslint-disable */\n        var newNodeData;\n        var parentData;\n        if (this.dataType == 1 && isRefreshChild) {\n            for (var k = 0; k < newData.length; k++) {\n                if (isNOU(newData[k][this.fields.parentID])) {\n                    parentData = newData[k];\n                    newData.splice(k, 1);\n                    break;\n                }\n            }\n            newNodeData = extend({}, this.refreshData, parentData);\n        }\n        else {\n            newNodeData = extend({}, this.refreshData, newData[0]);\n        }\n        if (isNOU(liEle)) {\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            return;\n        }\n        this.isRefreshed = true;\n        var level = parseFloat(liEle.getAttribute('aria-level'));\n        var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n        var ul = select('.' + PARENTITEM, liEle);\n        var childItems = getValue(this.fields.child.toString(), newNodeData);\n        if ((isRefreshChild && ul) || (isRefreshChild && !isNOU(childItems))) {\n            var parentEle = liEle.parentElement;\n            var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);\n            remove(liEle);\n            parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            if (isRefreshChild && ul) {\n                this.expandAll([id]);\n            }\n        }\n        else {\n            var txtEle = select('.' + TEXTWRAP, liEle);\n            var newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n            var icon = select('div.' + ICON, txtEle);\n            var newIcon = select('div.' + ICON, newTextEle);\n            if (icon && newIcon) {\n                if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n                    removeClass([newIcon], EXPANDABLE);\n                    addClass([newIcon], COLLAPSIBLE);\n                }\n                else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n                    removeClass([newIcon], COLLAPSIBLE);\n                    addClass([newIcon], EXPANDABLE);\n                }\n                else if (icon.classList.contains('interaction')) {\n                    addClass([newIcon], 'interaction');\n                }\n            }\n            remove(txtEle);\n            var fullEle = select('.' + FULLROW, liEle);\n            fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n        }\n        liEle = this.getElement(target);\n        if (newNodeData[this.fields.tooltip]) {\n            liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n        }\n        if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n            var attr = {};\n            merge(attr, newNodeData[this.fields.htmlAttributes]);\n            if (attr.class) {\n                addClass([liEle], attr.class.split(' '));\n                delete attr.class;\n            }\n            else {\n                attributes(liEle, attr);\n            }\n        }\n        if (this.selectedNodes.indexOf(id) !== -1) {\n            liEle.setAttribute('aria-selected', 'true');\n            addClass([liEle], ACTIVE);\n        }\n        this.isRefreshed = false;\n        this.triggerEvent();\n    };\n    /**\n     * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.removeNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n                this.crudOperation('delete', nodes);\n            }\n            else {\n                this.deleteSuccess(nodes);\n            }\n        }\n    };\n    /**\n     * Replaces the text of the TreeView node with the given text.\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {string} newText - Specifies the new text of TreeView node.\n     */\n    TreeView.prototype.updateNode = function (target, newText) {\n        var _this = this;\n        if (isNOU(target) || isNOU(newText) || !this.allowEditing) {\n            return;\n        }\n        var liEle = this.getElement(target);\n        if (isNOU(liEle)) {\n            return;\n        }\n        var txtEle = select('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        var eventArgs = this.getEditEvent(liEle, null, null);\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                if (_this.fields.dataSource instanceof DataManager && !_this.isOffline) {\n                    _this.crudOperation('update', null, target, newText, null, null, false);\n                }\n                else {\n                    _this.appendNewText(liEle, txtEle, newText, false);\n                }\n            }\n        });\n    };\n    /**\n     * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\n     * as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.uncheckAll = function (nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, false);\n        }\n    };\n    var TreeView_1;\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowDragAndDrop\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowEditing\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowMultiSelection\", void 0);\n    __decorate([\n        Complex({}, NodeAnimationSettings)\n    ], TreeView.prototype, \"animation\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"checkedNodes\", void 0);\n    __decorate([\n        Property('')\n    ], TreeView.prototype, \"cssClass\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"disabled\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeView.prototype, \"dragArea\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"enablePersistence\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"expandedNodes\", void 0);\n    __decorate([\n        Property('Auto')\n    ], TreeView.prototype, \"expandOn\", void 0);\n    __decorate([\n        Complex({}, FieldsSettings)\n    ], TreeView.prototype, \"fields\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"fullRowSelect\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"loadOnDemand\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"locale\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"nodeTemplate\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"selectedNodes\", void 0);\n    __decorate([\n        Property('None')\n    ], TreeView.prototype, \"sortOrder\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"showCheckBox\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"autoCheck\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"fullRowNavigable\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"actionFailure\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"dataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"dataSourceChanged\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"drawNode\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"destroyed\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"keyPress\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeChecked\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeChecking\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeClicked\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeCollapsed\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeCollapsing\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragging\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragStop\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDropped\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeEdited\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeEditing\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeExpanded\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeExpanding\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeSelected\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeSelecting\", void 0);\n    TreeView = TreeView_1 = __decorate([\n        NotifyPropertyChanges\n    ], TreeView);\n    return TreeView;\n}(Component));\nexport { TreeView };\n"]},"metadata":{},"sourceType":"module"}