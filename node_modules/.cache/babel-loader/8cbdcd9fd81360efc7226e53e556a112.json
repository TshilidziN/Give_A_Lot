{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tshilidzi-PC\\\\Documents\\\\GitHub\\\\Givee\\\\Give-a-Lot\\\\frontend\\\\givealot\\\\src\\\\views\\\\verifyCertificate\\\\VerifyCertificate.js\";\nimport React, { Component } from 'react';\nimport backgroundImg from \"../../assets/homeBackground.jpg\";\nimport Logo from \"../login/Components/Logo\";\nimport { Link } from \"react-router-dom\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport \"./styles/VerifyCert.css\"; // import Dropzone from '../dropzone/Dropzone'\n\nimport Dropzone from \"./dropzone/Dropezone\";\nimport Progress from \"./progress/Progress\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  main: {\n    backgroundImage: `url(${backgroundImg})`\n  }\n};\nexport class VerifyCertificate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false\n    };\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n    this.renderActions = this.renderActions.bind(this);\n  }\n\n  onFilesAdded(files) {\n    this.setState(prevState => ({\n      files: prevState.files.concat(files)\n    }));\n  }\n\n  async uploadFiles() {\n    this.setState({\n      uploadProgress: {},\n      uploading: true\n    });\n    const promises = [];\n    this.state.files.forEach(file => {\n      promises.push(this.sendRequest(file));\n    });\n\n    try {\n      await Promise.all(promises);\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    } catch (e) {\n      // Not Production ready! Do some error handling here instead...\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    }\n  }\n\n  sendRequest(file) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener(\"progress\", event => {\n        if (event.lengthComputable) {\n          const copy = { ...this.state.uploadProgress\n          };\n          copy[file.name] = {\n            state: \"pending\",\n            percentage: event.loaded / event.total * 100\n          };\n          this.setState({\n            uploadProgress: copy\n          });\n        }\n      });\n      req.upload.addEventListener(\"load\", event => {\n        const copy = { ...this.state.uploadProgress\n        };\n        copy[file.name] = {\n          state: \"done\",\n          percentage: 100\n        };\n        this.setState({\n          uploadProgress: copy\n        });\n        resolve(req.response);\n      });\n      req.upload.addEventListener(\"error\", event => {\n        const copy = { ...this.state.uploadProgress\n        };\n        copy[file.name] = {\n          state: \"error\",\n          percentage: 0\n        };\n        this.setState({\n          uploadProgress: copy\n        });\n        reject(req.response);\n      });\n      const formData = new FormData();\n      formData.append(\"file\", file, file.name);\n      req.open(\"POST\", \"http://localhost:8000/upload\");\n      req.send(formData);\n    });\n  }\n\n  renderProgress(file) {\n    const uploadProgress = this.state.uploadProgress[file.name];\n\n    if (this.state.uploading || this.state.successfullUploaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ProgressWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Progress, {\n          progress: uploadProgress ? uploadProgress.percentage : 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CloudUploadIcon, {\n          className: \"CheckIcon\",\n          style: {\n            opacity: uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  renderActions() {\n    if (this.state.successfullUploaded) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState({\n          files: [],\n          successfullUploaded: false\n        }),\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: this.state.files.length < 0 || this.state.uploading,\n        onClick: this.uploadFiles,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verifyCert\",\n      style: styles.main,\n      children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n          style: {\n            color: \"white\",\n            marginLeft: \"30px\",\n            fontSize: \"xx-large\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fileUpload\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"verify\",\n            children: \"Verify Certificate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Upload\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"Title\",\n              children: \"Upload Certificate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"Content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Dropzone, {\n                  onFilesAdded: this.onFilesAdded,\n                  disabled: this.state.uploading || this.state.successfullUploaded\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"Files\",\n                children: this.state.files.map(file => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"Row\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"Filename\",\n                      children: file.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 171,\n                      columnNumber: 49\n                    }, this), this.renderProgress(file)]\n                  }, file.name, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 45\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"Actions\",\n              children: this.renderActions()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default VerifyCertificate;","map":{"version":3,"sources":["C:/Users/Tshilidzi-PC/Documents/GitHub/Givee/Give-a-Lot/frontend/givealot/src/views/verifyCertificate/VerifyCertificate.js"],"names":["React","Component","backgroundImg","Logo","Link","ArrowBackIcon","Dropzone","Progress","CloudUploadIcon","styles","main","backgroundImage","VerifyCertificate","constructor","props","state","files","uploading","uploadProgress","successfullUploaded","onFilesAdded","bind","uploadFiles","sendRequest","renderActions","setState","prevState","concat","promises","forEach","file","push","Promise","all","e","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","copy","name","percentage","loaded","total","response","formData","FormData","append","open","send","renderProgress","opacity","length","render","color","marginLeft","fontSize","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAO,yBAAP,C,CACA;;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,IAAI,EAAE;AACFC,IAAAA,eAAe,EAAG,OAAMT,aAAc;AADpC;AADK,CAAf;AAOA,OAAO,MAAMU,iBAAN,SAAgCX,SAAhC,CAA0C;AAE7CY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,SAAS,EAAE,KAFF;AAGTC,MAAAA,cAAc,EAAE,EAHP;AAITC,MAAAA,mBAAmB,EAAE;AAJZ,KAAb;AAOA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKG,aAAL,GAAqB,KAAKA,aAAL,CAAmBH,IAAnB,CAAwB,IAAxB,CAArB;AACH;;AAEDD,EAAAA,YAAY,CAACJ,KAAD,EAAQ;AAChB,SAAKS,QAAL,CAAcC,SAAS,KAAK;AACxBV,MAAAA,KAAK,EAAEU,SAAS,CAACV,KAAV,CAAgBW,MAAhB,CAAuBX,KAAvB;AADiB,KAAL,CAAvB;AAGH;;AAEgB,QAAXM,WAAW,GAAG;AAChB,SAAKG,QAAL,CAAc;AAAEP,MAAAA,cAAc,EAAE,EAAlB;AAAsBD,MAAAA,SAAS,EAAE;AAAjC,KAAd;AACA,UAAMW,QAAQ,GAAG,EAAjB;AACA,SAAKb,KAAL,CAAWC,KAAX,CAAiBa,OAAjB,CAAyBC,IAAI,IAAI;AAC7BF,MAAAA,QAAQ,CAACG,IAAT,CAAc,KAAKR,WAAL,CAAiBO,IAAjB,CAAd;AACH,KAFD;;AAGA,QAAI;AACA,YAAME,OAAO,CAACC,GAAR,CAAYL,QAAZ,CAAN;AAEA,WAAKH,QAAL,CAAc;AAAEN,QAAAA,mBAAmB,EAAE,IAAvB;AAA6BF,QAAAA,SAAS,EAAE;AAAxC,OAAd;AACH,KAJD,CAIE,OAAOiB,CAAP,EAAU;AACR;AACA,WAAKT,QAAL,CAAc;AAAEN,QAAAA,mBAAmB,EAAE,IAAvB;AAA6BF,QAAAA,SAAS,EAAE;AAAxC,OAAd;AACH;AACJ;;AAEDM,EAAAA,WAAW,CAACO,IAAD,EAAO;AACd,WAAO,IAAIE,OAAJ,CAAY,CAACG,OAAD,EAAUC,MAAV,KAAqB;AACpC,YAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AAEAD,MAAAA,GAAG,CAACE,MAAJ,CAAWC,gBAAX,CAA4B,UAA5B,EAAwCC,KAAK,IAAI;AAC7C,YAAIA,KAAK,CAACC,gBAAV,EAA4B;AACxB,gBAAMC,IAAI,GAAG,EAAE,GAAG,KAAK5B,KAAL,CAAWG;AAAhB,WAAb;AACAyB,UAAAA,IAAI,CAACb,IAAI,CAACc,IAAN,CAAJ,GAAkB;AACd7B,YAAAA,KAAK,EAAE,SADO;AAEd8B,YAAAA,UAAU,EAAGJ,KAAK,CAACK,MAAN,GAAeL,KAAK,CAACM,KAAtB,GAA+B;AAF7B,WAAlB;AAIA,eAAKtB,QAAL,CAAc;AAAEP,YAAAA,cAAc,EAAEyB;AAAlB,WAAd;AACH;AACJ,OATD;AAWAN,MAAAA,GAAG,CAACE,MAAJ,CAAWC,gBAAX,CAA4B,MAA5B,EAAoCC,KAAK,IAAI;AACzC,cAAME,IAAI,GAAG,EAAE,GAAG,KAAK5B,KAAL,CAAWG;AAAhB,SAAb;AACAyB,QAAAA,IAAI,CAACb,IAAI,CAACc,IAAN,CAAJ,GAAkB;AAAE7B,UAAAA,KAAK,EAAE,MAAT;AAAiB8B,UAAAA,UAAU,EAAE;AAA7B,SAAlB;AACA,aAAKpB,QAAL,CAAc;AAAEP,UAAAA,cAAc,EAAEyB;AAAlB,SAAd;AACAR,QAAAA,OAAO,CAACE,GAAG,CAACW,QAAL,CAAP;AACH,OALD;AAOAX,MAAAA,GAAG,CAACE,MAAJ,CAAWC,gBAAX,CAA4B,OAA5B,EAAqCC,KAAK,IAAI;AAC1C,cAAME,IAAI,GAAG,EAAE,GAAG,KAAK5B,KAAL,CAAWG;AAAhB,SAAb;AACAyB,QAAAA,IAAI,CAACb,IAAI,CAACc,IAAN,CAAJ,GAAkB;AAAE7B,UAAAA,KAAK,EAAE,OAAT;AAAkB8B,UAAAA,UAAU,EAAE;AAA9B,SAAlB;AACA,aAAKpB,QAAL,CAAc;AAAEP,UAAAA,cAAc,EAAEyB;AAAlB,SAAd;AACAP,QAAAA,MAAM,CAACC,GAAG,CAACW,QAAL,CAAN;AACH,OALD;AAOA,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBrB,IAAxB,EAA8BA,IAAI,CAACc,IAAnC;AAEAP,MAAAA,GAAG,CAACe,IAAJ,CAAS,MAAT,EAAiB,8BAAjB;AACAf,MAAAA,GAAG,CAACgB,IAAJ,CAASJ,QAAT;AACH,KAjCM,CAAP;AAkCH;;AAEDK,EAAAA,cAAc,CAACxB,IAAD,EAAO;AACjB,UAAMZ,cAAc,GAAG,KAAKH,KAAL,CAAWG,cAAX,CAA0BY,IAAI,CAACc,IAA/B,CAAvB;;AACA,QAAI,KAAK7B,KAAL,CAAWE,SAAX,IAAwB,KAAKF,KAAL,CAAWI,mBAAvC,EAA4D;AACxD,0BACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI,QAAC,QAAD;AAAU,UAAA,QAAQ,EAAED,cAAc,GAAGA,cAAc,CAAC2B,UAAlB,GAA+B;AAAjE;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,eAAD;AACI,UAAA,SAAS,EAAC,WADd;AAEI,UAAA,KAAK,EAAE;AACHU,YAAAA,OAAO,EACHrC,cAAc,IAAIA,cAAc,CAACH,KAAf,KAAyB,MAA3C,GAAoD,GAApD,GAA0D;AAF3D;AAFX;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAqBH;AACJ;;AAEDS,EAAAA,aAAa,GAAG;AACZ,QAAI,KAAKT,KAAL,CAAWI,mBAAf,EAAoC;AAChC,0BACI;AACI,QAAA,OAAO,EAAE,MACL,KAAKM,QAAL,CAAc;AAAET,UAAAA,KAAK,EAAE,EAAT;AAAaG,UAAAA,mBAAmB,EAAE;AAAlC,SAAd,CAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AASH,KAVD,MAUO;AACH,0BACI;AACI,QAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWC,KAAX,CAAiBwC,MAAjB,GAA0B,CAA1B,IAA+B,KAAKzC,KAAL,CAAWE,SADxD;AAEI,QAAA,OAAO,EAAE,KAAKK,WAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAQH;AACJ;;AAGDmC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,KAAK,EAAEhD,MAAM,CAACC,IAA1C;AAAA,8BACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAE,GAAV;AAAA,+BACI,QAAC,aAAD;AAAe,UAAA,KAAK,EAAE;AAACgD,YAAAA,KAAK,EAAE,OAAR;AAAiBC,YAAAA,UAAU,EAAE,MAA7B;AAAqCC,YAAAA,QAAQ,EAAE;AAA/C;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACI;AAAA,iCACI;AAAI,YAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA,oCACI;AAAM,cAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,sCACI;AAAA,uCACI,QAAC,QAAD;AACI,kBAAA,YAAY,EAAE,KAAKxC,YADvB;AAEI,kBAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWE,SAAX,IAAwB,KAAKF,KAAL,CAAWI;AAFjD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBADJ,eAOI;AAAK,gBAAA,SAAS,EAAC,OAAf;AAAA,0BACK,KAAKJ,KAAL,CAAWC,KAAX,CAAiB6C,GAAjB,CAAqB/B,IAAI,IAAI;AAC1B,sCACI;AAAqB,oBAAA,SAAS,EAAC,KAA/B;AAAA,4CACI;AAAM,sBAAA,SAAS,EAAC,UAAhB;AAAA,gCAA4BA,IAAI,CAACc;AAAjC;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEK,KAAKU,cAAL,CAAoBxB,IAApB,CAFL;AAAA,qBAAUA,IAAI,CAACc,IAAf;AAAA;AAAA;AAAA;AAAA,0BADJ;AAMH,iBAPA;AADL;AAAA;AAAA;AAAA;AAAA,sBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAoBI;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,wBAA0B,KAAKpB,aAAL;AAA1B;AAAA;AAAA;AAAA;AAAA,oBApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAsCH;;AAtK4C;AAyKjD,eAAeZ,iBAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport backgroundImg from \"../../assets/homeBackground.jpg\";\r\nimport Logo from \"../login/Components/Logo\";\r\nimport {Link} from \"react-router-dom\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport \"./styles/VerifyCert.css\"\r\n// import Dropzone from '../dropzone/Dropzone'\r\nimport Dropzone from \"./dropzone/Dropezone\"\r\nimport Progress from \"./progress/Progress\";\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nconst styles = {\r\n    main: {\r\n        backgroundImage: `url(${backgroundImg})`\r\n    }\r\n}\r\n\r\n\r\nexport class VerifyCertificate extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            files: [],\r\n            uploading: false,\r\n            uploadProgress: {},\r\n            successfullUploaded: false\r\n        };\r\n\r\n        this.onFilesAdded = this.onFilesAdded.bind(this);\r\n        this.uploadFiles = this.uploadFiles.bind(this);\r\n        this.sendRequest = this.sendRequest.bind(this);\r\n        this.renderActions = this.renderActions.bind(this);\r\n    }\r\n\r\n    onFilesAdded(files) {\r\n        this.setState(prevState => ({\r\n            files: prevState.files.concat(files)\r\n        }));\r\n    }\r\n\r\n    async uploadFiles() {\r\n        this.setState({ uploadProgress: {}, uploading: true });\r\n        const promises = [];\r\n        this.state.files.forEach(file => {\r\n            promises.push(this.sendRequest(file));\r\n        });\r\n        try {\r\n            await Promise.all(promises);\r\n\r\n            this.setState({ successfullUploaded: true, uploading: false });\r\n        } catch (e) {\r\n            // Not Production ready! Do some error handling here instead...\r\n            this.setState({ successfullUploaded: true, uploading: false });\r\n        }\r\n    }\r\n\r\n    sendRequest(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n\r\n            req.upload.addEventListener(\"progress\", event => {\r\n                if (event.lengthComputable) {\r\n                    const copy = { ...this.state.uploadProgress };\r\n                    copy[file.name] = {\r\n                        state: \"pending\",\r\n                        percentage: (event.loaded / event.total) * 100\r\n                    };\r\n                    this.setState({ uploadProgress: copy });\r\n                }\r\n            });\r\n\r\n            req.upload.addEventListener(\"load\", event => {\r\n                const copy = { ...this.state.uploadProgress };\r\n                copy[file.name] = { state: \"done\", percentage: 100 };\r\n                this.setState({ uploadProgress: copy });\r\n                resolve(req.response);\r\n            });\r\n\r\n            req.upload.addEventListener(\"error\", event => {\r\n                const copy = { ...this.state.uploadProgress };\r\n                copy[file.name] = { state: \"error\", percentage: 0 };\r\n                this.setState({ uploadProgress: copy });\r\n                reject(req.response);\r\n            });\r\n\r\n            const formData = new FormData();\r\n            formData.append(\"file\", file, file.name);\r\n\r\n            req.open(\"POST\", \"http://localhost:8000/upload\");\r\n            req.send(formData);\r\n        });\r\n    }\r\n\r\n    renderProgress(file) {\r\n        const uploadProgress = this.state.uploadProgress[file.name];\r\n        if (this.state.uploading || this.state.successfullUploaded) {\r\n            return (\r\n                <div className=\"ProgressWrapper\">\r\n                    <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\r\n                    <CloudUploadIcon\r\n                        className=\"CheckIcon\"\r\n                        style={{\r\n                            opacity:\r\n                                uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\r\n                        }}\r\n                    />\r\n                    {/*<img*/}\r\n                    {/*    className=\"CheckIcon\"*/}\r\n                    {/*    alt=\"done\"*/}\r\n                    {/*    src=\"baseline-check_circle_outline-24px.svg\"*/}\r\n                    {/*    style={{*/}\r\n                    {/*        opacity:*/}\r\n                    {/*            uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0*/}\r\n                    {/*    }}*/}\r\n                    {/*/>*/}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderActions() {\r\n        if (this.state.successfullUploaded) {\r\n            return (\r\n                <button\r\n                    onClick={() =>\r\n                        this.setState({ files: [], successfullUploaded: false })\r\n                    }\r\n                >\r\n                    Clear\r\n                </button>\r\n            );\r\n        } else {\r\n            return (\r\n                <button\r\n                    disabled={this.state.files.length < 0 || this.state.uploading}\r\n                    onClick={this.uploadFiles}\r\n                >\r\n                    Upload\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"verifyCert\" style={styles.main}>\r\n                <Logo/>\r\n                <Link to={\"/\"}>\r\n                    <ArrowBackIcon style={{color: \"white\", marginLeft: \"30px\", fontSize: \"xx-large\"}}/>\r\n                </Link>\r\n                <div className=\"fileUpload\" >\r\n                    <div>\r\n                        <h3 className=\"verify\">Verify Certificate</h3>\r\n                    </div>\r\n                    <div className=\"upload\">\r\n                        <div className=\"Upload\">\r\n                            <span className=\"Title\">Upload Certificate</span>\r\n                            <div className=\"Content\">\r\n                                <div>\r\n                                    <Dropzone\r\n                                        onFilesAdded={this.onFilesAdded}\r\n                                        disabled={this.state.uploading || this.state.successfullUploaded}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"Files\">\r\n                                    {this.state.files.map(file => {\r\n                                        return (\r\n                                            <div key={file.name} className=\"Row\">\r\n                                                <span className=\"Filename\">{file.name}</span>\r\n                                                {this.renderProgress(file)}\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"Actions\">{this.renderActions()}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VerifyCertificate"]},"metadata":{},"sourceType":"module"}