{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tshilidzi-PC\\\\Documents\\\\GitHub\\\\Givee\\\\Give-a-Lot\\\\frontend\\\\givealot\\\\src\\\\components\\\\admin\\\\emails\\\\Emails.js\";\n// // import React, { Component } from 'react'\n// // import Mailer from \"./Mailer\"\n// // import \"./Email.css\"\n// //\n// //\n// // export class Emails extends Component {\n// //\n// //     render() {\n// //         return (\n// //             <div className=\"email\">\n// //                 <Mailer/>\n// //             </div>\n// //         )\n// //     }\n// // }\n// //\n// // export default Emails\n//\n// import React from 'react';\n// import axios from 'axios';\n//\n// class Emails extends React.Component {\n//\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             name: '',\n//             email: '',\n//             message: ''\n//         }\n//     }\n//\n//     handleSubmit(e){\n//         e.preventDefault();\n//         axios({\n//             method: \"POST\",\n//             url:\"http://localhost:3002/send\",\n//             data:  this.state\n//         }).then((response)=>{\n//             if (response.data.status === 'success') {\n//                 alert(\"Message Sent.\");\n//                 this.resetForm()\n//             } else if (response.data.status === 'fail') {\n//                 alert(\"Message failed to send.\")\n//             }\n//         })\n//     }\n//\n//     resetForm(){\n//         this.setState({name: '', email: '', message: ''})\n//     }\n//\n//     render() {\n//         return(\n//             <div className=\"App\">\n//                 {/*<form id=\"contact-form\" onSubmit={this.handleSubmit.bind(this)} method=\"POST\">*/}\n//                 {/*    <div className=\"form-group\">*/}\n//                 {/*        <label htmlFor=\"name\">Name</label>*/}\n//                 {/*        <input type=\"text\" className=\"form-control\" id=\"name\" value={this.state.name} onChange={this.onNameChange.bind(this)} />*/}\n//                 {/*    </div>*/}\n//                 {/*    <div className=\"form-group\">*/}\n//                 {/*        <label htmlFor=\"exampleInputEmail1\">Email address</label>*/}\n//                 {/*        <input type=\"email\" className=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" value={this.state.email} onChange={this.onEmailChange.bind(this)} />*/}\n//                 {/*    </div>*/}\n//                 {/*    <div className=\"form-group\">*/}\n//                 {/*        <label htmlFor=\"message\">Message</label>*/}\n//                 {/*        <textarea className=\"form-control\" rows=\"5\" id=\"message\" value={this.state.message} onChange={this.onMessageChange.bind(this)} />*/}\n//                 {/*    </div>*/}\n//                 {/*    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>*/}\n//                 {/*</form>*/}\n//                 {/*<div*/}\n//                 {/*    // id=\"composeModal\"*/}\n//                 {/*    className=\"modal fade mt-0 mt-md-5\"*/}\n//                 {/*    tabIndex=\"-1\"*/}\n//                 {/*    role=\"dialog\"*/}\n//                 {/*    aria-hidden=\"true\"*/}\n//                 {/*    // ref=\"composeModal\"*/}\n//                 {/*>*/}\n//\n//             <div className=\"modal-body\">\n//                 <form className=\"form\" autoComplete=\"off\">\n//                     <div className=\"form-row py-2\">\n//                         <label htmlFor=\"sendTo\" className=\"col-sm-2 mb-0\">\n//                             To\n//                         </label>\n//                         <div className=\"col\">\n//                             <input\n//                                 type=\"text\"\n//                                 name=\"sendTo\"\n//                                 id=\"sendTo\"\n//                                 className=\"form-control\"\n//                                 required=\"\"\n//                                 // value={this.props.sendTo}\n//                             />\n//                         </div>\n//                     </div>\n//                     <div className=\"form-row py-2\">\n//                         <label htmlFor=\"subject\" className=\"col-sm-2 mb-0\">\n//                             Subject\n//                         </label>\n//                         <div className=\"col\">\n//                             <input\n//                                 type=\"text\"\n//                                 name=\"subject\"\n//                                 id=\"subject\"\n//                                 className=\"form-control\"\n//                                 required=\"\"\n//                             />\n//                         </div>\n//                     </div>\n//                     <div className=\"form-row py-2\">\n//                         <label htmlFor=\"message2\" className=\"col-sm-2 mb-0\">\n//                             Message\n//                         </label>\n//                         <div className=\"col\">\n//                             <textarea\n//                                 rows=\"6\"\n//                                 name=\"message2\"\n//                                 id=\"message2\"\n//                                 className=\"form-control\"\n//                                 required=\"\"\n//                             />\n//                         </div>\n//                     </div>\n//                     <div className=\"form-row py-2\">\n//                         <div className=\"col-sm-auto py-1\">\n//                             <button\n//                                 type=\"submit\"\n//                                 className=\"btn btn-outline-secondary btn-block\"\n//                             >\n//                                 Attachments\n//                                 <i className=\"align-middle icon-paper-clip fa fa-paperclip ml-1\" />\n//                             </button>\n//                         </div>\n//                         <div className=\"col py-1\">\n//                             <button\n//                                 type=\"submit\"\n//                                 className=\"btn btn-secondary float-right ml-1\"\n//                             >\n//                                 Send Message\n//                             </button>\n//                             <button\n//                                 type=\"submit\"\n//                                 className=\"btn btn-outline-secondary float-right\"\n//                             >\n//                                 Save Draft\n//                             </button>\n//                         </div>\n//                     </div>\n//                 </form>\n//             </div>\n//     </div>\n//     );\n//     }\n//\n//     // onNameChange(event) {\n//     //     this.setState({name: event.target.value})\n//     // }\n//     //\n//     // onEmailChange(event) {\n//     //     this.setState({email: event.target.value})\n//     // }\n//     //\n//     // onMessageChange(event) {\n//     //     this.setState({message: event.target.value})\n//     // }\n// }\n//\n// export default Emails;\nimport React, { Component } from 'react';\nimport ToolbarComponent from './ToolbarComponent';\nimport MessagesComponent from './MessagesComponent';\nimport ComposeMessageComponent from './ComposeMessageComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Emails extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      messages: []\n    };\n\n    this.componentDidMount = async () => {\n      const response = await fetch('http://localhost:8082/api/messages');\n      const messages = await response.json();\n      this.setState({\n        messages: [...this.state.messages, ...messages.map(message => ({ ...message,\n          selected: false\n        }))],\n        display: false\n      });\n    };\n\n    this.toggleCompose = () => {\n      this.setState({\n        display: !this.state.display\n      });\n    };\n\n    this.toggleSelectAll = () => {\n      const selectedMessages = this.state.messages.filter(message => message.selected);\n      const selected = selectedMessages.length !== this.state.messages.length;\n      this.setState({\n        messages: this.state.messages.map(message => message.selected !== selected ? { ...message,\n          selected\n        } : message)\n      });\n    };\n\n    this.toggleProperty = async (message, property) => {\n      const index = this.state.messages.indexOf(message);\n      this.setState({\n        messages: [...this.state.messages.slice(0, index), { ...message,\n          [property]: !message[property]\n        }, ...this.state.messages.slice(index + 1)]\n      });\n    };\n\n    this.toggleStar = async message => {\n      await fetch('http://localhost:8082/api/messages', {\n        method: 'PATCH',\n        body: JSON.stringify({\n          messageIds: [message.id],\n          command: 'star',\n          star: message.starred\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      this.toggleProperty(message, 'starred');\n    };\n\n    this.toggleSelect = message => {\n      this.toggleProperty(message, 'selected');\n    };\n\n    this.addMessage = async composeMessage => {\n      const {\n        subject,\n        body\n      } = composeMessage;\n      const response = await fetch('http://localhost:8082/api/messages', {\n        method: 'POST',\n        body: JSON.stringify({\n          subject,\n          body\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      const message = await response.json(); // console.log('messages==> ', this.state.messages);\n      // console.log('new message==> ', message);\n\n      this.setState({\n        messages: [...this.state.messages, message],\n        display: !this.state.display\n      });\n      console.log(this.state);\n    };\n\n    this.deleteMessages = async () => {\n      const messages = this.state.messages.filter(message => !message.selected); // Filter out the selected messages\n\n      const selectedMessages = this.state.messages.filter(message => message.selected);\n      await fetch('http://localhost:8082/api/messages', {\n        method: 'PATCH',\n        body: JSON.stringify({\n          messageIds: [...selectedMessages.map(message => message.id)],\n          command: 'delete'\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      this.setState({\n        messages\n      });\n    };\n\n    this.applyLabel = async label => {\n      const messages = this.state.messages.map(message => message.selected && !message.labels.includes(label) ? { ...message,\n        labels: [...message.labels, label].sort()\n      } : message); // Filter out the selected messages\n\n      const selectedMessages = this.state.messages.filter(message => message.selected);\n      await fetch('http://localhost:8082/api/messages', {\n        method: 'PATCH',\n        body: JSON.stringify({\n          messageIds: [...selectedMessages.map(message => message.id)],\n          command: 'addLabel',\n          label\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      this.setState({\n        messages\n      });\n    };\n\n    this.removeLabel = async label => {\n      const messages = this.state.messages.map(message => {\n        const index = message.labels.indexOf(label);\n\n        if (message.selected && index > -1) {\n          return { ...message,\n            labels: [...message.labels.slice(0, index), ...message.labels.slice(index + 1)]\n          };\n        }\n\n        return message;\n      }); // Filter out the selected messages\n\n      const selectedMessages = this.state.messages.filter(message => message.selected);\n      await fetch('http://localhost:8082/api/messages', {\n        method: 'PATCH',\n        body: JSON.stringify({\n          messageIds: [...selectedMessages.map(message => message.id)],\n          command: 'removeLabel',\n          label\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      this.setState({\n        messages\n      });\n    };\n  }\n\n  // ================================================\n  // Render\n  // ================================================\n  render() {\n    // console.log(this.state)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ToolbarComponent, {\n        messages: this.state.messages,\n        toggleCompose: this.toggleCompose,\n        toggleSelectAll: this.toggleSelectAll,\n        markReadStatus: this.markReadStatus,\n        deleteMessages: this.deleteMessages,\n        applyLabel: this.applyLabel,\n        removeLabel: this.removeLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ComposeMessageComponent, {\n        display: this.state.display,\n        addMessage: this.addMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MessagesComponent, {\n        messages: this.state.messages,\n        toggleStar: this.toggleStar,\n        toggleSelect: this.toggleSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Emails;","map":{"version":3,"sources":["C:/Users/Tshilidzi-PC/Documents/GitHub/Givee/Give-a-Lot/frontend/givealot/src/components/admin/emails/Emails.js"],"names":["React","Component","ToolbarComponent","MessagesComponent","ComposeMessageComponent","Emails","state","messages","componentDidMount","response","fetch","json","setState","map","message","selected","display","toggleCompose","toggleSelectAll","selectedMessages","filter","length","toggleProperty","property","index","indexOf","slice","toggleStar","method","body","JSON","stringify","messageIds","id","command","star","starred","headers","toggleSelect","addMessage","composeMessage","subject","console","log","deleteMessages","applyLabel","label","labels","includes","sort","removeLabel","render","markReadStatus"],"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","sourcesContent":["// // import React, { Component } from 'react'\r\n// // import Mailer from \"./Mailer\"\r\n// // import \"./Email.css\"\r\n// //\r\n// //\r\n// // export class Emails extends Component {\r\n// //\r\n// //     render() {\r\n// //         return (\r\n// //             <div className=\"email\">\r\n// //                 <Mailer/>\r\n// //             </div>\r\n// //         )\r\n// //     }\r\n// // }\r\n// //\r\n// // export default Emails\r\n//\r\n// import React from 'react';\r\n// import axios from 'axios';\r\n//\r\n// class Emails extends React.Component {\r\n//\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             name: '',\r\n//             email: '',\r\n//             message: ''\r\n//         }\r\n//     }\r\n//\r\n//     handleSubmit(e){\r\n//         e.preventDefault();\r\n//         axios({\r\n//             method: \"POST\",\r\n//             url:\"http://localhost:3002/send\",\r\n//             data:  this.state\r\n//         }).then((response)=>{\r\n//             if (response.data.status === 'success') {\r\n//                 alert(\"Message Sent.\");\r\n//                 this.resetForm()\r\n//             } else if (response.data.status === 'fail') {\r\n//                 alert(\"Message failed to send.\")\r\n//             }\r\n//         })\r\n//     }\r\n//\r\n//     resetForm(){\r\n//         this.setState({name: '', email: '', message: ''})\r\n//     }\r\n//\r\n//     render() {\r\n//         return(\r\n//             <div className=\"App\">\r\n//                 {/*<form id=\"contact-form\" onSubmit={this.handleSubmit.bind(this)} method=\"POST\">*/}\r\n//                 {/*    <div className=\"form-group\">*/}\r\n//                 {/*        <label htmlFor=\"name\">Name</label>*/}\r\n//                 {/*        <input type=\"text\" className=\"form-control\" id=\"name\" value={this.state.name} onChange={this.onNameChange.bind(this)} />*/}\r\n//                 {/*    </div>*/}\r\n//                 {/*    <div className=\"form-group\">*/}\r\n//                 {/*        <label htmlFor=\"exampleInputEmail1\">Email address</label>*/}\r\n//                 {/*        <input type=\"email\" className=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" value={this.state.email} onChange={this.onEmailChange.bind(this)} />*/}\r\n//                 {/*    </div>*/}\r\n//                 {/*    <div className=\"form-group\">*/}\r\n//                 {/*        <label htmlFor=\"message\">Message</label>*/}\r\n//                 {/*        <textarea className=\"form-control\" rows=\"5\" id=\"message\" value={this.state.message} onChange={this.onMessageChange.bind(this)} />*/}\r\n//                 {/*    </div>*/}\r\n//                 {/*    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>*/}\r\n//                 {/*</form>*/}\r\n//                 {/*<div*/}\r\n//                 {/*    // id=\"composeModal\"*/}\r\n//                 {/*    className=\"modal fade mt-0 mt-md-5\"*/}\r\n//                 {/*    tabIndex=\"-1\"*/}\r\n//                 {/*    role=\"dialog\"*/}\r\n//                 {/*    aria-hidden=\"true\"*/}\r\n//                 {/*    // ref=\"composeModal\"*/}\r\n//                 {/*>*/}\r\n//\r\n//             <div className=\"modal-body\">\r\n//                 <form className=\"form\" autoComplete=\"off\">\r\n//                     <div className=\"form-row py-2\">\r\n//                         <label htmlFor=\"sendTo\" className=\"col-sm-2 mb-0\">\r\n//                             To\r\n//                         </label>\r\n//                         <div className=\"col\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 name=\"sendTo\"\r\n//                                 id=\"sendTo\"\r\n//                                 className=\"form-control\"\r\n//                                 required=\"\"\r\n//                                 // value={this.props.sendTo}\r\n//                             />\r\n//                         </div>\r\n//                     </div>\r\n//                     <div className=\"form-row py-2\">\r\n//                         <label htmlFor=\"subject\" className=\"col-sm-2 mb-0\">\r\n//                             Subject\r\n//                         </label>\r\n//                         <div className=\"col\">\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 name=\"subject\"\r\n//                                 id=\"subject\"\r\n//                                 className=\"form-control\"\r\n//                                 required=\"\"\r\n//                             />\r\n//                         </div>\r\n//                     </div>\r\n//                     <div className=\"form-row py-2\">\r\n//                         <label htmlFor=\"message2\" className=\"col-sm-2 mb-0\">\r\n//                             Message\r\n//                         </label>\r\n//                         <div className=\"col\">\r\n//                             <textarea\r\n//                                 rows=\"6\"\r\n//                                 name=\"message2\"\r\n//                                 id=\"message2\"\r\n//                                 className=\"form-control\"\r\n//                                 required=\"\"\r\n//                             />\r\n//                         </div>\r\n//                     </div>\r\n//                     <div className=\"form-row py-2\">\r\n//                         <div className=\"col-sm-auto py-1\">\r\n//                             <button\r\n//                                 type=\"submit\"\r\n//                                 className=\"btn btn-outline-secondary btn-block\"\r\n//                             >\r\n//                                 Attachments\r\n//                                 <i className=\"align-middle icon-paper-clip fa fa-paperclip ml-1\" />\r\n//                             </button>\r\n//                         </div>\r\n//                         <div className=\"col py-1\">\r\n//                             <button\r\n//                                 type=\"submit\"\r\n//                                 className=\"btn btn-secondary float-right ml-1\"\r\n//                             >\r\n//                                 Send Message\r\n//                             </button>\r\n//                             <button\r\n//                                 type=\"submit\"\r\n//                                 className=\"btn btn-outline-secondary float-right\"\r\n//                             >\r\n//                                 Save Draft\r\n//                             </button>\r\n//                         </div>\r\n//                     </div>\r\n//                 </form>\r\n//             </div>\r\n//     </div>\r\n//     );\r\n//     }\r\n//\r\n//     // onNameChange(event) {\r\n//     //     this.setState({name: event.target.value})\r\n//     // }\r\n//     //\r\n//     // onEmailChange(event) {\r\n//     //     this.setState({email: event.target.value})\r\n//     // }\r\n//     //\r\n//     // onMessageChange(event) {\r\n//     //     this.setState({message: event.target.value})\r\n//     // }\r\n// }\r\n//\r\n// export default Emails;\r\n\r\nimport React, { Component } from 'react';\r\nimport ToolbarComponent from './ToolbarComponent'\r\nimport MessagesComponent from './MessagesComponent'\r\nimport ComposeMessageComponent from './ComposeMessageComponent'\r\n\r\nclass Emails extends Component {\r\n\r\n    // ================================================\r\n    // STATE\r\n    // ================================================\r\n\r\n    // state = {\r\n    //   messages: this.props.messages\r\n    // };\r\n\r\n    state = {\r\n        messages: []\r\n    }\r\n\r\n    // ================================================\r\n    // React Life Cycle\r\n    // ================================================\r\n    componentDidMount = async () => {\r\n        const response = await fetch('http://localhost:8082/api/messages')\r\n        const messages = await response.json()\r\n\r\n        this.setState({\r\n            messages: [\r\n                ...this.state.messages,\r\n                ...messages.map(message => ({\r\n                    ...message,\r\n                    selected: false\r\n                }))\r\n            ],\r\n            display: false\r\n        })\r\n    }\r\n\r\n    // ================================================\r\n    // Toggle Compose\r\n    // ================================================\r\n    toggleCompose = () => {\r\n        this.setState({ display: !this.state.display })\r\n    }\r\n\r\n    // ================================================\r\n    // Toggle Select All\r\n    // ================================================\r\n    toggleSelectAll = () => {\r\n        const selectedMessages = this.state.messages.filter(message => message.selected)\r\n\r\n        const selected = selectedMessages.length !== this.state.messages.length\r\n        this.setState({\r\n            messages: this.state.messages.map(message => message.selected !== selected ? { ...message, selected } : message)\r\n        })\r\n    }\r\n\r\n    // ================================================\r\n    // Toggle Property\r\n    // ================================================\r\n    // toggleProperty(message, property) {\r\n    //   const index = this.state.messages.indexOf(message);\r\n    //   this.setState({\r\n    //     messages: [\r\n    //       ...this.state.messages.slice(0, index),\r\n    //       {...message, [property]: !message[property]},\r\n    //       ...this.state.messages.slice(index + 1)\r\n    //     ]\r\n    //   });\r\n    // }\r\n\r\n    toggleProperty = async (message, property) => {\r\n        const index = this.state.messages.indexOf(message)\r\n\r\n        this.setState({\r\n            messages: [\r\n                ...this.state.messages.slice(0, index),\r\n                { ...message, [property]: !message[property] },\r\n                ...this.state.messages.slice(index + 1)\r\n            ]\r\n        })\r\n    }\r\n\r\n    // ================================================\r\n    // Toggle Start\r\n    // ================================================\r\n    // toggleStar = message => {\r\n    //   this.toggleProperty(message, 'starred');\r\n    // }\r\n\r\n    toggleStar = async message => {\r\n        await fetch('http://localhost:8082/api/messages', {\r\n            method: 'PATCH',\r\n            body: JSON.stringify({\r\n                messageIds: [message.id],\r\n                command: 'star',\r\n                star: message.starred\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n\r\n        this.toggleProperty(message, 'starred')\r\n    }\r\n\r\n    // ================================================\r\n    // Toggle Select\r\n    // ================================================\r\n    toggleSelect = message => {\r\n        this.toggleProperty(message, 'selected');\r\n    }\r\n\r\n    // ================================================\r\n    // Mark Read Status\r\n    // ================================================\r\n    // markReadStatus = readStatus => {\r\n    //   this.setState({\r\n    //     messages: this.state.messages.map(\r\n    //       message =>\r\n    //       message.selected ? {...message, read: readStatus} : message\r\n    //     )\r\n    //   })\r\n    // }\r\n\r\n    // markReadStatus = async readStatus => {\r\n    //     // Filter out the selected messages\r\n    //     const selectedMessages = this.state.messages.filter(message => message.selected)\r\n    //\r\n    //     await fetch('http://localhost:8082/api/messages', {\r\n    //         method: 'PATCH',\r\n    //         body: JSON.stringify({\r\n    //             messageIds: [...selectedMessages.map(message => message.id)],\r\n    //             command: 'read',\r\n    //             read: readStatus\r\n    //         }),\r\n    //         headers: {\r\n    //             'Content-Type': 'application/json',\r\n    //             'Accept': 'application/json'\r\n    //         }\r\n    //     })\r\n    //\r\n    //     this.setState({\r\n    //         messages: this.state.messages.map(message => (message.selected ? {...message, read: readStatus} : message))\r\n    //     })\r\n    // }\r\n\r\n    // ================================================\r\n    // Add Message\r\n    // ================================================\r\n    addMessage = async (composeMessage) => {\r\n        const { subject, body } = composeMessage\r\n        const response = await fetch('http://localhost:8082/api/messages', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                subject,\r\n                body\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n        const message = await response.json()\r\n        // console.log('messages==> ', this.state.messages);\r\n        // console.log('new message==> ', message);\r\n\r\n        this.setState({\r\n            messages: [\r\n                ...this.state.messages,\r\n                message\r\n            ],\r\n            display: !this.state.display\r\n        })\r\n        console.log(this.state);\r\n    }\r\n\r\n    // ================================================\r\n    // Delete Messages\r\n    // ================================================\r\n    // deleteMessages = () => {\r\n    //   const messages = this.state.messages.filter(\r\n    //     messages => !messages.selected\r\n    //   );\r\n    //   this.setState({messages})\r\n    // }\r\n\r\n    deleteMessages = async () => {\r\n        const messages = this.state.messages.filter(message => !message.selected);\r\n        // Filter out the selected messages\r\n        const selectedMessages = this.state.messages.filter(message => message.selected)\r\n\r\n        await fetch('http://localhost:8082/api/messages', {\r\n            method: 'PATCH',\r\n            body: JSON.stringify({\r\n                messageIds: [...selectedMessages.map(message => message.id)],\r\n                command: 'delete'\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n\r\n        this.setState({ messages })\r\n    }\r\n\r\n    // ================================================\r\n    // Apply Label Category\r\n    // ================================================\r\n    // applyLabel = label => {\r\n    //   const messages = this.state.messages.map(message =>\r\n    //     message.selected && !message.labels.includes(label) ?\r\n    //     {...message, labels: [...message.labels, label].sort()}\r\n    //     : message\r\n    //   );\r\n    //   this.setState({messages})\r\n    // };\r\n\r\n    applyLabel = async label => {\r\n        const messages = this.state.messages.map(message =>\r\n            message.selected && !message.labels.includes(label)\r\n                ? {...message, labels: [...message.labels, label].sort()}\r\n                : message\r\n        )\r\n        // Filter out the selected messages\r\n        const selectedMessages = this.state.messages.filter(message => message.selected)\r\n\r\n        await fetch('http://localhost:8082/api/messages', {\r\n            method: 'PATCH',\r\n            body: JSON.stringify({\r\n                messageIds: [...selectedMessages.map(message => message.id)],\r\n                command: 'addLabel',\r\n                label\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n\r\n        this.setState({ messages })\r\n    }\r\n\r\n    // ================================================\r\n    // Remove Label\r\n    // ================================================\r\n    // removeLabel = label => {\r\n    //   const messages = this.state.messages.map(\r\n    //     message => {\r\n    //       const index = message.labels.indexOf(label)\r\n    //       if (message.selected && index > -1) {\r\n    //         return {...message, labels: [\r\n    //           ...message.labels.slice(0, index),\r\n    //           ...message.labels.slice(index + 1)\r\n    //           ]\r\n    //         }\r\n    //       }\r\n    //       return message;\r\n    //     });\r\n    //   this.setState({messages})\r\n    // };\r\n\r\n    removeLabel = async label => {\r\n        const messages = this.state.messages.map(message => {\r\n            const index = message.labels.indexOf(label)\r\n            if (message.selected && index > -1) {\r\n                return {\r\n                    ...message,\r\n                    labels: [\r\n                        ...message.labels.slice(0, index),\r\n                        ...message.labels.slice(index + 1)\r\n                    ]\r\n                }\r\n            }\r\n            return message\r\n        })\r\n        // Filter out the selected messages\r\n        const selectedMessages = this.state.messages.filter(message => message.selected)\r\n\r\n        await fetch('http://localhost:8082/api/messages', {\r\n            method: 'PATCH',\r\n            body: JSON.stringify({\r\n                messageIds: [...selectedMessages.map(message => message.id)],\r\n                command: 'removeLabel',\r\n                label\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n\r\n        this.setState({ messages })\r\n    }\r\n\r\n    // ================================================\r\n    // Render\r\n    // ================================================\r\n    render() {\r\n        // console.log(this.state)\r\n        return (\r\n            <div className=\"App\">\r\n                <ToolbarComponent\r\n                    messages={this.state.messages}\r\n                    toggleCompose={this.toggleCompose}\r\n                    toggleSelectAll={this.toggleSelectAll}\r\n                    markReadStatus={this.markReadStatus}\r\n                    deleteMessages={this.deleteMessages}\r\n                    applyLabel={this.applyLabel}\r\n                    removeLabel={this.removeLabel}\r\n                />\r\n                <ComposeMessageComponent\r\n                    display={this.state.display}\r\n                    addMessage={this.addMessage}\r\n                />\r\n                <MessagesComponent\r\n                    messages={this.state.messages}\r\n                    toggleStar={this.toggleStar}\r\n                    toggleSelect={this.toggleSelect}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Emails;\r\n"]},"metadata":{},"sourceType":"module"}