{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tshilidzi-PC\\\\Documents\\\\GitHub\\\\Givee\\\\Give-a-Lot\\\\frontend\\\\givealot\\\\src\\\\views\\\\dashboard\\\\sidebar\\\\Components\\\\BlurImages\\\\BlurImages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport \"./Blur.css\";\nimport { Box, TextField } from \"@material-ui/core\";\nimport blurredFallback from '../../../../../assets/blurredFallback.jpeg';\nimport { Alert } from \"@material-ui/lab\";\nimport { ApiContext } from \"../../../../../apiContext/ApiContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BlurImages() {\n  _s();\n\n  let [current_image, set_current_image] = useState(blurredFallback);\n  const [serverDomain, setServerDomain] = useState(useContext(ApiContext));\n\n  const uploadImage = event => {\n    const form_data = new FormData();\n    form_data.append('orgId', localStorage.getItem('id'));\n    form_data.append('image', event.target.files[0]);\n    form_data.append('type', 1);\n    alert(serverDomain);\n    document.getElementById(\"processing_photo_info\").style.display = \"flex\";\n    fetch(serverDomain + '/v1/frecognition/blur', {\n      method: 'POST',\n      body: form_data\n    }).then(response => response.json()).then(result => {\n      set_current_image(serverDomain + \"/pixelorblur/version/\" + localStorage.getItem('id'));\n      document.getElementById(\"processing_photo_info\").style.display = \"none\";\n    }).catch(error => {\n      console.error('Error:', error.response);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blur\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      id: \"blur-image-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upload an image to blur faces\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        className: \"blur-image-input\",\n        id: \"blur-image-input\",\n        variant: \"outlined\",\n        type: \"file\",\n        onChange: uploadImage,\n        accept: \"image/*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        severity: 'info',\n        id: \"processing_photo_info\",\n        children: \"please wait while we process the photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"blurred_image_here\",\n          src: current_image,\n          width: 400\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BlurImages, \"FpKn8EX4iRljQd/u2sqUIrA1bFc=\");\n\n_c = BlurImages;\nexport default BlurImages;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlurImages\");","map":{"version":3,"sources":["C:/Users/Tshilidzi-PC/Documents/GitHub/Givee/Give-a-Lot/frontend/givealot/src/views/dashboard/sidebar/Components/BlurImages/BlurImages.js"],"names":["React","useContext","useEffect","useState","Box","TextField","blurredFallback","Alert","ApiContext","BlurImages","current_image","set_current_image","serverDomain","setServerDomain","uploadImage","event","form_data","FormData","append","localStorage","getItem","target","files","alert","document","getElementById","style","display","fetch","method","body","then","response","json","result","catch","error","console"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AACA,OAAO,YAAP;AACA,SAAQC,GAAR,EAAaC,SAAb,QAA6B,mBAA7B;AACA,OAAOC,eAAP,MAA4B,4CAA5B;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,UAAR,QAAyB,sCAAzB;;;AACA,SAASC,UAAT,GACA;AAAA;;AACI,MAAI,CAACC,aAAD,EAAgBC,iBAAhB,IAAqCR,QAAQ,CAACG,eAAD,CAAjD;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAACF,UAAU,CAACO,UAAD,CAAX,CAAhD;;AACA,QAAMM,WAAW,GAAGC,KAAK,IACzB;AACI,UAAMC,SAAS,GAAG,IAAIC,QAAJ,EAAlB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,OAAjB,EAA0BC,YAAY,CAACC,OAAb,CAAqB,IAArB,CAA1B;AACAJ,IAAAA,SAAS,CAACE,MAAV,CAAiB,OAAjB,EAA0BH,KAAK,CAACM,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAA1B;AACAN,IAAAA,SAAS,CAACE,MAAV,CAAiB,MAAjB,EAAwB,CAAxB;AAEAK,IAAAA,KAAK,CAACX,YAAD,CAAL;AACAY,IAAAA,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,EAAiDC,KAAjD,CAAuDC,OAAvD,GAAiE,MAAjE;AAEAC,IAAAA,KAAK,CACDhB,YAAY,GAAG,uBADd,EAED;AACIiB,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,IAAI,EAAEd;AAFV,KAFC,CAAL,CAOCe,IAPD,CAOOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPpB,EAQCF,IARD,CAQOG,MAAD,IACN;AACIvB,MAAAA,iBAAiB,CAACC,YAAY,GAAG,uBAAf,GAAyCO,YAAY,CAACC,OAAb,CAAqB,IAArB,CAA1C,CAAjB;AACAI,MAAAA,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,EAAiDC,KAAjD,CAAuDC,OAAvD,GAAiE,MAAjE;AACH,KAZD,EAaCQ,KAbD,CAaQC,KAAD,IAAW;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,QAAd,EAAwBA,KAAK,CAACJ,QAA9B;AACH,KAfD;AAgBH,GA1BD;;AA4BA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,sBAAT;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAIQ,QAAC,SAAD;AACI,QAAA,SAAS,EAAE,kBADf;AAEI,QAAA,EAAE,EAAE,kBAFR;AAGI,QAAA,OAAO,EAAE,UAHb;AAII,QAAA,IAAI,EAAC,MAJT;AAKI,QAAA,QAAQ,EAAElB,WALd;AAMI,QAAA,MAAM,EAAC;AANX;AAAA;AAAA;AAAA;AAAA,cAJR,eAaI,QAAC,KAAD;AACI,QAAA,QAAQ,EAAE,MADd;AAEI,QAAA,EAAE,EAAE,uBAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ,eAmBI,QAAC,GAAD;AAAA,+BACI;AAAK,UAAA,EAAE,EAAE,oBAAT;AAA+B,UAAA,GAAG,EAAEJ,aAApC;AAAmD,UAAA,KAAK,EAAE;AAA1D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH;;GA5DQD,U;;KAAAA,U;AA8DT,eAAeA,UAAf","sourcesContent":["import React, {useContext, useEffect, useState} from \"react\";\r\nimport \"./Blur.css\"\r\nimport {Box, TextField} from \"@material-ui/core\";\r\nimport blurredFallback from '../../../../../assets/blurredFallback.jpeg';\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport {ApiContext} from \"../../../../../apiContext/ApiContext\";\r\nfunction BlurImages()\r\n{\r\n    let [current_image, set_current_image] = useState(blurredFallback);\r\n    const [serverDomain, setServerDomain] = useState(useContext(ApiContext))\r\n    const uploadImage = event =>\r\n    {\r\n        const form_data = new FormData();\r\n        form_data.append('orgId', localStorage.getItem('id'));\r\n        form_data.append('image', event.target.files[0]);\r\n        form_data.append('type',1);\r\n\r\n        alert(serverDomain)\r\n        document.getElementById(\"processing_photo_info\").style.display = \"flex\";\r\n\r\n        fetch(\r\n            serverDomain + '/v1/frecognition/blur',\r\n            {\r\n                method: 'POST',\r\n                body: form_data,\r\n            }\r\n        )\r\n        .then((response) => response.json())\r\n        .then((result) =>\r\n        {\r\n            set_current_image(serverDomain + \"/pixelorblur/version/\" + localStorage.getItem('id'))\r\n            document.getElementById(\"processing_photo_info\").style.display = \"none\";\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error:', error.response);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"blur\">\r\n            <Box id={\"blur-image-container\"}>\r\n                <p>\r\n                    Upload an image to blur faces\r\n                </p>\r\n                    <TextField\r\n                        className={\"blur-image-input\"}\r\n                        id={\"blur-image-input\"}\r\n                        variant={\"outlined\"}\r\n                        type=\"file\"\r\n                        onChange={uploadImage}\r\n                        accept=\"image/*\"\r\n                    />\r\n\r\n                <Alert\r\n                    severity={'info'}\r\n                    id={\"processing_photo_info\"}\r\n                >\r\n                    please wait while we process the photo\r\n                </Alert>\r\n                <Box>\r\n                    <img id={\"blurred_image_here\"} src={current_image} width={400}/>\r\n                </Box>\r\n\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BlurImages;\r\n"]},"metadata":{},"sourceType":"module"}